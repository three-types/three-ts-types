diff --git a/jsdoc-testing/jsdoc/animation/AnimationAction.d.ts b/jsdoc-testing/jsdoc/animation/AnimationAction.d.ts
index 7489bf50..60574ecd 100644
--- a/jsdoc-testing/jsdoc/animation/AnimationAction.d.ts
+++ b/jsdoc-testing/jsdoc/animation/AnimationAction.d.ts
@@ -1,3 +1,8 @@
+import { AnimationActionLoopStyles, AnimationBlendMode } from "../constants.js";
+import { Object3D } from "../core/Object3D.js";
+import { AnimationClip } from "./AnimationClip.js";
+import { AnimationMixer } from "./AnimationMixer.js";
+
 /**
  * An instance of `AnimationAction` schedules the playback of an animation which is
  * stored in {@link AnimationClip}.
@@ -11,43 +16,24 @@ export class AnimationAction {
      * @param {?Object3D} [localRoot=null] - The root object on which this action is performed.
      * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.
      */
-    constructor(mixer: AnimationMixer, clip: AnimationClip, localRoot?: Object3D | null, blendMode?: (number | number));
-    _mixer: AnimationMixer;
-    _clip: AnimationClip;
-    _localRoot: any;
+    constructor(mixer: AnimationMixer, clip: AnimationClip, localRoot?: Object3D | null, blendMode?: AnimationBlendMode);
     /**
      * Defines how the animation is blended/combined when two or more animations
      * are simultaneously played.
-     *
-     * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}
      */
-    blendMode: (number | number);
-    _interpolantSettings: {
-        endingStart: number;
-        endingEnd: number;
-    };
-    _interpolants: any[];
-    _propertyBindings: any[];
-    _cacheIndex: any;
-    _byClipCacheIndex: any;
-    _timeScaleInterpolant: any;
-    _weightInterpolant: any;
+    blendMode: AnimationBlendMode;
     /**
      * The loop mode, set via {@link AnimationAction#setLoop}.
      *
-     * @type {(LoopRepeat|LoopOnce|LoopPingPong)}
      * @default LoopRepeat
      */
-    loop: (number | number | number);
-    _loopCount: number;
-    _startTime: number | null;
+    loop: AnimationActionLoopStyles;
     /**
      * The local time of this action (in seconds, starting with `0`).
      *
      * The value gets clamped or wrapped to `[0,clip.duration]` (according to the
      * loop state).
      *
-     * @type {number}
      * @default Infinity
      */
     time: number;
@@ -55,21 +41,17 @@ export class AnimationAction {
      * Scaling factor for the {@link AnimationAction#time}. A value of `0` causes the
      * animation to pause. Negative values cause the animation to play backwards.
      *
-     * @type {number}
      * @default 1
      */
     timeScale: number;
-    _effectiveTimeScale: number;
     /**
      * The degree of influence of this action (in the interval `[0, 1]`). Values
      * between `0` (no impact) and `1` (full impact) can be used to blend between
      * several actions.
      *
-     * @type {number}
      * @default 1
      */
     weight: number;
-    _effectiveWeight: number;
     /**
      * The number of repetitions of the performed clip over the course of this action.
      * Can be set via {@link AnimationAction#setLoop}.
@@ -77,14 +59,12 @@ export class AnimationAction {
      * Setting this number has no effect if {@link AnimationAction#loop} is set to
      * `THREE:LoopOnce`.
      *
-     * @type {number}
      * @default Infinity
      */
     repetitions: number;
     /**
      * If set to `true`, the playback of the action is paused.
      *
-     * @type {boolean}
      * @default false
      */
     paused: boolean;
@@ -94,7 +74,6 @@ export class AnimationAction {
      * When the action is re-enabled, the animation continues from its current
      * time (setting `enabled` to `false` doesn't reset the action).
      *
-     * @type {boolean}
      * @default true
      */
     enabled: boolean;
@@ -108,21 +87,18 @@ export class AnimationAction {
      * Note: This member has no impact if the action is interrupted (it
      * has only an effect if its last loop has really finished).
      *
-     * @type {boolean}
      * @default false
      */
     clampWhenFinished: boolean;
     /**
      * Enables smooth interpolation without separate clips for start, loop and end.
      *
-     * @type {boolean}
      * @default true
      */
     zeroSlopeAtStart: boolean;
     /**
      * Enables smooth interpolation without separate clips for start, loop and end.
      *
-     * @type {boolean}
      * @default true
      */
     zeroSlopeAtEnd: boolean;
@@ -170,7 +146,7 @@ export class AnimationAction {
      * @param {number} repetitions - The number of repetitions.
      * @return {AnimationAction} A reference to this animation action.
      */
-    setLoop(mode: (number | number | number), repetitions: number): AnimationAction;
+    setLoop(mode: AnimationActionLoopStyles, repetitions: number): AnimationAction;
     /**
      * Sets the effective weight of this action.
      *
@@ -301,10 +277,4 @@ export class AnimationAction {
      * @return {Object3D} The root object.
      */
     getRoot(): Object3D;
-    _update(time: any, deltaTime: any, timeDirection: any, accuIndex: any): void;
-    _updateWeight(time: any): number;
-    _updateTimeScale(time: any): number;
-    _updateTime(deltaTime: any): any;
-    _setEndings(atStart: any, atEnd: any, pingPong: any): void;
-    _scheduleFading(duration: any, weightNow: any, weightThen: any): this;
 }
diff --git a/jsdoc-testing/jsdoc/animation/AnimationClip.d.ts b/jsdoc-testing/jsdoc/animation/AnimationClip.d.ts
index 75ed2986..97de4b13 100644
--- a/jsdoc-testing/jsdoc/animation/AnimationClip.d.ts
+++ b/jsdoc-testing/jsdoc/animation/AnimationClip.d.ts
@@ -1,3 +1,22 @@
+import { AnimationBlendMode } from "../constants.js";
+import { Object3D } from "../core/Object3D.js";
+import { Vector3 } from "../math/Vector3.js";
+import { Bone } from "../objects/Bone.js";
+import { KeyframeTrack, KeyframeTrackJSON } from './KeyframeTrack.js';
+
+export interface AnimationClipJSON {
+    name: string;
+    duration: number;
+    tracks: KeyframeTrackJSON[];
+    uuid: string;
+    blendMode: AnimationBlendMode;
+}
+
+export interface MorphTarget {
+    name: string;
+    vertices: Vector3[];
+}
+
 /**
  * A reusable set of keyframe tracks which represent an animation.
  */
@@ -9,7 +28,7 @@ export class AnimationClip {
      * @param {Object} json - The serialized animation clip.
      * @return {AnimationClip} The new animation clip.
      */
-    static parse(json: Object): AnimationClip;
+    static parse(json: AnimationClipJSON): AnimationClip;
     /**
      * Serializes the given animation clip into JSON.
      *
@@ -17,7 +36,7 @@ export class AnimationClip {
      * @param {AnimationClip} clip - The animation clip to serialize.
      * @return {Object} The JSON object.
      */
-    static toJSON(clip: AnimationClip): Object;
+    static toJSON(clip: AnimationClip): AnimationClipJSON;
     /**
      * Returns a new animation clip from the passed morph targets array of a
      * geometry, taking a name and the number of frames per second.
@@ -32,7 +51,7 @@ export class AnimationClip {
      * @param {boolean} noLoop - Whether the clip should be no loop or not.
      * @return {AnimationClip} The new animation clip.
      */
-    static CreateFromMorphTargetSequence(name: string, morphTargetSequence: Array<Object>, fps: number, noLoop: boolean): AnimationClip;
+    static CreateFromMorphTargetSequence(name: string, morphTargetSequence: Array<MorphTarget>, fps: number, noLoop: boolean): AnimationClip;
     /**
      * Searches for an animation clip by name, taking as its first parameter
      * either an array of clips, or a mesh or geometry that contains an
@@ -57,7 +76,7 @@ export class AnimationClip {
      * @param {boolean} noLoop - Whether the clip should be no loop or not.
      * @return {Array<AnimationClip>} An array of new animation clips.
      */
-    static CreateClipsFromMorphTargetSequences(morphTargets: Array<Object>, fps: number, noLoop: boolean): Array<AnimationClip>;
+    static CreateClipsFromMorphTargetSequences(morphTargets: Array<MorphTarget>, fps: number, noLoop: boolean): Array<AnimationClip>;
     /**
      * Parses the `animation.hierarchy` format and returns a new animation clip.
      *
@@ -67,7 +86,7 @@ export class AnimationClip {
      * @param {Array<Bones>} bones - An array of bones.
      * @return {?AnimationClip} The new animation clip.
      */
-    static parseAnimation(animation: Object, bones: Array<Bones>): AnimationClip | null;
+    static parseAnimation(animation: AnimationClipJSON, bones: Array<Bone>): AnimationClip | null;
     /**
      * Constructs a new animation clip.
      *
@@ -82,37 +101,26 @@ export class AnimationClip {
      * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode=NormalAnimationBlendMode] - Defines how the animation
      * is blended/combined when two or more animations are simultaneously played.
      */
-    constructor(name?: string, duration?: number, tracks?: Array<KeyframeTrack>, blendMode?: (number | AdditiveAnimationBlendMode));
+    constructor(name?: string, duration?: number, tracks?: Array<KeyframeTrack>, blendMode?: AnimationBlendMode);
     /**
      * The clip's name.
-     *
-     * @type {string}
      */
     name: string;
     /**
      *  An array of keyframe tracks.
-     *
-     * @type {Array<KeyframeTrack>}
      */
     tracks: Array<KeyframeTrack>;
     /**
      * The clip's duration in seconds.
-     *
-     * @type {number}
      */
     duration: number;
     /**
      * Defines how the animation is blended/combined when two or more animations
      * are simultaneously played.
-     *
-     * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}
      */
-    blendMode: (number | AdditiveAnimationBlendMode);
+    blendMode: AnimationBlendMode;
     /**
      * The UUID of the animation clip.
-     *
-     * @type {string}
-     * @readonly
      */
     readonly uuid: string;
     /**
@@ -146,12 +154,11 @@ export class AnimationClip {
      *
      * @return {AnimationClip} A clone of this instance.
      */
-    clone(): AnimationClip;
+    clone(): this;
     /**
      * Serializes this animation clip into JSON.
      *
      * @return {Object} The JSON object.
      */
-    toJSON(): Object;
+    toJSON(): AnimationClipJSON;
 }
-import { KeyframeTrack } from './KeyframeTrack.js';
diff --git a/jsdoc-testing/jsdoc/animation/AnimationMixer.d.ts b/jsdoc-testing/jsdoc/animation/AnimationMixer.d.ts
index ea941771..6dd20561 100644
--- a/jsdoc-testing/jsdoc/animation/AnimationMixer.d.ts
+++ b/jsdoc-testing/jsdoc/animation/AnimationMixer.d.ts
@@ -1,21 +1,30 @@
+import { EventDispatcher } from '../core/EventDispatcher.js';
+import { AnimationClip } from './AnimationClip.js';
+import { AnimationAction } from './AnimationAction.js';
+import { AnimationBlendMode } from "../constants.js";
+import { Object3D } from "../core/Object3D.js";
+import { AnimationObjectGroup } from "./AnimationObjectGroup.js";
+
+export interface AnimationMixerEventMap {
+    loop: { action: AnimationAction; loopDelta: number };
+    finished: { action: AnimationAction; direction: number };
+}
+
 /**
  * `AnimationMixer` is a player for animations on a particular object in
  * the scene. When multiple objects in the scene are animated independently,
  * one `AnimationMixer` may be used for each object.
  */
-export class AnimationMixer extends EventDispatcher {
+export class AnimationMixer extends EventDispatcher<AnimationMixerEventMap> {
     /**
      * Constructs a new animation mixer.
      *
      * @param {Object3D} root - The object whose animations shall be played by this mixer.
      */
-    constructor(root: Object3D);
-    _root: Object3D;
-    _accuIndex: number;
+    constructor(root: Object3D | AnimationObjectGroup);
     /**
      * The global mixer time (in seconds; starting with `0` on the mixer's creation).
      *
-     * @type {number}
      * @default 0
      */
     time: number;
@@ -26,48 +35,9 @@ export class AnimationMixer extends EventDispatcher {
      * possibility to pause/unpause all actions that are controlled by this
      * mixer.
      *
-     * @type {number}
      * @default 1
      */
     timeScale: number;
-    _bindAction(action: any, prototypeAction: any): void;
-    _activateAction(action: any): void;
-    _deactivateAction(action: any): void;
-    _initMemoryManager(): void;
-    _actions: any[] | undefined;
-    _nActiveActions: number | undefined;
-    _actionsByClip: {} | undefined;
-    _bindings: any[] | undefined;
-    _nActiveBindings: number | undefined;
-    _bindingsByRootAndName: {} | undefined;
-    _controlInterpolants: any[] | undefined;
-    _nActiveControlInterpolants: number | undefined;
-    stats: {
-        actions: {
-            readonly total: number;
-            readonly inUse: number | undefined;
-        };
-        bindings: {
-            readonly total: number;
-            readonly inUse: number | undefined;
-        };
-        controlInterpolants: {
-            readonly total: number;
-            readonly inUse: number | undefined;
-        };
-    } | undefined;
-    _isActiveAction(action: any): boolean;
-    _addInactiveAction(action: any, clipUuid: any, rootUuid: any): void;
-    _removeInactiveAction(action: any): void;
-    _removeInactiveBindingsForAction(action: any): void;
-    _lendAction(action: any): void;
-    _takeBackAction(action: any): void;
-    _addInactiveBinding(binding: any, rootUuid: any, trackName: any): void;
-    _removeInactiveBinding(binding: any): void;
-    _lendBinding(binding: any): void;
-    _takeBackBinding(binding: any): void;
-    _lendControlInterpolant(): any;
-    _takeBackControlInterpolant(interpolant: any): void;
     /**
      * Returns an instance of {@link AnimationAction} for the passed clip.
      *
@@ -80,7 +50,8 @@ export class AnimationMixer extends EventDispatcher {
      * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.
      * @return {?AnimationAction} The animation action.
      */
-    clipAction(clip: AnimationClip | string, optionalRoot?: Object3D, blendMode?: (number | AdditiveAnimationBlendMode)): AnimationAction | null;
+    clipAction(clip: AnimationClip, optionalRoot?: Object3D | AnimationObjectGroup, blendMode?: AnimationBlendMode): AnimationAction;
+    clipAction(clip: AnimationClip | string, optionalRoot?: Object3D | AnimationObjectGroup, blendMode?: AnimationBlendMode): AnimationAction | null;
     /**
      * Returns an existing animation action for the passed clip.
      *
@@ -88,7 +59,7 @@ export class AnimationMixer extends EventDispatcher {
      * @param {Object3D} [optionalRoot] - An alternative root object.
      * @return {?AnimationAction} The animation action. Returns `null` if no action was found.
      */
-    existingAction(clip: AnimationClip | string, optionalRoot?: Object3D): AnimationAction | null;
+    existingAction(clip: AnimationClip | string, optionalRoot?: Object3D | AnimationObjectGroup): AnimationAction | null;
     /**
      * Deactivates all previously scheduled actions on this mixer.
      *
@@ -120,7 +91,7 @@ export class AnimationMixer extends EventDispatcher {
      *
      * @return {Object3D} The mixer's root object.
      */
-    getRoot(): Object3D;
+    getRoot(): Object3D | AnimationObjectGroup;
     /**
      * Deallocates all memory resources for a clip. Before using this method make
      * sure to call {@link AnimationAction#stop} for all related actions.
@@ -136,7 +107,7 @@ export class AnimationMixer extends EventDispatcher {
      *
      * @param {Object3D} root - The root object to uncache.
      */
-    uncacheRoot(root: Object3D): void;
+    uncacheRoot(root: Object3D | AnimationObjectGroup): void;
     /**
      * Deallocates all memory resources for an action. The action is identified by the
      * given clip and an optional root object. Before using this method make
@@ -145,8 +116,5 @@ export class AnimationMixer extends EventDispatcher {
      * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.
      * @param {Object3D} [optionalRoot] - An alternative root object.
      */
-    uncacheAction(clip: AnimationClip | string, optionalRoot?: Object3D): void;
+    uncacheAction(clip: AnimationClip | string, optionalRoot?: Object3D | AnimationObjectGroup): void;
 }
-import { EventDispatcher } from '../core/EventDispatcher.js';
-import { AnimationClip } from './AnimationClip.js';
-import { AnimationAction } from './AnimationAction.js';
diff --git a/jsdoc-testing/jsdoc/animation/AnimationObjectGroup.d.ts b/jsdoc-testing/jsdoc/animation/AnimationObjectGroup.d.ts
index 040c4af5..21a787d5 100644
--- a/jsdoc-testing/jsdoc/animation/AnimationObjectGroup.d.ts
+++ b/jsdoc-testing/jsdoc/animation/AnimationObjectGroup.d.ts
@@ -1,3 +1,5 @@
+import { Object3D } from "../core/Object3D.js";
+
 /**
  * A group of objects that receives a shared animation state.
  *
@@ -28,32 +30,13 @@ export class AnimationObjectGroup {
     /**
      * This flag can be used for type testing.
      *
-     * @type {boolean}
-     * @readonly
      * @default true
      */
-    readonly isAnimationObjectGroup: boolean;
+    readonly isAnimationObjectGroup: true;
     /**
      * The UUID of the 3D object.
-     *
-     * @type {string}
-     * @readonly
      */
     readonly uuid: string;
-    _objects: any[];
-    nCachedObjects_: number;
-    _indicesByUUID: {};
-    _paths: any[];
-    _parsedPaths: any[];
-    _bindings: any[];
-    _bindingsIndicesByPath: {};
-    stats: {
-        objects: {
-            readonly total: number;
-            readonly inUse: number;
-        };
-        readonly bindingsPerObject: number;
-    };
     /**
      * Adds an arbitrary number of objects to this animation group.
      *
@@ -72,6 +55,4 @@ export class AnimationObjectGroup {
      * @param {...Object3D} arguments - The 3D objects to uncache.
      */
     uncache(...args: Object3D[]): void;
-    subscribe_(path: any, parsedPath: any): any;
-    unsubscribe_(path: any): void;
 }
diff --git a/jsdoc-testing/jsdoc/animation/AnimationUtils.d.ts b/jsdoc-testing/jsdoc/animation/AnimationUtils.d.ts
index b8f10dfd..dbec9086 100644
--- a/jsdoc-testing/jsdoc/animation/AnimationUtils.d.ts
+++ b/jsdoc-testing/jsdoc/animation/AnimationUtils.d.ts
@@ -1,3 +1,6 @@
+import { AnimationClip } from "./AnimationClip.js";
+import { TypedArray, TypedArrayConstructor} from '../core/BufferAttribute.js';
+
 /**
  * Converts an array to a specific type.
  *
@@ -5,14 +8,14 @@
  * @param {TypedArray.constructor} type - The constructor of a typed array that defines the new type.
  * @return {TypedArray} The converted array.
  */
-export function convertArray(array: TypedArray | any[], type: TypedArray.constructor): TypedArray;
+export function convertArray(array: TypedArray | number[], type: TypedArrayConstructor): TypedArray | number[];
 /**
  * Returns `true` if the given object is a typed array.
  *
  * @param {any} object - The object to check.
  * @return {boolean} Whether the given object is a typed array.
  */
-export function isTypedArray(object: any): boolean;
+export function isTypedArray(object: unknown): boolean;
 /**
  * Returns an array by which times and values can be sorted.
  *
@@ -73,7 +76,7 @@ export class AnimationUtils {
      * @param {TypedArray.constructor} type - The constructor of a type array.
      * @return {TypedArray} The converted array
      */
-    static convertArray(array: TypedArray | any[], type: TypedArray.constructor): TypedArray;
+    static convertArray(array: TypedArray | number[], type: TypedArrayConstructor): TypedArray | number[];
     /**
      * Returns `true` if the given object is a typed array.
      *
@@ -81,7 +84,7 @@ export class AnimationUtils {
      * @param {any} object - The object to check.
      * @return {boolean} Whether the given object is a typed array.
      */
-    static isTypedArray(object: any): boolean;
+    static isTypedArray(object: unknown): boolean;
     /**
      * Returns an array by which times and values can be sorted.
      *
diff --git a/jsdoc-testing/jsdoc/animation/KeyframeTrack.d.ts b/jsdoc-testing/jsdoc/animation/KeyframeTrack.d.ts
index 45b4b715..e4bbb710 100644
--- a/jsdoc-testing/jsdoc/animation/KeyframeTrack.d.ts
+++ b/jsdoc-testing/jsdoc/animation/KeyframeTrack.d.ts
@@ -1,3 +1,17 @@
+import { DiscreteInterpolant } from '../math/interpolants/DiscreteInterpolant.js';
+import { LinearInterpolant } from '../math/interpolants/LinearInterpolant.js';
+import { CubicInterpolant } from '../math/interpolants/CubicInterpolant.js';
+import { InterpolationModes } from "../constants.js";
+import { TypedArray, TypedArrayConstructor } from '../core/BufferAttribute.js';
+
+export interface KeyframeTrackJSON {
+    name: string;
+    times: number[];
+    values: number[];
+    interpolation?: InterpolationModes;
+    type: string;
+}
+
 /**
  * Represents s a timed sequence of keyframes, which are composed of lists of
  * times and related values, and which are used to animate a specific property
@@ -11,7 +25,7 @@ export class KeyframeTrack {
      * @param {KeyframeTrack} track - The keyframe track to serialize.
      * @return {Object} The serialized keyframe track as JSON.
      */
-    static toJSON(track: KeyframeTrack): Object;
+    static toJSON(track: KeyframeTrack): KeyframeTrackJSON;
     /**
      * Constructs a new keyframe track.
      *
@@ -20,25 +34,19 @@ export class KeyframeTrack {
      * @param {Array<number>} values - A list of keyframe values.
      * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
      */
-    constructor(name: string, times: Array<number>, values: Array<number>, interpolation?: (number | number | number));
+    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>, interpolation?: InterpolationModes);
     /**
      * The track's name can refer to morph targets or bones or
      * possibly other values within an animated object. See {@link PropertyBinding#parseTrackName}
      * for the forms of strings that can be parsed for property binding.
-     *
-     * @type {string}
      */
     name: string;
     /**
      * The keyframe times.
-     *
-     * @type {Float32Array}
      */
     times: Float32Array;
     /**
      * The keyframe values.
-     *
-     * @type {Float32Array}
      */
     values: Float32Array;
     /**
@@ -71,14 +79,13 @@ export class KeyframeTrack {
      * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} interpolation - The interpolation type.
      * @return {KeyframeTrack} A reference to this keyframe track.
      */
-    setInterpolation(interpolation: (number | number | number)): KeyframeTrack;
-    createInterpolant: ((result?: TypedArray) => LinearInterpolant) | ((result?: TypedArray) => CubicInterpolant) | undefined;
+    setInterpolation(interpolation: InterpolationModes): KeyframeTrack;
     /**
      * Returns the current interpolation type.
      *
      * @return {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} The interpolation type.
      */
-    getInterpolation(): (number | number | number);
+    getInterpolation(): InterpolationModes;
     /**
      * Returns the value size.
      *
@@ -123,42 +130,35 @@ export class KeyframeTrack {
      *
      * @return {AnimationClip} A reference to this animation clip.
      */
-    optimize(): AnimationClip;
+    optimize(): this;
     /**
      * Returns a new keyframe track with copied values from this instance.
      *
      * @return {KeyframeTrack} A clone of this instance.
      */
-    clone(): KeyframeTrack;
+    clone(): this;
     /**
      * The value type name.
      *
-     * @type {String}
      * @default ''
      */
     ValueTypeName: string;
     /**
      * The time buffer type of this keyframe track.
      *
-     * @type {TypedArray|Array}
      * @default Float32Array.constructor
      */
-    TimeBufferType: TypedArray | any[];
+    TimeBufferType: TypedArrayConstructor | ArrayConstructor;
     /**
      * The value buffer type of this keyframe track.
      *
-     * @type {TypedArray|Array}
      * @default Float32Array.constructor
      */
-    ValueBufferType: TypedArray | any[];
+    ValueBufferType: TypedArrayConstructor | ArrayConstructor;
     /**
      * The default interpolation type of this keyframe track.
      *
-     * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}
      * @default InterpolateLinear
      */
-    DefaultInterpolation: (number | number | number);
+    DefaultInterpolation: InterpolationModes;
 }
-import { DiscreteInterpolant } from '../math/interpolants/DiscreteInterpolant.js';
-import { LinearInterpolant } from '../math/interpolants/LinearInterpolant.js';
-import { CubicInterpolant } from '../math/interpolants/CubicInterpolant.js';
diff --git a/jsdoc-testing/jsdoc/animation/PropertyBinding.d.ts b/jsdoc-testing/jsdoc/animation/PropertyBinding.d.ts
index af4e99d9..bb6c8ec8 100644
--- a/jsdoc-testing/jsdoc/animation/PropertyBinding.d.ts
+++ b/jsdoc-testing/jsdoc/animation/PropertyBinding.d.ts
@@ -1,3 +1,14 @@
+import { Object3D } from "../core/Object3D.js";
+import { Skeleton } from "../objects/Skeleton.js";
+
+export interface ParseTrackNameResults {
+    nodeName: string;
+    objectName: string;
+    objectIndex: string;
+    propertyName: string;
+    propertyIndex: string;
+}
+
 /**
  * This holds a reference to a real property in the scene graph; used internally.
  */
@@ -11,7 +22,7 @@ export class PropertyBinding {
      * @param {?Object} [parsedPath] - The parsed path.
      * @return {PropertyBinding|Composite} The created property binding or composite.
      */
-    static create(root: Object, path: string, parsedPath?: Object | null): PropertyBinding | Composite;
+    static create(root: object, path: string, parsedPath?: object | null): PropertyBinding | Composite;
     /**
      * Replaces spaces with underscores and removes unsupported characters from
      * node names, to ensure compatibility with parseTrackName().
@@ -38,7 +49,7 @@ export class PropertyBinding {
      * @param {string} trackName - The track name to parse.
      * @return {Object} The parsed track name as an object.
      */
-    static parseTrackName(trackName: string): Object;
+    static parseTrackName(trackName: string): ParseTrackNameResults;
     /**
      * Searches for a node in the hierarchy of the given root object by the given
      * node name.
@@ -48,7 +59,7 @@ export class PropertyBinding {
      * @param {string|number} nodeName - The name of the node.
      * @return {?Object} The found node. Returns `null` if no object was found.
      */
-    static findNode(root: Object, nodeName: string | number): Object | null;
+    static findNode(root: object, nodeName: string | number): object | null;
     /**
      * Constructs a new property binding.
      *
@@ -56,89 +67,35 @@ export class PropertyBinding {
      * @param {string} path - The path.
      * @param {?Object} [parsedPath] - The parsed path.
      */
-    constructor(rootNode: Object, path: string, parsedPath?: Object | null);
+    constructor(rootNode: Object3D | Skeleton, path: string, parsedPath?: object | null);
     /**
      * The object path to the animated property.
-     *
-     * @type {string}
      */
     path: string;
     /**
      * An object holding information about the path.
-     *
-     * @type {Object}
      */
-    parsedPath: Object;
+    parsedPath: object;
     /**
      * The object owns the animated property.
-     *
-     * @type {?Object}
      */
-    node: Object | null;
+    node: object | null;
     /**
      * The root node.
-     *
-     * @type {Object3D|Skeleton}
      */
     rootNode: Object3D | Skeleton;
-    getValue: (targetArray: any, offset: any) => void;
-    setValue: (sourceArray: any, offset: any) => void;
-    _getValue_unavailable(): void;
-    _setValue_unavailable(): void;
-    _getValue_direct(buffer: any, offset: any): void;
-    _getValue_array(buffer: any, offset: any): void;
-    _getValue_arrayElement(buffer: any, offset: any): void;
-    _getValue_toArray(buffer: any, offset: any): void;
-    _setValue_direct(buffer: any, offset: any): void;
-    _setValue_direct_setNeedsUpdate(buffer: any, offset: any): void;
-    _setValue_direct_setMatrixWorldNeedsUpdate(buffer: any, offset: any): void;
-    _setValue_array(buffer: any, offset: any): void;
-    _setValue_array_setNeedsUpdate(buffer: any, offset: any): void;
-    _setValue_array_setMatrixWorldNeedsUpdate(buffer: any, offset: any): void;
-    _setValue_arrayElement(buffer: any, offset: any): void;
-    _setValue_arrayElement_setNeedsUpdate(buffer: any, offset: any): void;
-    _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer: any, offset: any): void;
-    _setValue_fromArray(buffer: any, offset: any): void;
-    _setValue_fromArray_setNeedsUpdate(buffer: any, offset: any): void;
-    _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer: any, offset: any): void;
-    _getValue_unbound(targetArray: any, offset: any): void;
-    _setValue_unbound(sourceArray: any, offset: any): void;
     /**
      * Creates a getter / setter pair for the property tracked by this binding.
      */
     bind(): void;
-    targetObject: Object | null | undefined;
-    resolvedProperty: any;
-    propertyIndex: any;
-    propertyName: any;
     /**
      * Unbinds the property.
      */
     unbind(): void;
-    BindingType: {
-        Direct: number;
-        EntireArray: number;
-        ArrayElement: number;
-        HasFromToArray: number;
-    };
-    Versioning: {
-        None: number;
-        NeedsUpdate: number;
-        MatrixWorldNeedsUpdate: number;
-    };
-    GetterByBindingType: ((buffer: any, offset: any) => void)[];
-    SetterByBindingTypeAndVersioning: ((buffer: any, offset: any) => void)[][];
 }
 export namespace PropertyBinding {
     export { Composite };
 }
 declare class Composite {
-    constructor(targetGroup: any, path: any, optionalParsedPath: any);
-    _targetGroup: any;
-    _bindings: any;
-    getValue(array: any, offset: any): void;
-    setValue(array: any, offset: any): void;
-    bind(): void;
-    unbind(): void;
 }
 export {};
diff --git a/jsdoc-testing/jsdoc/animation/PropertyMixer.d.ts b/jsdoc-testing/jsdoc/animation/PropertyMixer.d.ts
index d73e7547..96537311 100644
--- a/jsdoc-testing/jsdoc/animation/PropertyMixer.d.ts
+++ b/jsdoc-testing/jsdoc/animation/PropertyMixer.d.ts
@@ -1,3 +1,5 @@
+import { PropertyBinding } from './PropertyBinding.js';
+
 /**
  * Buffered scene graph property that allows weighted accumulation; used internally.
  */
@@ -12,48 +14,33 @@ export class PropertyMixer {
     constructor(binding: PropertyBinding, typeName: string, valueSize: number);
     /**
      * The property binding.
-     *
-     * @type {PropertyBinding}
      */
     binding: PropertyBinding;
     /**
      * The keyframe track value size.
-     *
-     * @type {number}
      */
     valueSize: number;
-    buffer: any[] | Float64Array<ArrayBuffer>;
-    _workIndex: number | undefined;
-    _mixBufferRegion: (buffer: any, dstOffset: any, srcOffset: any, t: any, stride: any) => void;
-    _mixBufferRegionAdditive: (buffer: any, dstOffset: any, srcOffset: any, t: any, stride: any) => void;
-    _setIdentity: () => void;
-    _origIndex: number;
-    _addIndex: number;
     /**
      * TODO
      *
-     * @type {number}
      * @default 0
      */
     cumulativeWeight: number;
     /**
      * TODO
      *
-     * @type {number}
      * @default 0
      */
     cumulativeWeightAdditive: number;
     /**
      * TODO
      *
-     * @type {number}
      * @default 0
      */
     useCount: number;
     /**
      * TODO
      *
-     * @type {number}
      * @default 0
      */
     referenceCount: number;
@@ -84,12 +71,4 @@ export class PropertyMixer {
      * Applies the state previously taken via {@link PropertyMixer#saveOriginalState} to the binding.
      */
     restoreOriginalState(): void;
-    _setAdditiveIdentityNumeric(): void;
-    _setAdditiveIdentityQuaternion(): void;
-    _setAdditiveIdentityOther(): void;
-    _select(buffer: any, dstOffset: any, srcOffset: any, t: any, stride: any): void;
-    _slerp(buffer: any, dstOffset: any, srcOffset: any, t: any): void;
-    _slerpAdditive(buffer: any, dstOffset: any, srcOffset: any, t: any, stride: any): void;
-    _lerp(buffer: any, dstOffset: any, srcOffset: any, t: any, stride: any): void;
-    _lerpAdditive(buffer: any, dstOffset: any, srcOffset: any, t: any, stride: any): void;
 }
diff --git a/jsdoc-testing/jsdoc/animation/tracks/BooleanKeyframeTrack.d.ts b/jsdoc-testing/jsdoc/animation/tracks/BooleanKeyframeTrack.d.ts
index 998efcc9..7d7b155a 100644
--- a/jsdoc-testing/jsdoc/animation/tracks/BooleanKeyframeTrack.d.ts
+++ b/jsdoc-testing/jsdoc/animation/tracks/BooleanKeyframeTrack.d.ts
@@ -1,7 +1,7 @@
+import { KeyframeTrack } from '../KeyframeTrack.js';
+
 /**
  * A track for boolean keyframe values.
- *
- * @augments KeyframeTrack
  */
 export class BooleanKeyframeTrack extends KeyframeTrack {
     /**
@@ -14,15 +14,5 @@ export class BooleanKeyframeTrack extends KeyframeTrack {
      * @param {Array<number>} times - A list of keyframe times.
      * @param {Array<number>} values - A list of keyframe values.
      */
-    constructor(name: string, times: Array<number>, values: Array<number>);
-    /**
-     * The default interpolation type of this keyframe track.
-     *
-     * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}
-     * @default InterpolateDiscrete
-     */
-    DefaultInterpolation: (InterpolateLinear | number | InterpolateSmooth);
-    InterpolantFactoryMethodLinear: any;
-    InterpolantFactoryMethodSmooth: any;
+    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>);
 }
-import { KeyframeTrack } from '../KeyframeTrack.js';
diff --git a/jsdoc-testing/jsdoc/animation/tracks/ColorKeyframeTrack.d.ts b/jsdoc-testing/jsdoc/animation/tracks/ColorKeyframeTrack.d.ts
index aa0f64d7..a97bcb3a 100644
--- a/jsdoc-testing/jsdoc/animation/tracks/ColorKeyframeTrack.d.ts
+++ b/jsdoc-testing/jsdoc/animation/tracks/ColorKeyframeTrack.d.ts
@@ -1,7 +1,8 @@
+import { KeyframeTrack } from '../KeyframeTrack.js';
+import { InterpolationModes } from '../../constants.js';
+
 /**
  * A track for color keyframe values.
- *
- * @augments KeyframeTrack
  */
 export class ColorKeyframeTrack extends KeyframeTrack {
     /**
@@ -12,6 +13,5 @@ export class ColorKeyframeTrack extends KeyframeTrack {
      * @param {Array<number>} values - A list of keyframe values.
      * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
      */
-    constructor(name: string, times: Array<number>, values: Array<number>, interpolation?: (InterpolateLinear | InterpolateDiscrete | InterpolateSmooth));
+    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>, interpolation?: InterpolationModes);
 }
-import { KeyframeTrack } from '../KeyframeTrack.js';
diff --git a/jsdoc-testing/jsdoc/animation/tracks/NumberKeyframeTrack.d.ts b/jsdoc-testing/jsdoc/animation/tracks/NumberKeyframeTrack.d.ts
index f83c955c..d9da4752 100644
--- a/jsdoc-testing/jsdoc/animation/tracks/NumberKeyframeTrack.d.ts
+++ b/jsdoc-testing/jsdoc/animation/tracks/NumberKeyframeTrack.d.ts
@@ -1,7 +1,8 @@
+import { KeyframeTrack } from '../KeyframeTrack.js';
+import { InterpolationModes } from '../../constants.js';
+
 /**
  * A track for numeric keyframe values.
- *
- * @augments KeyframeTrack
  */
 export class NumberKeyframeTrack extends KeyframeTrack {
     /**
@@ -12,6 +13,5 @@ export class NumberKeyframeTrack extends KeyframeTrack {
      * @param {Array<number>} values - A list of keyframe values.
      * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
      */
-    constructor(name: string, times: Array<number>, values: Array<number>, interpolation?: (InterpolateLinear | InterpolateDiscrete | InterpolateSmooth));
+    constructor(name: string, times: Array<number>, values: Array<number>, interpolation?: InterpolationModes);
 }
-import { KeyframeTrack } from '../KeyframeTrack.js';
diff --git a/jsdoc-testing/jsdoc/animation/tracks/QuaternionKeyframeTrack.d.ts b/jsdoc-testing/jsdoc/animation/tracks/QuaternionKeyframeTrack.d.ts
index 98e4a75e..9829cc69 100644
--- a/jsdoc-testing/jsdoc/animation/tracks/QuaternionKeyframeTrack.d.ts
+++ b/jsdoc-testing/jsdoc/animation/tracks/QuaternionKeyframeTrack.d.ts
@@ -1,7 +1,8 @@
+import { KeyframeTrack } from '../KeyframeTrack.js';
+import { InterpolationModes } from '../../constants.js';
+
 /**
  * A track for Quaternion keyframe values.
- *
- * @augments KeyframeTrack
  */
 export class QuaternionKeyframeTrack extends KeyframeTrack {
     /**
@@ -12,7 +13,5 @@ export class QuaternionKeyframeTrack extends KeyframeTrack {
      * @param {Array<number>} values - A list of keyframe values.
      * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
      */
-    constructor(name: string, times: Array<number>, values: Array<number>, interpolation?: (InterpolateLinear | InterpolateDiscrete | InterpolateSmooth));
-    InterpolantFactoryMethodSmooth: any;
+    constructor(name: string, times: Array<number>, values: Array<number>, interpolation?: InterpolationModes);
 }
-import { KeyframeTrack } from '../KeyframeTrack.js';
diff --git a/jsdoc-testing/jsdoc/animation/tracks/StringKeyframeTrack.d.ts b/jsdoc-testing/jsdoc/animation/tracks/StringKeyframeTrack.d.ts
index 26868e33..2c15769a 100644
--- a/jsdoc-testing/jsdoc/animation/tracks/StringKeyframeTrack.d.ts
+++ b/jsdoc-testing/jsdoc/animation/tracks/StringKeyframeTrack.d.ts
@@ -1,7 +1,7 @@
+import { KeyframeTrack } from '../KeyframeTrack.js';
+
 /**
  * A track for string keyframe values.
- *
- * @augments KeyframeTrack
  */
 export class StringKeyframeTrack extends KeyframeTrack {
     /**
@@ -15,14 +15,4 @@ export class StringKeyframeTrack extends KeyframeTrack {
      * @param {Array<number>} values - A list of keyframe values.
      */
     constructor(name: string, times: Array<number>, values: Array<number>);
-    /**
-     * The default interpolation type of this keyframe track.
-     *
-     * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}
-     * @default InterpolateDiscrete
-     */
-    DefaultInterpolation: (InterpolateLinear | number | InterpolateSmooth);
-    InterpolantFactoryMethodLinear: any;
-    InterpolantFactoryMethodSmooth: any;
 }
-import { KeyframeTrack } from '../KeyframeTrack.js';
diff --git a/jsdoc-testing/jsdoc/animation/tracks/VectorKeyframeTrack.d.ts b/jsdoc-testing/jsdoc/animation/tracks/VectorKeyframeTrack.d.ts
index 856db2d5..89a16060 100644
--- a/jsdoc-testing/jsdoc/animation/tracks/VectorKeyframeTrack.d.ts
+++ b/jsdoc-testing/jsdoc/animation/tracks/VectorKeyframeTrack.d.ts
@@ -1,7 +1,8 @@
+import { KeyframeTrack } from '../KeyframeTrack.js';
+import { InterpolationModes } from '../../constants.js';
+
 /**
  * A track for vector keyframe values.
- *
- * @augments KeyframeTrack
  */
 export class VectorKeyframeTrack extends KeyframeTrack {
     /**
@@ -12,6 +13,5 @@ export class VectorKeyframeTrack extends KeyframeTrack {
      * @param {Array<number>} values - A list of keyframe values.
      * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
      */
-    constructor(name: string, times: Array<number>, values: Array<number>, interpolation?: (InterpolateLinear | InterpolateDiscrete | InterpolateSmooth));
+    constructor(name: string, times: Array<number>, values: Array<number>, interpolation?: InterpolationModes);
 }
-import { KeyframeTrack } from '../KeyframeTrack.js';
