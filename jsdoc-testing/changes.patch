diff --git a/jsdoc-testing/jsdoc/animation/AnimationAction.d.ts b/jsdoc-testing/jsdoc/animation/AnimationAction.d.ts
index 7489bf50..7849540e 100644
--- a/jsdoc-testing/jsdoc/animation/AnimationAction.d.ts
+++ b/jsdoc-testing/jsdoc/animation/AnimationAction.d.ts
@@ -1,3 +1,8 @@
+import { AnimationActionLoopStyles, AnimationBlendMode } from "../constants.js";
+import { Object3D } from "../core/Object3D.js";
+import { AnimationClip } from "./AnimationClip.js";
+import { AnimationMixer } from "./AnimationMixer.js";
+
 /**
  * An instance of `AnimationAction` schedules the playback of an animation which is
  * stored in {@link AnimationClip}.
@@ -11,43 +16,24 @@ export class AnimationAction {
      * @param {?Object3D} [localRoot=null] - The root object on which this action is performed.
      * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.
      */
-    constructor(mixer: AnimationMixer, clip: AnimationClip, localRoot?: Object3D | null, blendMode?: (number | number));
-    _mixer: AnimationMixer;
-    _clip: AnimationClip;
-    _localRoot: any;
+    constructor(mixer: AnimationMixer, clip: AnimationClip, localRoot?: Object3D | null, blendMode?: AnimationBlendMode);
     /**
      * Defines how the animation is blended/combined when two or more animations
      * are simultaneously played.
-     *
-     * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}
      */
-    blendMode: (number | number);
-    _interpolantSettings: {
-        endingStart: number;
-        endingEnd: number;
-    };
-    _interpolants: any[];
-    _propertyBindings: any[];
-    _cacheIndex: any;
-    _byClipCacheIndex: any;
-    _timeScaleInterpolant: any;
-    _weightInterpolant: any;
+    blendMode: AnimationBlendMode;
     /**
      * The loop mode, set via {@link AnimationAction#setLoop}.
      *
-     * @type {(LoopRepeat|LoopOnce|LoopPingPong)}
      * @default LoopRepeat
      */
-    loop: (number | number | number);
-    _loopCount: number;
-    _startTime: number | null;
+    loop: AnimationActionLoopStyles;
     /**
      * The local time of this action (in seconds, starting with `0`).
      *
      * The value gets clamped or wrapped to `[0,clip.duration]` (according to the
      * loop state).
      *
-     * @type {number}
      * @default Infinity
      */
     time: number;
@@ -55,21 +41,17 @@ export class AnimationAction {
      * Scaling factor for the {@link AnimationAction#time}. A value of `0` causes the
      * animation to pause. Negative values cause the animation to play backwards.
      *
-     * @type {number}
      * @default 1
      */
     timeScale: number;
-    _effectiveTimeScale: number;
     /**
      * The degree of influence of this action (in the interval `[0, 1]`). Values
      * between `0` (no impact) and `1` (full impact) can be used to blend between
      * several actions.
      *
-     * @type {number}
      * @default 1
      */
     weight: number;
-    _effectiveWeight: number;
     /**
      * The number of repetitions of the performed clip over the course of this action.
      * Can be set via {@link AnimationAction#setLoop}.
@@ -77,14 +59,12 @@ export class AnimationAction {
      * Setting this number has no effect if {@link AnimationAction#loop} is set to
      * `THREE:LoopOnce`.
      *
-     * @type {number}
      * @default Infinity
      */
     repetitions: number;
     /**
      * If set to `true`, the playback of the action is paused.
      *
-     * @type {boolean}
      * @default false
      */
     paused: boolean;
@@ -94,7 +74,6 @@ export class AnimationAction {
      * When the action is re-enabled, the animation continues from its current
      * time (setting `enabled` to `false` doesn't reset the action).
      *
-     * @type {boolean}
      * @default true
      */
     enabled: boolean;
@@ -108,21 +87,18 @@ export class AnimationAction {
      * Note: This member has no impact if the action is interrupted (it
      * has only an effect if its last loop has really finished).
      *
-     * @type {boolean}
      * @default false
      */
     clampWhenFinished: boolean;
     /**
      * Enables smooth interpolation without separate clips for start, loop and end.
      *
-     * @type {boolean}
      * @default true
      */
     zeroSlopeAtStart: boolean;
     /**
      * Enables smooth interpolation without separate clips for start, loop and end.
      *
-     * @type {boolean}
      * @default true
      */
     zeroSlopeAtEnd: boolean;
@@ -170,7 +146,7 @@ export class AnimationAction {
      * @param {number} repetitions - The number of repetitions.
      * @return {AnimationAction} A reference to this animation action.
      */
-    setLoop(mode: (number | number | number), repetitions: number): AnimationAction;
+    setLoop(mode: AnimationActionLoopStyles, repetitions: number): AnimationAction;
     /**
      * Sets the effective weight of this action.
      *
@@ -301,10 +277,5 @@ export class AnimationAction {
      * @return {Object3D} The root object.
      */
     getRoot(): Object3D;
-    _update(time: any, deltaTime: any, timeDirection: any, accuIndex: any): void;
-    _updateWeight(time: any): number;
-    _updateTimeScale(time: any): number;
-    _updateTime(deltaTime: any): any;
-    _setEndings(atStart: any, atEnd: any, pingPong: any): void;
-    _scheduleFading(duration: any, weightNow: any, weightThen: any): this;
+    _scheduleFading(duration: number, weightNow: number, weightThen: number): this;
 }
diff --git a/jsdoc-testing/jsdoc/animation/AnimationClip.d.ts b/jsdoc-testing/jsdoc/animation/AnimationClip.d.ts
index 68b17acc..631782d2 100644
--- a/jsdoc-testing/jsdoc/animation/AnimationClip.d.ts
+++ b/jsdoc-testing/jsdoc/animation/AnimationClip.d.ts
@@ -1,3 +1,22 @@
+import { AnimationBlendMode } from "../constants.js";
+import { Object3D } from "../core/Object3D.js";
+import { Vector3 } from "../math/Vector3.js";
+import { Bone } from "../objects/Bone.js";
+import { KeyframeTrack, KeyframeTrackJSON } from './KeyframeTrack.js';
+
+export interface AnimationClipJSON {
+    name: string;
+    duration: number;
+    tracks: KeyframeTrackJSON[];
+    uuid: string;
+    blendMode: AnimationBlendMode;
+}
+
+export interface MorphTarget {
+    name: string;
+    vertices: Vector3[];
+}
+
 /**
  * A reusable set of keyframe tracks which represent an animation.
  */
@@ -9,7 +28,7 @@ export class AnimationClip {
      * @param {Object} json - The serialized animation clip.
      * @return {AnimationClip} The new animation clip.
      */
-    static parse(json: Object): AnimationClip;
+    static parse(json: AnimationClipJSON): AnimationClip;
     /**
      * Serializes the given animation clip into JSON.
      *
@@ -17,7 +36,7 @@ export class AnimationClip {
      * @param {AnimationClip} clip - The animation clip to serialize.
      * @return {Object} The JSON object.
      */
-    static toJSON(clip: AnimationClip): Object;
+    static toJSON(clip: AnimationClip): AnimationClipJSON;
     /**
      * Returns a new animation clip from the passed morph targets array of a
      * geometry, taking a name and the number of frames per second.
@@ -32,7 +51,7 @@ export class AnimationClip {
      * @param {boolean} noLoop - Whether the clip should be no loop or not.
      * @return {AnimationClip} The new animation clip.
      */
-    static CreateFromMorphTargetSequence(name: string, morphTargetSequence: Array<Object>, fps: number, noLoop: boolean): AnimationClip;
+    static CreateFromMorphTargetSequence(name: string, morphTargetSequence: Array<MorphTarget>, fps: number, noLoop: boolean): AnimationClip;
     /**
      * Searches for an animation clip by name, taking as its first parameter
      * either an array of clips, or a mesh or geometry that contains an
@@ -57,7 +76,7 @@ export class AnimationClip {
      * @param {boolean} noLoop - Whether the clip should be no loop or not.
      * @return {Array<AnimationClip>} An array of new animation clips.
      */
-    static CreateClipsFromMorphTargetSequences(morphTargets: Array<Object>, fps: number, noLoop: boolean): Array<AnimationClip>;
+    static CreateClipsFromMorphTargetSequences(morphTargets: Array<MorphTarget>, fps: number, noLoop: boolean): Array<AnimationClip>;
     /**
      * Parses the `animation.hierarchy` format and returns a new animation clip.
      *
@@ -67,7 +86,7 @@ export class AnimationClip {
      * @param {Array<Bones>} bones - An array of bones.
      * @return {?AnimationClip} The new animation clip.
      */
-    static parseAnimation(animation: Object, bones: Array<Bones>): AnimationClip | null;
+    static parseAnimation(animation: AnimationClipJSON, bones: Array<Bone>): AnimationClip | null;
     /**
      * Constructs a new animation clip.
      *
@@ -82,46 +101,33 @@ export class AnimationClip {
      * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode=NormalAnimationBlendMode] - Defines how the animation
      * is blended/combined when two or more animations are simultaneously played.
      */
-    constructor(name?: string, duration?: number, tracks?: Array<KeyframeTrack>, blendMode?: (number | AdditiveAnimationBlendMode));
+    constructor(name?: string, duration?: number, tracks?: Array<KeyframeTrack>, blendMode?: AnimationBlendMode);
     /**
      * The clip's name.
-     *
-     * @type {string}
      */
     name: string;
     /**
      *  An array of keyframe tracks.
-     *
-     * @type {Array<KeyframeTrack>}
      */
     tracks: Array<KeyframeTrack>;
     /**
      * The clip's duration in seconds.
-     *
-     * @type {number}
      */
     duration: number;
     /**
      * Defines how the animation is blended/combined when two or more animations
      * are simultaneously played.
-     *
-     * @type {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)}
      */
-    blendMode: (number | AdditiveAnimationBlendMode);
+    blendMode: AnimationBlendMode;
     /**
      * The UUID of the animation clip.
-     *
-     * @type {string}
-     * @readonly
      */
     readonly uuid: string;
     /**
      * An object that can be used to store custom data about the animation clip.
      * It should not hold references to functions as these will not be cloned.
-     *
-     * @type {Object}
      */
-    userData: Object;
+    userData: Record<string, unknown>;
     /**
      * Sets the duration of this clip to the duration of its longest keyframe track.
      *
@@ -153,12 +159,11 @@ export class AnimationClip {
      *
      * @return {AnimationClip} A clone of this instance.
      */
-    clone(): AnimationClip;
+    clone(): this;
     /**
      * Serializes this animation clip into JSON.
      *
      * @return {Object} The JSON object.
      */
-    toJSON(): Object;
+    toJSON(): AnimationClipJSON;
 }
-import { KeyframeTrack } from './KeyframeTrack.js';
diff --git a/jsdoc-testing/jsdoc/animation/AnimationMixer.d.ts b/jsdoc-testing/jsdoc/animation/AnimationMixer.d.ts
index ea941771..6dd20561 100644
--- a/jsdoc-testing/jsdoc/animation/AnimationMixer.d.ts
+++ b/jsdoc-testing/jsdoc/animation/AnimationMixer.d.ts
@@ -1,21 +1,30 @@
+import { EventDispatcher } from '../core/EventDispatcher.js';
+import { AnimationClip } from './AnimationClip.js';
+import { AnimationAction } from './AnimationAction.js';
+import { AnimationBlendMode } from "../constants.js";
+import { Object3D } from "../core/Object3D.js";
+import { AnimationObjectGroup } from "./AnimationObjectGroup.js";
+
+export interface AnimationMixerEventMap {
+    loop: { action: AnimationAction; loopDelta: number };
+    finished: { action: AnimationAction; direction: number };
+}
+
 /**
  * `AnimationMixer` is a player for animations on a particular object in
  * the scene. When multiple objects in the scene are animated independently,
  * one `AnimationMixer` may be used for each object.
  */
-export class AnimationMixer extends EventDispatcher {
+export class AnimationMixer extends EventDispatcher<AnimationMixerEventMap> {
     /**
      * Constructs a new animation mixer.
      *
      * @param {Object3D} root - The object whose animations shall be played by this mixer.
      */
-    constructor(root: Object3D);
-    _root: Object3D;
-    _accuIndex: number;
+    constructor(root: Object3D | AnimationObjectGroup);
     /**
      * The global mixer time (in seconds; starting with `0` on the mixer's creation).
      *
-     * @type {number}
      * @default 0
      */
     time: number;
@@ -26,48 +35,9 @@ export class AnimationMixer extends EventDispatcher {
      * possibility to pause/unpause all actions that are controlled by this
      * mixer.
      *
-     * @type {number}
      * @default 1
      */
     timeScale: number;
-    _bindAction(action: any, prototypeAction: any): void;
-    _activateAction(action: any): void;
-    _deactivateAction(action: any): void;
-    _initMemoryManager(): void;
-    _actions: any[] | undefined;
-    _nActiveActions: number | undefined;
-    _actionsByClip: {} | undefined;
-    _bindings: any[] | undefined;
-    _nActiveBindings: number | undefined;
-    _bindingsByRootAndName: {} | undefined;
-    _controlInterpolants: any[] | undefined;
-    _nActiveControlInterpolants: number | undefined;
-    stats: {
-        actions: {
-            readonly total: number;
-            readonly inUse: number | undefined;
-        };
-        bindings: {
-            readonly total: number;
-            readonly inUse: number | undefined;
-        };
-        controlInterpolants: {
-            readonly total: number;
-            readonly inUse: number | undefined;
-        };
-    } | undefined;
-    _isActiveAction(action: any): boolean;
-    _addInactiveAction(action: any, clipUuid: any, rootUuid: any): void;
-    _removeInactiveAction(action: any): void;
-    _removeInactiveBindingsForAction(action: any): void;
-    _lendAction(action: any): void;
-    _takeBackAction(action: any): void;
-    _addInactiveBinding(binding: any, rootUuid: any, trackName: any): void;
-    _removeInactiveBinding(binding: any): void;
-    _lendBinding(binding: any): void;
-    _takeBackBinding(binding: any): void;
-    _lendControlInterpolant(): any;
-    _takeBackControlInterpolant(interpolant: any): void;
     /**
      * Returns an instance of {@link AnimationAction} for the passed clip.
      *
@@ -80,7 +50,8 @@ export class AnimationMixer extends EventDispatcher {
      * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.
      * @return {?AnimationAction} The animation action.
      */
-    clipAction(clip: AnimationClip | string, optionalRoot?: Object3D, blendMode?: (number | AdditiveAnimationBlendMode)): AnimationAction | null;
+    clipAction(clip: AnimationClip, optionalRoot?: Object3D | AnimationObjectGroup, blendMode?: AnimationBlendMode): AnimationAction;
+    clipAction(clip: AnimationClip | string, optionalRoot?: Object3D | AnimationObjectGroup, blendMode?: AnimationBlendMode): AnimationAction | null;
     /**
      * Returns an existing animation action for the passed clip.
      *
@@ -88,7 +59,7 @@ export class AnimationMixer extends EventDispatcher {
      * @param {Object3D} [optionalRoot] - An alternative root object.
      * @return {?AnimationAction} The animation action. Returns `null` if no action was found.
      */
-    existingAction(clip: AnimationClip | string, optionalRoot?: Object3D): AnimationAction | null;
+    existingAction(clip: AnimationClip | string, optionalRoot?: Object3D | AnimationObjectGroup): AnimationAction | null;
     /**
      * Deactivates all previously scheduled actions on this mixer.
      *
@@ -120,7 +91,7 @@ export class AnimationMixer extends EventDispatcher {
      *
      * @return {Object3D} The mixer's root object.
      */
-    getRoot(): Object3D;
+    getRoot(): Object3D | AnimationObjectGroup;
     /**
      * Deallocates all memory resources for a clip. Before using this method make
      * sure to call {@link AnimationAction#stop} for all related actions.
@@ -136,7 +107,7 @@ export class AnimationMixer extends EventDispatcher {
      *
      * @param {Object3D} root - The root object to uncache.
      */
-    uncacheRoot(root: Object3D): void;
+    uncacheRoot(root: Object3D | AnimationObjectGroup): void;
     /**
      * Deallocates all memory resources for an action. The action is identified by the
      * given clip and an optional root object. Before using this method make
@@ -145,8 +116,5 @@ export class AnimationMixer extends EventDispatcher {
      * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.
      * @param {Object3D} [optionalRoot] - An alternative root object.
      */
-    uncacheAction(clip: AnimationClip | string, optionalRoot?: Object3D): void;
+    uncacheAction(clip: AnimationClip | string, optionalRoot?: Object3D | AnimationObjectGroup): void;
 }
-import { EventDispatcher } from '../core/EventDispatcher.js';
-import { AnimationClip } from './AnimationClip.js';
-import { AnimationAction } from './AnimationAction.js';
diff --git a/jsdoc-testing/jsdoc/animation/AnimationObjectGroup.d.ts b/jsdoc-testing/jsdoc/animation/AnimationObjectGroup.d.ts
index 040c4af5..21a787d5 100644
--- a/jsdoc-testing/jsdoc/animation/AnimationObjectGroup.d.ts
+++ b/jsdoc-testing/jsdoc/animation/AnimationObjectGroup.d.ts
@@ -1,3 +1,5 @@
+import { Object3D } from "../core/Object3D.js";
+
 /**
  * A group of objects that receives a shared animation state.
  *
@@ -28,32 +30,13 @@ export class AnimationObjectGroup {
     /**
      * This flag can be used for type testing.
      *
-     * @type {boolean}
-     * @readonly
      * @default true
      */
-    readonly isAnimationObjectGroup: boolean;
+    readonly isAnimationObjectGroup: true;
     /**
      * The UUID of the 3D object.
-     *
-     * @type {string}
-     * @readonly
      */
     readonly uuid: string;
-    _objects: any[];
-    nCachedObjects_: number;
-    _indicesByUUID: {};
-    _paths: any[];
-    _parsedPaths: any[];
-    _bindings: any[];
-    _bindingsIndicesByPath: {};
-    stats: {
-        objects: {
-            readonly total: number;
-            readonly inUse: number;
-        };
-        readonly bindingsPerObject: number;
-    };
     /**
      * Adds an arbitrary number of objects to this animation group.
      *
@@ -72,6 +55,4 @@ export class AnimationObjectGroup {
      * @param {...Object3D} arguments - The 3D objects to uncache.
      */
     uncache(...args: Object3D[]): void;
-    subscribe_(path: any, parsedPath: any): any;
-    unsubscribe_(path: any): void;
 }
diff --git a/jsdoc-testing/jsdoc/animation/AnimationUtils.d.ts b/jsdoc-testing/jsdoc/animation/AnimationUtils.d.ts
index b8f10dfd..dbec9086 100644
--- a/jsdoc-testing/jsdoc/animation/AnimationUtils.d.ts
+++ b/jsdoc-testing/jsdoc/animation/AnimationUtils.d.ts
@@ -1,3 +1,6 @@
+import { AnimationClip } from "./AnimationClip.js";
+import { TypedArray, TypedArrayConstructor} from '../core/BufferAttribute.js';
+
 /**
  * Converts an array to a specific type.
  *
@@ -5,14 +8,14 @@
  * @param {TypedArray.constructor} type - The constructor of a typed array that defines the new type.
  * @return {TypedArray} The converted array.
  */
-export function convertArray(array: TypedArray | any[], type: TypedArray.constructor): TypedArray;
+export function convertArray(array: TypedArray | number[], type: TypedArrayConstructor): TypedArray | number[];
 /**
  * Returns `true` if the given object is a typed array.
  *
  * @param {any} object - The object to check.
  * @return {boolean} Whether the given object is a typed array.
  */
-export function isTypedArray(object: any): boolean;
+export function isTypedArray(object: unknown): boolean;
 /**
  * Returns an array by which times and values can be sorted.
  *
@@ -73,7 +76,7 @@ export class AnimationUtils {
      * @param {TypedArray.constructor} type - The constructor of a type array.
      * @return {TypedArray} The converted array
      */
-    static convertArray(array: TypedArray | any[], type: TypedArray.constructor): TypedArray;
+    static convertArray(array: TypedArray | number[], type: TypedArrayConstructor): TypedArray | number[];
     /**
      * Returns `true` if the given object is a typed array.
      *
@@ -81,7 +84,7 @@ export class AnimationUtils {
      * @param {any} object - The object to check.
      * @return {boolean} Whether the given object is a typed array.
      */
-    static isTypedArray(object: any): boolean;
+    static isTypedArray(object: unknown): boolean;
     /**
      * Returns an array by which times and values can be sorted.
      *
diff --git a/jsdoc-testing/jsdoc/animation/KeyframeTrack.d.ts b/jsdoc-testing/jsdoc/animation/KeyframeTrack.d.ts
index bd807202..273f6ef5 100644
--- a/jsdoc-testing/jsdoc/animation/KeyframeTrack.d.ts
+++ b/jsdoc-testing/jsdoc/animation/KeyframeTrack.d.ts
@@ -1,3 +1,17 @@
+import { DiscreteInterpolant } from '../math/interpolants/DiscreteInterpolant.js';
+import { LinearInterpolant } from '../math/interpolants/LinearInterpolant.js';
+import { CubicInterpolant } from '../math/interpolants/CubicInterpolant.js';
+import { InterpolationModes } from "../constants.js";
+import { TypedArray, TypedArrayConstructor } from '../core/BufferAttribute.js';
+
+export interface KeyframeTrackJSON {
+    name: string;
+    times: number[];
+    values: number[];
+    interpolation?: InterpolationModes;
+    type: string;
+}
+
 /**
  * Represents s a timed sequence of keyframes, which are composed of lists of
  * times and related values, and which are used to animate a specific property
@@ -11,7 +25,7 @@ export class KeyframeTrack {
      * @param {KeyframeTrack} track - The keyframe track to serialize.
      * @return {Object} The serialized keyframe track as JSON.
      */
-    static toJSON(track: KeyframeTrack): Object;
+    static toJSON(track: KeyframeTrack): KeyframeTrackJSON;
     /**
      * Constructs a new keyframe track.
      *
@@ -20,25 +34,19 @@ export class KeyframeTrack {
      * @param {Array<number|string|boolean>} values - A list of keyframe values.
      * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
      */
-    constructor(name: string, times: Array<number>, values: Array<number | string | boolean>, interpolation?: (number | number | number));
+    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number | string | boolean>, interpolation?: InterpolationModes);
     /**
      * The track's name can refer to morph targets or bones or
      * possibly other values within an animated object. See {@link PropertyBinding#parseTrackName}
      * for the forms of strings that can be parsed for property binding.
-     *
-     * @type {string}
      */
     name: string;
     /**
      * The keyframe times.
-     *
-     * @type {Float32Array}
      */
     times: Float32Array;
     /**
      * The keyframe values.
-     *
-     * @type {Float32Array}
      */
     values: Float32Array;
     /**
@@ -71,14 +79,13 @@ export class KeyframeTrack {
      * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} interpolation - The interpolation type.
      * @return {KeyframeTrack} A reference to this keyframe track.
      */
-    setInterpolation(interpolation: (number | number | number)): KeyframeTrack;
-    createInterpolant: ((result?: TypedArray) => LinearInterpolant) | ((result?: TypedArray) => CubicInterpolant) | undefined;
+    setInterpolation(interpolation: InterpolationModes): KeyframeTrack;
     /**
      * Returns the current interpolation type.
      *
      * @return {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} The interpolation type.
      */
-    getInterpolation(): (number | number | number);
+    getInterpolation(): InterpolationModes;
     /**
      * Returns the value size.
      *
@@ -123,42 +130,35 @@ export class KeyframeTrack {
      *
      * @return {AnimationClip} A reference to this animation clip.
      */
-    optimize(): AnimationClip;
+    optimize(): this;
     /**
      * Returns a new keyframe track with copied values from this instance.
      *
      * @return {KeyframeTrack} A clone of this instance.
      */
-    clone(): KeyframeTrack;
+    clone(): this;
     /**
      * The value type name.
      *
-     * @type {String}
      * @default ''
      */
     ValueTypeName: string;
     /**
      * The time buffer type of this keyframe track.
      *
-     * @type {TypedArray|Array}
      * @default Float32Array.constructor
      */
-    TimeBufferType: TypedArray | any[];
+    TimeBufferType: TypedArrayConstructor | ArrayConstructor;
     /**
      * The value buffer type of this keyframe track.
      *
-     * @type {TypedArray|Array}
      * @default Float32Array.constructor
      */
-    ValueBufferType: TypedArray | any[];
+    ValueBufferType: TypedArrayConstructor | ArrayConstructor;
     /**
      * The default interpolation type of this keyframe track.
      *
-     * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}
      * @default InterpolateLinear
      */
-    DefaultInterpolation: (number | number | number);
+    DefaultInterpolation: InterpolationModes;
 }
-import { DiscreteInterpolant } from '../math/interpolants/DiscreteInterpolant.js';
-import { LinearInterpolant } from '../math/interpolants/LinearInterpolant.js';
-import { CubicInterpolant } from '../math/interpolants/CubicInterpolant.js';
diff --git a/jsdoc-testing/jsdoc/animation/PropertyBinding.d.ts b/jsdoc-testing/jsdoc/animation/PropertyBinding.d.ts
index af4e99d9..bb6c8ec8 100644
--- a/jsdoc-testing/jsdoc/animation/PropertyBinding.d.ts
+++ b/jsdoc-testing/jsdoc/animation/PropertyBinding.d.ts
@@ -1,3 +1,14 @@
+import { Object3D } from "../core/Object3D.js";
+import { Skeleton } from "../objects/Skeleton.js";
+
+export interface ParseTrackNameResults {
+    nodeName: string;
+    objectName: string;
+    objectIndex: string;
+    propertyName: string;
+    propertyIndex: string;
+}
+
 /**
  * This holds a reference to a real property in the scene graph; used internally.
  */
@@ -11,7 +22,7 @@ export class PropertyBinding {
      * @param {?Object} [parsedPath] - The parsed path.
      * @return {PropertyBinding|Composite} The created property binding or composite.
      */
-    static create(root: Object, path: string, parsedPath?: Object | null): PropertyBinding | Composite;
+    static create(root: object, path: string, parsedPath?: object | null): PropertyBinding | Composite;
     /**
      * Replaces spaces with underscores and removes unsupported characters from
      * node names, to ensure compatibility with parseTrackName().
@@ -38,7 +49,7 @@ export class PropertyBinding {
      * @param {string} trackName - The track name to parse.
      * @return {Object} The parsed track name as an object.
      */
-    static parseTrackName(trackName: string): Object;
+    static parseTrackName(trackName: string): ParseTrackNameResults;
     /**
      * Searches for a node in the hierarchy of the given root object by the given
      * node name.
@@ -48,7 +59,7 @@ export class PropertyBinding {
      * @param {string|number} nodeName - The name of the node.
      * @return {?Object} The found node. Returns `null` if no object was found.
      */
-    static findNode(root: Object, nodeName: string | number): Object | null;
+    static findNode(root: object, nodeName: string | number): object | null;
     /**
      * Constructs a new property binding.
      *
@@ -56,89 +67,35 @@ export class PropertyBinding {
      * @param {string} path - The path.
      * @param {?Object} [parsedPath] - The parsed path.
      */
-    constructor(rootNode: Object, path: string, parsedPath?: Object | null);
+    constructor(rootNode: Object3D | Skeleton, path: string, parsedPath?: object | null);
     /**
      * The object path to the animated property.
-     *
-     * @type {string}
      */
     path: string;
     /**
      * An object holding information about the path.
-     *
-     * @type {Object}
      */
-    parsedPath: Object;
+    parsedPath: object;
     /**
      * The object owns the animated property.
-     *
-     * @type {?Object}
      */
-    node: Object | null;
+    node: object | null;
     /**
      * The root node.
-     *
-     * @type {Object3D|Skeleton}
      */
     rootNode: Object3D | Skeleton;
-    getValue: (targetArray: any, offset: any) => void;
-    setValue: (sourceArray: any, offset: any) => void;
-    _getValue_unavailable(): void;
-    _setValue_unavailable(): void;
-    _getValue_direct(buffer: any, offset: any): void;
-    _getValue_array(buffer: any, offset: any): void;
-    _getValue_arrayElement(buffer: any, offset: any): void;
-    _getValue_toArray(buffer: any, offset: any): void;
-    _setValue_direct(buffer: any, offset: any): void;
-    _setValue_direct_setNeedsUpdate(buffer: any, offset: any): void;
-    _setValue_direct_setMatrixWorldNeedsUpdate(buffer: any, offset: any): void;
-    _setValue_array(buffer: any, offset: any): void;
-    _setValue_array_setNeedsUpdate(buffer: any, offset: any): void;
-    _setValue_array_setMatrixWorldNeedsUpdate(buffer: any, offset: any): void;
-    _setValue_arrayElement(buffer: any, offset: any): void;
-    _setValue_arrayElement_setNeedsUpdate(buffer: any, offset: any): void;
-    _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer: any, offset: any): void;
-    _setValue_fromArray(buffer: any, offset: any): void;
-    _setValue_fromArray_setNeedsUpdate(buffer: any, offset: any): void;
-    _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer: any, offset: any): void;
-    _getValue_unbound(targetArray: any, offset: any): void;
-    _setValue_unbound(sourceArray: any, offset: any): void;
     /**
      * Creates a getter / setter pair for the property tracked by this binding.
      */
     bind(): void;
-    targetObject: Object | null | undefined;
-    resolvedProperty: any;
-    propertyIndex: any;
-    propertyName: any;
     /**
      * Unbinds the property.
      */
     unbind(): void;
-    BindingType: {
-        Direct: number;
-        EntireArray: number;
-        ArrayElement: number;
-        HasFromToArray: number;
-    };
-    Versioning: {
-        None: number;
-        NeedsUpdate: number;
-        MatrixWorldNeedsUpdate: number;
-    };
-    GetterByBindingType: ((buffer: any, offset: any) => void)[];
-    SetterByBindingTypeAndVersioning: ((buffer: any, offset: any) => void)[][];
 }
 export namespace PropertyBinding {
     export { Composite };
 }
 declare class Composite {
-    constructor(targetGroup: any, path: any, optionalParsedPath: any);
-    _targetGroup: any;
-    _bindings: any;
-    getValue(array: any, offset: any): void;
-    setValue(array: any, offset: any): void;
-    bind(): void;
-    unbind(): void;
 }
 export {};
diff --git a/jsdoc-testing/jsdoc/animation/PropertyMixer.d.ts b/jsdoc-testing/jsdoc/animation/PropertyMixer.d.ts
index d73e7547..96537311 100644
--- a/jsdoc-testing/jsdoc/animation/PropertyMixer.d.ts
+++ b/jsdoc-testing/jsdoc/animation/PropertyMixer.d.ts
@@ -1,3 +1,5 @@
+import { PropertyBinding } from './PropertyBinding.js';
+
 /**
  * Buffered scene graph property that allows weighted accumulation; used internally.
  */
@@ -12,48 +14,33 @@ export class PropertyMixer {
     constructor(binding: PropertyBinding, typeName: string, valueSize: number);
     /**
      * The property binding.
-     *
-     * @type {PropertyBinding}
      */
     binding: PropertyBinding;
     /**
      * The keyframe track value size.
-     *
-     * @type {number}
      */
     valueSize: number;
-    buffer: any[] | Float64Array<ArrayBuffer>;
-    _workIndex: number | undefined;
-    _mixBufferRegion: (buffer: any, dstOffset: any, srcOffset: any, t: any, stride: any) => void;
-    _mixBufferRegionAdditive: (buffer: any, dstOffset: any, srcOffset: any, t: any, stride: any) => void;
-    _setIdentity: () => void;
-    _origIndex: number;
-    _addIndex: number;
     /**
      * TODO
      *
-     * @type {number}
      * @default 0
      */
     cumulativeWeight: number;
     /**
      * TODO
      *
-     * @type {number}
      * @default 0
      */
     cumulativeWeightAdditive: number;
     /**
      * TODO
      *
-     * @type {number}
      * @default 0
      */
     useCount: number;
     /**
      * TODO
      *
-     * @type {number}
      * @default 0
      */
     referenceCount: number;
@@ -84,12 +71,4 @@ export class PropertyMixer {
      * Applies the state previously taken via {@link PropertyMixer#saveOriginalState} to the binding.
      */
     restoreOriginalState(): void;
-    _setAdditiveIdentityNumeric(): void;
-    _setAdditiveIdentityQuaternion(): void;
-    _setAdditiveIdentityOther(): void;
-    _select(buffer: any, dstOffset: any, srcOffset: any, t: any, stride: any): void;
-    _slerp(buffer: any, dstOffset: any, srcOffset: any, t: any): void;
-    _slerpAdditive(buffer: any, dstOffset: any, srcOffset: any, t: any, stride: any): void;
-    _lerp(buffer: any, dstOffset: any, srcOffset: any, t: any, stride: any): void;
-    _lerpAdditive(buffer: any, dstOffset: any, srcOffset: any, t: any, stride: any): void;
 }
diff --git a/jsdoc-testing/jsdoc/animation/tracks/BooleanKeyframeTrack.d.ts b/jsdoc-testing/jsdoc/animation/tracks/BooleanKeyframeTrack.d.ts
index d8e3cfd7..3198fbf6 100644
--- a/jsdoc-testing/jsdoc/animation/tracks/BooleanKeyframeTrack.d.ts
+++ b/jsdoc-testing/jsdoc/animation/tracks/BooleanKeyframeTrack.d.ts
@@ -1,7 +1,7 @@
+import { KeyframeTrack } from '../KeyframeTrack.js';
+
 /**
  * A track for boolean keyframe values.
- *
- * @augments KeyframeTrack
  */
 export class BooleanKeyframeTrack extends KeyframeTrack {
     /**
@@ -14,15 +14,5 @@ export class BooleanKeyframeTrack extends KeyframeTrack {
      * @param {Array<number>} times - A list of keyframe times.
      * @param {Array<boolean>} values - A list of keyframe values.
      */
-    constructor(name: string, times: Array<number>, values: Array<boolean>);
-    /**
-     * The default interpolation type of this keyframe track.
-     *
-     * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}
-     * @default InterpolateDiscrete
-     */
-    DefaultInterpolation: (InterpolateLinear | number | InterpolateSmooth);
-    InterpolantFactoryMethodLinear: any;
-    InterpolantFactoryMethodSmooth: any;
+    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<boolean>);
 }
-import { KeyframeTrack } from '../KeyframeTrack.js';
diff --git a/jsdoc-testing/jsdoc/animation/tracks/ColorKeyframeTrack.d.ts b/jsdoc-testing/jsdoc/animation/tracks/ColorKeyframeTrack.d.ts
index aa0f64d7..a97bcb3a 100644
--- a/jsdoc-testing/jsdoc/animation/tracks/ColorKeyframeTrack.d.ts
+++ b/jsdoc-testing/jsdoc/animation/tracks/ColorKeyframeTrack.d.ts
@@ -1,7 +1,8 @@
+import { KeyframeTrack } from '../KeyframeTrack.js';
+import { InterpolationModes } from '../../constants.js';
+
 /**
  * A track for color keyframe values.
- *
- * @augments KeyframeTrack
  */
 export class ColorKeyframeTrack extends KeyframeTrack {
     /**
@@ -12,6 +13,5 @@ export class ColorKeyframeTrack extends KeyframeTrack {
      * @param {Array<number>} values - A list of keyframe values.
      * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
      */
-    constructor(name: string, times: Array<number>, values: Array<number>, interpolation?: (InterpolateLinear | InterpolateDiscrete | InterpolateSmooth));
+    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>, interpolation?: InterpolationModes);
 }
-import { KeyframeTrack } from '../KeyframeTrack.js';
diff --git a/jsdoc-testing/jsdoc/animation/tracks/NumberKeyframeTrack.d.ts b/jsdoc-testing/jsdoc/animation/tracks/NumberKeyframeTrack.d.ts
index f83c955c..e3a837b0 100644
--- a/jsdoc-testing/jsdoc/animation/tracks/NumberKeyframeTrack.d.ts
+++ b/jsdoc-testing/jsdoc/animation/tracks/NumberKeyframeTrack.d.ts
@@ -1,7 +1,8 @@
+import { KeyframeTrack } from '../KeyframeTrack.js';
+import { InterpolationModes } from '../../constants.js';
+
 /**
  * A track for numeric keyframe values.
- *
- * @augments KeyframeTrack
  */
 export class NumberKeyframeTrack extends KeyframeTrack {
     /**
@@ -12,6 +13,5 @@ export class NumberKeyframeTrack extends KeyframeTrack {
      * @param {Array<number>} values - A list of keyframe values.
      * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
      */
-    constructor(name: string, times: Array<number>, values: Array<number>, interpolation?: (InterpolateLinear | InterpolateDiscrete | InterpolateSmooth));
+    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>, interpolation?: InterpolationModes);
 }
-import { KeyframeTrack } from '../KeyframeTrack.js';
diff --git a/jsdoc-testing/jsdoc/animation/tracks/QuaternionKeyframeTrack.d.ts b/jsdoc-testing/jsdoc/animation/tracks/QuaternionKeyframeTrack.d.ts
index 98e4a75e..24a349a7 100644
--- a/jsdoc-testing/jsdoc/animation/tracks/QuaternionKeyframeTrack.d.ts
+++ b/jsdoc-testing/jsdoc/animation/tracks/QuaternionKeyframeTrack.d.ts
@@ -1,7 +1,8 @@
+import { KeyframeTrack } from '../KeyframeTrack.js';
+import { InterpolationModes } from '../../constants.js';
+
 /**
  * A track for Quaternion keyframe values.
- *
- * @augments KeyframeTrack
  */
 export class QuaternionKeyframeTrack extends KeyframeTrack {
     /**
@@ -12,7 +13,5 @@ export class QuaternionKeyframeTrack extends KeyframeTrack {
      * @param {Array<number>} values - A list of keyframe values.
      * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
      */
-    constructor(name: string, times: Array<number>, values: Array<number>, interpolation?: (InterpolateLinear | InterpolateDiscrete | InterpolateSmooth));
-    InterpolantFactoryMethodSmooth: any;
+    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>, interpolation?: InterpolationModes);
 }
-import { KeyframeTrack } from '../KeyframeTrack.js';
diff --git a/jsdoc-testing/jsdoc/animation/tracks/StringKeyframeTrack.d.ts b/jsdoc-testing/jsdoc/animation/tracks/StringKeyframeTrack.d.ts
index 95c5bd15..02e2f995 100644
--- a/jsdoc-testing/jsdoc/animation/tracks/StringKeyframeTrack.d.ts
+++ b/jsdoc-testing/jsdoc/animation/tracks/StringKeyframeTrack.d.ts
@@ -1,7 +1,7 @@
+import { KeyframeTrack } from '../KeyframeTrack.js';
+
 /**
  * A track for string keyframe values.
- *
- * @augments KeyframeTrack
  */
 export class StringKeyframeTrack extends KeyframeTrack {
     /**
@@ -14,15 +14,5 @@ export class StringKeyframeTrack extends KeyframeTrack {
      * @param {Array<number>} times - A list of keyframe times.
      * @param {Array<string>} values - A list of keyframe values.
      */
-    constructor(name: string, times: Array<number>, values: Array<string>);
-    /**
-     * The default interpolation type of this keyframe track.
-     *
-     * @type {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)}
-     * @default InterpolateDiscrete
-     */
-    DefaultInterpolation: (InterpolateLinear | number | InterpolateSmooth);
-    InterpolantFactoryMethodLinear: any;
-    InterpolantFactoryMethodSmooth: any;
+    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<string>);
 }
-import { KeyframeTrack } from '../KeyframeTrack.js';
diff --git a/jsdoc-testing/jsdoc/animation/tracks/VectorKeyframeTrack.d.ts b/jsdoc-testing/jsdoc/animation/tracks/VectorKeyframeTrack.d.ts
index 856db2d5..a7c734c2 100644
--- a/jsdoc-testing/jsdoc/animation/tracks/VectorKeyframeTrack.d.ts
+++ b/jsdoc-testing/jsdoc/animation/tracks/VectorKeyframeTrack.d.ts
@@ -1,7 +1,8 @@
+import { KeyframeTrack } from '../KeyframeTrack.js';
+import { InterpolationModes } from '../../constants.js';
+
 /**
  * A track for vector keyframe values.
- *
- * @augments KeyframeTrack
  */
 export class VectorKeyframeTrack extends KeyframeTrack {
     /**
@@ -12,6 +13,5 @@ export class VectorKeyframeTrack extends KeyframeTrack {
      * @param {Array<number>} values - A list of keyframe values.
      * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
      */
-    constructor(name: string, times: Array<number>, values: Array<number>, interpolation?: (InterpolateLinear | InterpolateDiscrete | InterpolateSmooth));
+    constructor(name: string, times: ArrayLike<number>, values: ArrayLike<number>, interpolation?: InterpolationModes);
 }
-import { KeyframeTrack } from '../KeyframeTrack.js';
diff --git a/jsdoc-testing/jsdoc/materials/LineBasicMaterial.d.ts b/jsdoc-testing/jsdoc/materials/LineBasicMaterial.d.ts
index 64e5c702..699b4951 100644
--- a/jsdoc-testing/jsdoc/materials/LineBasicMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/LineBasicMaterial.d.ts
@@ -1,38 +1,11 @@
-/**
- * A material for rendering line primitives.
- *
- * Materials define the appearance of renderable 3D objects.
- *
- * ```js
- * const material = new THREE.LineBasicMaterial( { color: 0xffffff } );
- * ```
- *
- * @augments Material
- */
-export class LineBasicMaterial extends Material {
-    /**
-     * Constructs a new line basic material.
-     *
-     * @param {Object} [parameters] - An object with one or more properties
-     * defining the material's appearance. Any property of the material
-     * (including any property from inherited materials) can be passed
-     * in here. Color values can be passed any type of value accepted
-     * by {@link Color#set}.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isLineBasicMaterial: boolean;
-    type: string;
+import { MapColorPropertiesToColorRepresentations, Material, MaterialProperties } from './Material.js';
+import { Color } from '../math/Color.js';
+import { Texture } from '../textures/Texture.js';
+
+export interface LineBasicMaterialProperties extends MaterialProperties {
     /**
      * Color of the material.
      *
-     * @type {Color}
      * @default (1,1,1)
      */
     color: Color;
@@ -40,7 +13,6 @@ export class LineBasicMaterial extends Material {
      * Sets the color of the lines using data from a texture. The texture map
      * color is modulated by the diffuse `color`.
      *
-     * @type {?Texture}
      * @default null
      */
     map: Texture | null;
@@ -51,7 +23,6 @@ export class LineBasicMaterial extends Material {
      * ignore this setting and always render line primitives with a
      * width of one pixel.
      *
-     * @type {number}
      * @default 1
      */
     linewidth: number;
@@ -60,7 +31,6 @@ export class LineBasicMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {('butt'|'round'|'square')}
      * @default 'round'
      */
     linecap: ("butt" | "round" | "square");
@@ -69,18 +39,48 @@ export class LineBasicMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {('round'|'bevel'|'miter')}
      * @default 'round'
      */
     linejoin: ("round" | "bevel" | "miter");
     /**
      * Whether the material is affected by fog or not.
      *
-     * @type {boolean}
      * @default true
      */
     fog: boolean;
-    copy(source: any): this;
 }
-import { Material } from './Material.js';
-import { Color } from '../math/Color.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface LineBasicMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<LineBasicMaterialProperties>> {}
+
+/**
+ * A material for rendering line primitives.
+ *
+ * Materials define the appearance of renderable 3D objects.
+ *
+ * ```js
+ * const material = new THREE.LineBasicMaterial( { color: 0xffffff } );
+ * ```
+ */
+export class LineBasicMaterial extends Material {
+    /**
+     * Constructs a new line basic material.
+     *
+     * @param {Object} [parameters] - An object with one or more properties
+     * defining the material's appearance. Any property of the material
+     * (including any property from inherited materials) can be passed
+     * in here. Color values can be passed any type of value accepted
+     * by {@link Color#set}.
+     */
+    constructor(parameters?: LineBasicMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isLineBasicMaterial: boolean;
+    setValues(values?: LineBasicMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface LineBasicMaterial extends LineBasicMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/LineDashedMaterial.d.ts b/jsdoc-testing/jsdoc/materials/LineDashedMaterial.d.ts
index 3cb1a34d..63489ffa 100644
--- a/jsdoc-testing/jsdoc/materials/LineDashedMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/LineDashedMaterial.d.ts
@@ -1,3 +1,30 @@
+import { LineBasicMaterial, LineBasicMaterialProperties } from './LineBasicMaterial.js';
+import { MapColorPropertiesToColorRepresentations } from './Material.js';
+
+export interface LineDashedMaterialProperties extends LineBasicMaterialProperties {
+    /**
+     * The scale of the dashed part of a line.
+     *
+     * @default 1
+     */
+    scale: number;
+    /**
+     * The size of the dash. This is both the gap with the stroke.
+     *
+     * @default 3
+     */
+    dashSize: number;
+    /**
+     * The size of the gap.
+     *
+     * @default 1
+     */
+    gapSize: number;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface LineDashedMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<LineDashedMaterialProperties>> {}
+
 /**
  * A material for rendering line primitives.
  *
@@ -11,39 +38,17 @@
  * 	gapSize: 1,
  * } );
  * ```
- *
- * @augments LineBasicMaterial
  */
 export class LineDashedMaterial extends LineBasicMaterial {
+    constructor(parameters?: LineDashedMaterialParameters);
     /**
      * This flag can be used for type testing.
      *
-     * @type {boolean}
-     * @readonly
      * @default true
      */
     readonly isLineDashedMaterial: boolean;
-    /**
-     * The scale of the dashed part of a line.
-     *
-     * @type {number}
-     * @default 1
-     */
-    scale: number;
-    /**
-     * The size of the dash. This is both the gap with the stroke.
-     *
-     * @type {number}
-     * @default 3
-     */
-    dashSize: number;
-    /**
-     * The size of the gap.
-     *
-     * @type {number}
-     * @default 1
-     */
-    gapSize: number;
-    copy(source: any): this;
+    setValues(values?: LineDashedMaterialParameters): void;
 }
-import { LineBasicMaterial } from './LineBasicMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface LineDashedMaterial extends LineDashedMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/Material.d.ts b/jsdoc-testing/jsdoc/materials/Material.d.ts
index 5c608790..04bb3409 100644
--- a/jsdoc-testing/jsdoc/materials/Material.d.ts
+++ b/jsdoc-testing/jsdoc/materials/Material.d.ts
@@ -1,41 +1,35 @@
-/**
- * Abstract base class for materials.
- *
- * Materials define the appearance of renderable 3D objects.
- *
- * @abstract
- * @augments EventDispatcher
- */
-export class Material extends EventDispatcher {
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isMaterial: boolean;
-    /**
-     * The UUID of the material.
-     *
-     * @type {string}
-     * @readonly
-     */
-    readonly uuid: string;
+import { EventDispatcher } from '../core/EventDispatcher.js';
+import { Color, ColorRepresentation } from '../math/Color.js';
+import { EulerTuple } from '../math/Euler.js';
+import { Vector2Tuple } from '../math/Vector2.js';
+import {
+    Blending,
+    BlendingDstFactor,
+    BlendingEquation,
+    BlendingSrcFactor,
+    Combine,
+    DepthModes,
+    NormalMapTypes,
+    Side,
+    StencilFunc,
+    StencilOp,
+} from "../constants.js";
+import { JSONMeta, Object3D } from "../core/Object3D.js";
+import { Plane } from "../math/Plane.js";
+import { SourceJSON } from "../textures/Source.js";
+import { TextureJSON } from "../textures/Texture.js";
+import { Group } from "../objects/Group.js";
+import { WebGLProgramParametersWithUniforms } from "../renderers/webgl/WebGLPrograms.js";
+import { WebGLRenderer } from "../renderers/WebGLRenderer.js";
+import { Scene } from "../scenes/Scene.js";
+import { Camera } from "../cameras/Camera.js";
+import { BufferGeometry } from "../core/BufferGeometry.js";
+
+export interface MaterialProperties {
     /**
      * The name of the material.
-     *
-     * @type {string}
      */
     name: string;
-    /**
-     * The type property is used for detecting the object type
-     * in context of serialization/deserialization.
-     *
-     * @type {string}
-     * @readonly
-     */
-    readonly type: string;
     /**
      * Defines the blending type of the material.
      *
@@ -43,24 +37,21 @@ export class Material extends EventDispatcher {
      * {@link Material#blendSrc}, {@link Material#blendDst} or {@link Material#blendEquation}
      * should have any effect.
      *
-     * @type {(NoBlending|NormalBlending|AdditiveBlending|SubtractiveBlending|MultiplyBlending|CustomBlending)}
      * @default NormalBlending
      */
-    blending: (NoBlending | number | AdditiveBlending | SubtractiveBlending | MultiplyBlending | CustomBlending);
+    blending: Blending;
     /**
      * Defines which side of faces will be rendered - front, back or both.
      *
-     * @type {(FrontSide|BackSide|DoubleSide)}
      * @default FrontSide
      */
-    side: (number | BackSide | DoubleSide);
+    side: Side;
     /**
      * If set to `true`, vertex colors should be used.
      *
      * The engine supports RGB and RGBA vertex colors depending on whether a three (RGB) or
      * four (RGBA) component color buffer attribute is used.
      *
-     * @type {boolean}
      * @default false
      */
     vertexColors: boolean;
@@ -71,7 +62,6 @@ export class Material extends EventDispatcher {
      * If the {@link Material#transparent} is not set to `true`,
      * the material will remain fully opaque and this value will only affect its color.
      *
-     * @type {number}
      * @default 1
      */
     opacity: number;
@@ -83,7 +73,6 @@ export class Material extends EventDispatcher {
      * When set to true, the extent to which the material is transparent is
      * controlled by {@link Material#opacity}.
      *
-     * @type {boolean}
      * @default false
      */
     transparent: boolean;
@@ -93,58 +82,50 @@ export class Material extends EventDispatcher {
      * a random threshold. Randomization introduces some grain or noise, but approximates alpha
      * blending without the associated problems of sorting. Using TAA can reduce the resulting noise.
      *
-     * @type {boolean}
      * @default false
      */
     alphaHash: boolean;
     /**
      * Defines the blending source factor.
      *
-     * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}
      * @default SrcAlphaFactor
      */
-    blendSrc: (ZeroFactor | OneFactor | SrcColorFactor | OneMinusSrcColorFactor | number | number | DstAlphaFactor | OneMinusDstAlphaFactor | DstColorFactor | OneMinusDstColorFactor | SrcAlphaSaturateFactor | ConstantColorFactor | OneMinusConstantColorFactor | ConstantAlphaFactor | OneMinusConstantAlphaFactor);
+    blendSrc: BlendingSrcFactor;
     /**
      * Defines the blending destination factor.
      *
-     * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}
      * @default OneMinusSrcAlphaFactor
      */
-    blendDst: (ZeroFactor | OneFactor | SrcColorFactor | OneMinusSrcColorFactor | number | number | DstAlphaFactor | OneMinusDstAlphaFactor | DstColorFactor | OneMinusDstColorFactor | SrcAlphaSaturateFactor | ConstantColorFactor | OneMinusConstantColorFactor | ConstantAlphaFactor | OneMinusConstantAlphaFactor);
+    blendDst: BlendingDstFactor;
     /**
      * Defines the blending equation.
      *
-     * @type {(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}
      * @default AddEquation
      */
-    blendEquation: (number | SubtractEquation | ReverseSubtractEquation | MinEquation | MaxEquation);
+    blendEquation: BlendingEquation;
     /**
      * Defines the blending source alpha factor.
      *
-     * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}
      * @default null
      */
-    blendSrcAlpha: (ZeroFactor | OneFactor | SrcColorFactor | OneMinusSrcColorFactor | number | number | DstAlphaFactor | OneMinusDstAlphaFactor | DstColorFactor | OneMinusDstColorFactor | SrcAlphaSaturateFactor | ConstantColorFactor | OneMinusConstantColorFactor | ConstantAlphaFactor | OneMinusConstantAlphaFactor) | null;
+    blendSrcAlpha: BlendingSrcFactor | null;
     /**
      * Defines the blending destination alpha factor.
      *
-     * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}
      * @default null
      */
-    blendDstAlpha: (ZeroFactor | OneFactor | SrcColorFactor | OneMinusSrcColorFactor | number | number | DstAlphaFactor | OneMinusDstAlphaFactor | DstColorFactor | OneMinusDstColorFactor | SrcAlphaSaturateFactor | ConstantColorFactor | OneMinusConstantColorFactor | ConstantAlphaFactor | OneMinusConstantAlphaFactor) | null;
+    blendDstAlpha: BlendingDstFactor | null;
     /**
      * Defines the blending equation of the alpha channel.
      *
-     * @type {?(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}
      * @default null
      */
-    blendEquationAlpha: (number | SubtractEquation | ReverseSubtractEquation | MinEquation | MaxEquation) | null;
+    blendEquationAlpha: BlendingEquation | null;
     /**
      * Represents the RGB values of the constant blend color.
      *
      * This property has only an effect when using custom blending with `ConstantColor` or `OneMinusConstantColor`.
      *
-     * @type {Color}
      * @default (0,0,0)
      */
     blendColor: Color;
@@ -153,22 +134,19 @@ export class Material extends EventDispatcher {
      *
      * This property has only an effect when using custom blending with `ConstantAlpha` or `OneMinusConstantAlpha`.
      *
-     * @type {number}
      * @default 0
      */
     blendAlpha: number;
     /**
      * Defines the depth function.
      *
-     * @type {(NeverDepth|AlwaysDepth|LessDepth|LessEqualDepth|EqualDepth|GreaterEqualDepth|GreaterDepth|NotEqualDepth)}
      * @default LessEqualDepth
      */
-    depthFunc: (NeverDepth | AlwaysDepth | LessDepth | number | EqualDepth | GreaterEqualDepth | GreaterDepth | NotEqualDepth);
+    depthFunc: DepthModes;
     /**
      * Whether to have depth test enabled when rendering this material.
      * When the depth test is disabled, the depth write will also be implicitly disabled.
      *
-     * @type {boolean}
      * @default true
      */
     depthTest: boolean;
@@ -178,67 +156,58 @@ export class Material extends EventDispatcher {
      * When drawing 2D overlays it can be useful to disable the depth writing in
      * order to layer several things together without creating z-index artifacts.
      *
-     * @type {boolean}
      * @default true
      */
     depthWrite: boolean;
     /**
      * The bit mask to use when writing to the stencil buffer.
      *
-     * @type {number}
      * @default 0xff
      */
     stencilWriteMask: number;
     /**
      * The stencil comparison function to use.
      *
-     * @type {NeverStencilFunc|LessStencilFunc|EqualStencilFunc|LessEqualStencilFunc|GreaterStencilFunc|NotEqualStencilFunc|GreaterEqualStencilFunc|AlwaysStencilFunc}
      * @default AlwaysStencilFunc
      */
-    stencilFunc: NeverStencilFunc | LessStencilFunc | EqualStencilFunc | LessEqualStencilFunc | GreaterStencilFunc | NotEqualStencilFunc | GreaterEqualStencilFunc | number;
+    stencilFunc: StencilFunc;
     /**
      * The value to use when performing stencil comparisons or stencil operations.
      *
-     * @type {number}
      * @default 0
      */
     stencilRef: number;
     /**
      * The bit mask to use when comparing against the stencil buffer.
      *
-     * @type {number}
      * @default 0xff
      */
     stencilFuncMask: number;
     /**
      * Which stencil operation to perform when the comparison function returns `false`.
      *
-     * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}
      * @default KeepStencilOp
      */
-    stencilFail: ZeroStencilOp | number | ReplaceStencilOp | IncrementStencilOp | DecrementStencilOp | IncrementWrapStencilOp | DecrementWrapStencilOp | InvertStencilOp;
+    stencilFail: StencilOp;
     /**
      * Which stencil operation to perform when the comparison function returns
      * `true` but the depth test fails.
      *
-     * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}
      * @default KeepStencilOp
      */
-    stencilZFail: ZeroStencilOp | number | ReplaceStencilOp | IncrementStencilOp | DecrementStencilOp | IncrementWrapStencilOp | DecrementWrapStencilOp | InvertStencilOp;
+    stencilZFail: StencilOp;
     /**
      * Which stencil operation to perform when the comparison function returns
      * `true` and the depth test passes.
      *
-     * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}
      * @default KeepStencilOp
      */
-    stencilZPass: ZeroStencilOp | number | ReplaceStencilOp | IncrementStencilOp | DecrementStencilOp | IncrementWrapStencilOp | DecrementWrapStencilOp | InvertStencilOp;
+    stencilZPass: StencilOp;
     /**
      * Whether stencil operations are performed against the stencil buffer. In
      * order to perform writes or comparisons against the stencil buffer this
      * value must be `true`.
      *
-     * @type {boolean}
      * @default false
      */
     stencilWrite: boolean;
@@ -249,7 +218,6 @@ export class Material extends EventDispatcher {
      * (not rendered). This requires {@link WebGLRenderer#localClippingEnabled} to
      * be `true`.
      *
-     * @type {?Array<Plane>}
      * @default null
      */
     clippingPlanes: Array<Plane> | null;
@@ -257,7 +225,6 @@ export class Material extends EventDispatcher {
      * Changes the behavior of clipping planes so that only their intersection is
      * clipped, rather than their union.
      *
-     * @type {boolean}
      * @default false
      */
     clipIntersection: boolean;
@@ -265,7 +232,6 @@ export class Material extends EventDispatcher {
      * Defines whether to clip shadows according to the clipping planes specified
      * on this material.
      *
-     * @type {boolean}
      * @default false
      */
     clipShadows: boolean;
@@ -277,24 +243,21 @@ export class Material extends EventDispatcher {
      * - When {@link Material#side} is set to `BackSide`, the front side cast shadows.
      * - When {@link Material#side} is set to `DoubleSide`, both sides cast shadows.
      *
-     * @type {?(FrontSide|BackSide|DoubleSide)}
      * @default null
      */
-    shadowSide: (number | BackSide | DoubleSide) | null;
+    shadowSide: Side | null;
     /**
      * Whether to render the material's color.
      *
      * This can be used in conjunction with {@link Object3D#renderOder} to create invisible
      * objects that occlude other objects.
      *
-     * @type {boolean}
      * @default true
      */
     colorWrite: boolean;
     /**
      * Override the renderer's default precision for this material.
      *
-     * @type {?('highp'|'mediump'|'lowp')}
      * @default null
      */
     precision: ("highp" | "mediump" | "lowp") | null;
@@ -307,28 +270,24 @@ export class Material extends EventDispatcher {
      * Can be useful for rendering hidden-line images, for applying decals to surfaces, and for
      * rendering solids with highlighted edges.
      *
-     * @type {boolean}
      * @default false
      */
     polygonOffset: boolean;
     /**
      * Specifies a scale factor that is used to create a variable depth offset for each polygon.
      *
-     * @type {number}
      * @default 0
      */
     polygonOffsetFactor: number;
     /**
      * Is multiplied by an implementation-specific value to create a constant depth offset.
      *
-     * @type {number}
      * @default 0
      */
     polygonOffsetUnits: number;
     /**
      * Whether to apply dithering to the color to remove the appearance of banding.
      *
-     * @type {boolean}
      * @default false
      */
     dithering: boolean;
@@ -337,14 +296,12 @@ export class Material extends EventDispatcher {
      * (meaning when the renderer was created with *antialias* parameter set to `true`). Enabling this
      * will smooth aliasing on clip plane edges and alphaTest-clipped edges.
      *
-     * @type {boolean}
      * @default false
      */
     alphaToCoverage: boolean;
     /**
      * Whether to premultiply the alpha (transparency) value.
      *
-     * @type {boolean}
      * @default false
      */
     premultipliedAlpha: boolean;
@@ -357,21 +314,18 @@ export class Material extends EventDispatcher {
      * vegetation like grass sprites. In these cases, set the `forceSinglePass` flag to `true` to
      * disable the two pass rendering to avoid performance issues.
      *
-     * @type {boolean}
      * @default false
      */
     forceSinglePass: boolean;
     /**
      * Whether it's possible to override the material with {@link Scene#overrideMaterial} or not.
      *
-     * @type {boolean}
      * @default true
      */
     allowOverride: boolean;
     /**
      * Defines whether 3D objects using this material are visible.
      *
-     * @type {boolean}
      * @default true
      */
     visible: boolean;
@@ -381,36 +335,217 @@ export class Material extends EventDispatcher {
      * It is ignored when rendering to a render target or using post processing or when using
      * `WebGPURenderer`. In all these cases, all materials are honored by tone mapping.
      *
-     * @type {boolean}
      * @default true
      */
     toneMapped: boolean;
     /**
      * An object that can be used to store custom data about the Material. It
      * should not hold references to functions as these will not be cloned.
-     *
-     * @type {Object}
      */
-    userData: Object;
+    userData: Record<string, any>;
+    set alphaTest(value: number);
     /**
-     * This starts at `0` and counts how many times {@link Material#needsUpdate} is set to `true`.
+     * Sets the alpha value to be used when running an alpha test. The material
+     * will not be rendered if the opacity is lower than this value.
      *
-     * @type {number}
-     * @readonly
      * @default 0
      */
-    readonly version: number;
-    _alphaTest: number;
-    readonly set alphaTest(value: number);
+    get alphaTest(): number;
+}
+
+export type MapColorPropertiesToColorRepresentations<T> = { [P in keyof T]: T[P] extends Color ? ColorRepresentation : T[P] };
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MaterialProperties>> {}
+
+export interface MaterialJSON {
+    metadata: { version: number; type: string; generator: string };
+
+    uuid: string;
+    type: string;
+
+    name?: string;
+
+    color?: number;
+    roughness?: number;
+    metalness?: number;
+
+    sheen?: number;
+    sheenColor?: number;
+    sheenRoughness?: number;
+    emissive?: number;
+    emissiveIntensity?: number;
+
+    specular?: number;
+    specularIntensity?: number;
+    specularColor?: number;
+    shininess?: number;
+    clearcoat?: number;
+    clearcoatRoughness?: number;
+    clearcoatMap?: string;
+    clearcoatRoughnessMap?: string;
+    clearcoatNormalMap?: string;
+    clearcoatNormalScale?: Vector2Tuple;
+
+    dispersion?: number;
+
+    iridescence?: number;
+    iridescenceIOR?: number;
+    iridescenceThicknessRange?: number;
+    iridescenceMap?: string;
+    iridescenceThicknessMap?: string;
+
+    anisotropy?: number;
+    anisotropyRotation?: number;
+    anisotropyMap?: string;
+
+    map?: string;
+    matcap?: string;
+    alphaMap?: string;
+
+    lightMap?: string;
+    lightMapIntensity?: number;
+
+    aoMap?: string;
+    aoMapIntensity?: number;
+
+    bumpMap?: string;
+    bumpScale?: number;
+
+    normalMap?: string;
+    normalMapType?: NormalMapTypes;
+    normalScale?: Vector2Tuple;
+
+    displacementMap?: string;
+    displacementScale?: number;
+    displacementBias?: number;
+
+    roughnessMap?: string;
+    metalnessMap?: string;
+
+    emissiveMap?: string;
+    specularMap?: string;
+    specularIntensityMap?: string;
+    specularColorMap?: string;
+
+    envMap?: string;
+    combine?: Combine;
+
+    envMapRotation?: EulerTuple;
+    envMapIntensity?: number;
+    reflectivity?: number;
+    refractionRatio?: number;
+
+    gradientMap?: string;
+
+    transmission?: number;
+    transmissionMap?: string;
+    thickness?: number;
+    thicknessMap?: string;
+    attenuationDistance?: number;
+    attenuationColor?: number;
+
+    size?: number;
+    shadowSide?: number;
+    sizeAttenuation?: boolean;
+
+    blending?: Blending;
+    side?: Side;
+    vertexColors?: boolean;
+
+    opacity?: number;
+    transparent?: boolean;
+
+    blendSrc?: BlendingSrcFactor;
+    blendDst?: BlendingDstFactor;
+    blendEquation?: BlendingEquation;
+    blendSrcAlpha?: number | null;
+    blendDstAlpha?: number | null;
+    blendEquationAlpha?: number | null;
+    blendColor?: number;
+    blendAlpha?: number;
+
+    depthFunc?: DepthModes;
+    depthTest?: boolean;
+    depthWrite?: boolean;
+    colorWrite?: boolean;
+
+    stencilWriteMask?: number;
+    stencilFunc?: StencilFunc;
+    stencilRef?: number;
+    stencilFuncMask?: number;
+    stencilFail?: StencilOp;
+    stencilZFail?: StencilOp;
+    stencilZPass?: StencilOp;
+    stencilWrite?: boolean;
+
+    rotation?: number;
+
+    polygonOffset?: boolean;
+    polygonOffsetFactor?: number;
+    polygonOffsetUnits?: number;
+
+    linewidth?: number;
+    dashSize?: number;
+    gapSize?: number;
+    scale?: number;
+
+    dithering?: boolean;
+
+    alphaTest?: number;
+    alphaHash?: boolean;
+    alphaToCoverage?: boolean;
+    premultipliedAlpha?: boolean;
+    forceSinglePass?: boolean;
+
+    wireframe?: boolean;
+    wireframeLinewidth?: number;
+    wireframeLinecap?: string;
+    wireframeLinejoin?: string;
+
+    flatShading?: boolean;
+
+    visible?: boolean;
+
+    toneMapped?: boolean;
+
+    fog?: boolean;
+
+    userData?: Record<string, unknown>;
+
+    textures?: Array<Omit<TextureJSON, "metadata">>;
+    images?: SourceJSON[];
+}
+
+/**
+ * Abstract base class for materials.
+ *
+ * Materials define the appearance of renderable 3D objects.
+ *
+ * @abstract
+ */
+export class Material extends EventDispatcher<{ dispose: {} }> {
     /**
-     * Sets the alpha value to be used when running an alpha test. The material
-     * will not be rendered if the opacity is lower than this value.
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isMaterial: boolean;
+    /**
+     * The UUID of the material.
+     */
+    readonly uuid: string;
+    /**
+     * The type property is used for detecting the object type
+     * in context of serialization/deserialization.
+     */
+    readonly type: string;
+    /**
+     * This starts at `0` and counts how many times {@link Material#needsUpdate} is set to `true`.
      *
-     * @type {number}
-     * @readonly
      * @default 0
      */
-    readonly get alphaTest(): number;
+    readonly version: number;
     /**
      * An optional callback that is executed immediately before the material is used to render a 3D object.
      *
@@ -423,7 +558,14 @@ export class Material extends EventDispatcher {
      * @param {Object3D} object - The 3D object.
      * @param {Object} group - The geometry group data.
      */
-    onBeforeRender(): void;
+    onBeforeRender(
+        renderer: WebGLRenderer,
+        scene: Scene,
+        camera: Camera,
+        geometry: BufferGeometry,
+        object: Object3D,
+        group: Group
+    ): void;
     /**
      * An optional callback that is executed immediately before the shader
      * program is compiled. This function is called with the shader source code
@@ -436,7 +578,7 @@ export class Material extends EventDispatcher {
      * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.
      * @param {WebGLRenderer} renderer - A reference to the renderer.
      */
-    onBeforeCompile(): void;
+    onBeforeCompile(parameters: WebGLProgramParametersWithUniforms, renderer: WebGLRenderer): void;
     /**
      * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify
      * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached
@@ -454,7 +596,7 @@ export class Material extends EventDispatcher {
      *
      * @param {Object} [values] - The material values to set.
      */
-    setValues(values?: Object): void;
+    setValues(values?: MaterialParameters): void;
     /**
      * Serializes the material into JSON.
      *
@@ -462,20 +604,20 @@ export class Material extends EventDispatcher {
      * @return {Object} A JSON object representing the serialized material.
      * @see {@link ObjectLoader#parse}
      */
-    toJSON(meta: (Object | string) | null): Object;
+    toJSON(meta?: JSONMeta): MaterialJSON;
     /**
      * Returns a new material with copied values from this instance.
      *
      * @return {Material} A clone of this instance.
      */
-    clone(): Material;
+    clone(): this;
     /**
      * Copies the values of the given material to this instance.
      *
      * @param {Material} source - The material to copy.
      * @return {Material} A reference to this instance.
      */
-    copy(source: Material): Material;
+    copy(source: Material): this;
     /**
      * Frees the GPU-related resources allocated by this instance. Call this
      * method whenever this instance is no longer used in your app.
@@ -487,11 +629,11 @@ export class Material extends EventDispatcher {
      * Setting this property to `true` indicates the engine the material
      * needs to be recompiled.
      *
-     * @type {boolean}
      * @default false
      * @param {boolean} value
      */
     set needsUpdate(value: boolean);
 }
-import { EventDispatcher } from '../core/EventDispatcher.js';
-import { Color } from '../math/Color.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface Material extends MaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/Materials.d.ts b/jsdoc-testing/jsdoc/materials/Materials.d.ts
index 3f555b85..9e8afdfb 100644
--- a/jsdoc-testing/jsdoc/materials/Materials.d.ts
+++ b/jsdoc-testing/jsdoc/materials/Materials.d.ts
@@ -1,19 +1,18 @@
-import { ShadowMaterial } from './ShadowMaterial.js';
-import { SpriteMaterial } from './SpriteMaterial.js';
-import { RawShaderMaterial } from './RawShaderMaterial.js';
-import { ShaderMaterial } from './ShaderMaterial.js';
-import { PointsMaterial } from './PointsMaterial.js';
-import { MeshPhysicalMaterial } from './MeshPhysicalMaterial.js';
-import { MeshStandardMaterial } from './MeshStandardMaterial.js';
-import { MeshPhongMaterial } from './MeshPhongMaterial.js';
-import { MeshToonMaterial } from './MeshToonMaterial.js';
-import { MeshNormalMaterial } from './MeshNormalMaterial.js';
-import { MeshLambertMaterial } from './MeshLambertMaterial.js';
-import { MeshDepthMaterial } from './MeshDepthMaterial.js';
-import { MeshDistanceMaterial } from './MeshDistanceMaterial.js';
-import { MeshBasicMaterial } from './MeshBasicMaterial.js';
-import { MeshMatcapMaterial } from './MeshMatcapMaterial.js';
-import { LineDashedMaterial } from './LineDashedMaterial.js';
-import { LineBasicMaterial } from './LineBasicMaterial.js';
-import { Material } from './Material.js';
-export { ShadowMaterial, SpriteMaterial, RawShaderMaterial, ShaderMaterial, PointsMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshPhongMaterial, MeshToonMaterial, MeshNormalMaterial, MeshLambertMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshBasicMaterial, MeshMatcapMaterial, LineDashedMaterial, LineBasicMaterial, Material };
+export * from './ShadowMaterial.js';
+export * from './SpriteMaterial.js';
+export * from './RawShaderMaterial.js';
+export * from './ShaderMaterial.js';
+export * from './PointsMaterial.js';
+export * from './MeshPhysicalMaterial.js';
+export * from './MeshStandardMaterial.js';
+export * from './MeshPhongMaterial.js';
+export * from './MeshToonMaterial.js';
+export * from './MeshNormalMaterial.js';
+export * from './MeshLambertMaterial.js';
+export * from './MeshDepthMaterial.js';
+export * from './MeshDistanceMaterial.js';
+export * from './MeshBasicMaterial.js';
+export * from './MeshMatcapMaterial.js';
+export * from './LineDashedMaterial.js';
+export * from './LineBasicMaterial.js';
+export * from './Material.js';
diff --git a/jsdoc-testing/jsdoc/materials/MeshBasicMaterial.d.ts b/jsdoc-testing/jsdoc/materials/MeshBasicMaterial.d.ts
index 56a81e29..227df8ac 100644
--- a/jsdoc-testing/jsdoc/materials/MeshBasicMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/MeshBasicMaterial.d.ts
@@ -1,34 +1,13 @@
-/**
- * A material for drawing geometries in a simple shaded (flat or wireframe) way.
- *
- * This material is not affected by lights.
- *
- * @augments Material
- */
-export class MeshBasicMaterial extends Material {
-    /**
-     * Constructs a new mesh basic material.
-     *
-     * @param {Object} [parameters] - An object with one or more properties
-     * defining the material's appearance. Any property of the material
-     * (including any property from inherited materials) can be passed
-     * in here. Color values can be passed any type of value accepted
-     * by {@link Color#set}.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isMeshBasicMaterial: boolean;
-    type: string;
+import { MapColorPropertiesToColorRepresentations, Material, MaterialProperties } from './Material.js';
+import { Color } from '../math/Color.js';
+import { Euler } from '../math/Euler.js';
+import { Texture } from '../textures/Texture.js';
+import { Combine } from '../constants.js';
+
+export interface MeshBasicMaterialProperties extends MaterialProperties {
     /**
      * Color of the material.
      *
-     * @type {Color}
      * @default (1,1,1)
      */
     color: Color;
@@ -37,21 +16,18 @@ export class MeshBasicMaterial extends Material {
      * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map
      * color is modulated by the diffuse `color`.
      *
-     * @type {?Texture}
      * @default null
      */
     map: Texture | null;
     /**
      * The light map. Requires a second set of UVs.
      *
-     * @type {?Texture}
      * @default null
      */
     lightMap: Texture | null;
     /**
      * Intensity of the baked light.
      *
-     * @type {number}
      * @default 1
      */
     lightMapIntensity: number;
@@ -59,7 +35,6 @@ export class MeshBasicMaterial extends Material {
      * The red channel of this texture is used as the ambient occlusion map.
      * Requires a second set of UVs.
      *
-     * @type {?Texture}
      * @default null
      */
     aoMap: Texture | null;
@@ -68,14 +43,12 @@ export class MeshBasicMaterial extends Material {
      * disables ambient occlusion. Where intensity is `1` and the AO map's
      * red channel is also `1`, ambient light is fully occluded on a surface.
      *
-     * @type {number}
      * @default 1
      */
     aoMapIntensity: number;
     /**
      * Specular map used by the material.
      *
-     * @type {?Texture}
      * @default null
      */
     specularMap: Texture | null;
@@ -89,21 +62,18 @@ export class MeshBasicMaterial extends Material {
      * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and
      * luminance/alpha textures will also still work as expected.
      *
-     * @type {?Texture}
      * @default null
      */
     alphaMap: Texture | null;
     /**
      * The environment map.
      *
-     * @type {?Texture}
      * @default null
      */
     envMap: Texture | null;
     /**
      * The rotation of the environment map in radians.
      *
-     * @type {Euler}
      * @default (0,0,0)
      */
     envMapRotation: Euler;
@@ -113,15 +83,13 @@ export class MeshBasicMaterial extends Material {
      * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to
      * blend between the two colors.
      *
-     * @type {(MultiplyOperation|MixOperation|AddOperation)}
      * @default MultiplyOperation
      */
-    combine: (number | MixOperation | AddOperation);
+    combine: Combine;
     /**
      * How much the environment map affects the surface.
      * The valid range is between `0` (no reflections) and `1` (full reflections).
      *
-     * @type {number}
      * @default 1
      */
     reflectivity: number;
@@ -131,14 +99,12 @@ export class MeshBasicMaterial extends Material {
      * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.
      * The refraction ratio should not exceed `1`.
      *
-     * @type {number}
      * @default 0.98
      */
     refractionRatio: number;
     /**
      * Renders the geometry as a wireframe.
      *
-     * @type {boolean}
      * @default false
      */
     wireframe: boolean;
@@ -147,7 +113,6 @@ export class MeshBasicMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {number}
      * @default 1
      */
     wireframeLinewidth: number;
@@ -156,7 +121,6 @@ export class MeshBasicMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {('round'|'bevel'|'miter')}
      * @default 'round'
      */
     wireframeLinecap: ("round" | "bevel" | "miter");
@@ -165,19 +129,44 @@ export class MeshBasicMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {('round'|'bevel'|'miter')}
      * @default 'round'
      */
     wireframeLinejoin: ("round" | "bevel" | "miter");
     /**
      * Whether the material is affected by fog or not.
      *
-     * @type {boolean}
      * @default true
      */
     fog: boolean;
-    copy(source: any): this;
 }
-import { Material } from './Material.js';
-import { Color } from '../math/Color.js';
-import { Euler } from '../math/Euler.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshBasicMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshBasicMaterialProperties>> {}
+
+/**
+ * A material for drawing geometries in a simple shaded (flat or wireframe) way.
+ *
+ * This material is not affected by lights.
+ */
+export class MeshBasicMaterial extends Material {
+    /**
+     * Constructs a new mesh basic material.
+     *
+     * @param {Object} [parameters] - An object with one or more properties
+     * defining the material's appearance. Any property of the material
+     * (including any property from inherited materials) can be passed
+     * in here. Color values can be passed any type of value accepted
+     * by {@link Color#set}.
+     */
+    constructor(parameters?: MeshBasicMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isMeshBasicMaterial: boolean;
+    setValues(values?: MeshBasicMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshBasicMaterial extends MeshBasicMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/MeshDepthMaterial.d.ts b/jsdoc-testing/jsdoc/materials/MeshDepthMaterial.d.ts
index b3beb46d..b27cb65e 100644
--- a/jsdoc-testing/jsdoc/materials/MeshDepthMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/MeshDepthMaterial.d.ts
@@ -1,41 +1,18 @@
-/**
- * A material for drawing geometry by depth. Depth is based off of the camera
- * near and far plane. White is nearest, black is farthest.
- *
- * @augments Material
- */
-export class MeshDepthMaterial extends Material {
-    /**
-     * Constructs a new mesh depth material.
-     *
-     * @param {Object} [parameters] - An object with one or more properties
-     * defining the material's appearance. Any property of the material
-     * (including any property from inherited materials) can be passed
-     * in here. Color values can be passed any type of value accepted
-     * by {@link Color#set}.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isMeshDepthMaterial: boolean;
-    type: string;
+import { MapColorPropertiesToColorRepresentations, Material, MaterialProperties } from './Material.js';
+import { Texture } from '../textures/Texture.js';
+import { DepthPackingStrategies } from '../constants.js';
+
+export interface MeshDepthMaterialProperties extends MaterialProperties {
     /**
      * Type for depth packing.
      *
-     * @type {(BasicDepthPacking|RGBADepthPacking|RGBDepthPacking|RGDepthPacking)}
      * @default BasicDepthPacking
      */
-    depthPacking: (number | RGBADepthPacking | RGBDepthPacking | RGDepthPacking);
+    depthPacking: DepthPackingStrategies;
     /**
      * The color map. May optionally include an alpha channel, typically combined
      * with {@link Material#transparent} or {@link Material#alphaTest}.
      *
-     * @type {?Texture}
      * @default null
      */
     map: Texture | null;
@@ -49,7 +26,6 @@ export class MeshDepthMaterial extends Material {
      * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and
      * luminance/alpha textures will also still work as expected.
      *
-     * @type {?Texture}
      * @default null
      */
     alphaMap: Texture | null;
@@ -61,7 +37,6 @@ export class MeshDepthMaterial extends Material {
      * of each pixel (white being the highest) is mapped against, and
      * repositions, the vertices of the mesh.
      *
-     * @type {?Texture}
      * @default null
      */
     displacementMap: Texture | null;
@@ -70,7 +45,6 @@ export class MeshDepthMaterial extends Material {
      * displacement, and white is maximum displacement). Without a displacement
      * map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementScale: number;
@@ -79,14 +53,12 @@ export class MeshDepthMaterial extends Material {
      * The bias is added to the scaled sample of the displacement map.
      * Without a displacement map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementBias: number;
     /**
      * Renders the geometry as a wireframe.
      *
-     * @type {boolean}
      * @default false
      */
     wireframe: boolean;
@@ -96,10 +68,37 @@ export class MeshDepthMaterial extends Material {
      * WebGL and WebGPU ignore this property and always render
      * 1 pixel wide lines.
      *
-     * @type {number}
      * @default 1
      */
     wireframeLinewidth: number;
-    copy(source: any): this;
 }
-import { Material } from './Material.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshDepthMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshDepthMaterialProperties>> {}
+
+/**
+ * A material for drawing geometry by depth. Depth is based off of the camera
+ * near and far plane. White is nearest, black is farthest.
+ */
+export class MeshDepthMaterial extends Material {
+    /**
+     * Constructs a new mesh depth material.
+     *
+     * @param {Object} [parameters] - An object with one or more properties
+     * defining the material's appearance. Any property of the material
+     * (including any property from inherited materials) can be passed
+     * in here. Color values can be passed any type of value accepted
+     * by {@link Color#set}.
+     */
+    constructor(parameters?: MeshDepthMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isMeshDepthMaterial: boolean;
+    setValues(values?: MeshDepthMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshDepthMaterial extends MeshDepthMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/MeshDistanceMaterial.d.ts b/jsdoc-testing/jsdoc/materials/MeshDistanceMaterial.d.ts
index 65ab8f0e..34a4486b 100644
--- a/jsdoc-testing/jsdoc/materials/MeshDistanceMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/MeshDistanceMaterial.d.ts
@@ -1,39 +1,11 @@
-/**
- * A material used internally for implementing shadow mapping with
- * point lights.
- *
- * Can also be used to customize the shadow casting of an object by assigning
- * an instance of `MeshDistanceMaterial` to {@link Object3D#customDistanceMaterial}.
- * The following examples demonstrates this approach in order to ensure
- * transparent parts of objects do no cast shadows.
- *
- * @augments Material
- */
-export class MeshDistanceMaterial extends Material {
-    /**
-     * Constructs a new mesh distance material.
-     *
-     * @param {Object} [parameters] - An object with one or more properties
-     * defining the material's appearance. Any property of the material
-     * (including any property from inherited materials) can be passed
-     * in here. Color values can be passed any type of value accepted
-     * by {@link Color#set}.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isMeshDistanceMaterial: boolean;
-    type: string;
+import { MapColorPropertiesToColorRepresentations, Material, MaterialProperties } from './Material.js';
+import { Texture } from '../textures/Texture.js';
+
+export interface MeshDistanceMaterialProperties extends MaterialProperties {
     /**
      * The color map. May optionally include an alpha channel, typically combined
      * with {@link Material#transparent} or {@link Material#alphaTest}.
      *
-     * @type {?Texture}
      * @default null
      */
     map: Texture | null;
@@ -47,7 +19,6 @@ export class MeshDistanceMaterial extends Material {
      * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and
      * luminance/alpha textures will also still work as expected.
      *
-     * @type {?Texture}
      * @default null
      */
     alphaMap: Texture | null;
@@ -59,7 +30,6 @@ export class MeshDistanceMaterial extends Material {
      * of each pixel (white being the highest) is mapped against, and
      * repositions, the vertices of the mesh.
      *
-     * @type {?Texture}
      * @default null
      */
     displacementMap: Texture | null;
@@ -68,7 +38,6 @@ export class MeshDistanceMaterial extends Material {
      * displacement, and white is maximum displacement). Without a displacement
      * map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementScale: number;
@@ -77,10 +46,42 @@ export class MeshDistanceMaterial extends Material {
      * The bias is added to the scaled sample of the displacement map.
      * Without a displacement map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementBias: number;
-    copy(source: any): this;
 }
-import { Material } from './Material.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshDistanceMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshDistanceMaterialProperties>> {}
+
+/**
+ * A material used internally for implementing shadow mapping with
+ * point lights.
+ *
+ * Can also be used to customize the shadow casting of an object by assigning
+ * an instance of `MeshDistanceMaterial` to {@link Object3D#customDistanceMaterial}.
+ * The following examples demonstrates this approach in order to ensure
+ * transparent parts of objects do no cast shadows.
+ */
+export class MeshDistanceMaterial extends Material {
+    /**
+     * Constructs a new mesh distance material.
+     *
+     * @param {Object} [parameters] - An object with one or more properties
+     * defining the material's appearance. Any property of the material
+     * (including any property from inherited materials) can be passed
+     * in here. Color values can be passed any type of value accepted
+     * by {@link Color#set}.
+     */
+    constructor(parameters?: MeshDistanceMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isMeshDistanceMaterial: boolean;
+    setValues(values?: MeshDistanceMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshDistanceMaterial extends MeshDistanceMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/MeshLambertMaterial.d.ts b/jsdoc-testing/jsdoc/materials/MeshLambertMaterial.d.ts
index b459bd83..524055be 100644
--- a/jsdoc-testing/jsdoc/materials/MeshLambertMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/MeshLambertMaterial.d.ts
@@ -1,43 +1,14 @@
-/**
- * A material for non-shiny surfaces, without specular highlights.
- *
- * The material uses a non-physically based [Lambertian]{@link https://en.wikipedia.org/wiki/Lambertian_reflectance}
- * model for calculating reflectance. This can simulate some surfaces (such
- * as untreated wood or stone) well, but cannot simulate shiny surfaces with
- * specular highlights (such as varnished wood). `MeshLambertMaterial` uses per-fragment
- * shading.
- *
- * Due to the simplicity of the reflectance and illumination models,
- * performance will be greater when using this material over the
- * {@link MeshPhongMaterial}, {@link MeshStandardMaterial} or
- * {@link MeshPhysicalMaterial}, at the cost of some graphical accuracy.
- *
- * @augments Material
- */
-export class MeshLambertMaterial extends Material {
-    /**
-     * Constructs a new mesh lambert material.
-     *
-     * @param {Object} [parameters] - An object with one or more properties
-     * defining the material's appearance. Any property of the material
-     * (including any property from inherited materials) can be passed
-     * in here. Color values can be passed any type of value accepted
-     * by {@link Color#set}.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isMeshLambertMaterial: boolean;
-    type: string;
+import { MapColorPropertiesToColorRepresentations, Material, MaterialProperties } from './Material.js';
+import { Color } from '../math/Color.js';
+import { Vector2 } from '../math/Vector2.js';
+import { Euler } from '../math/Euler.js';
+import { Texture } from '../textures/Texture.js';
+import { Combine, NormalMapTypes } from '../constants.js';
+
+export interface MeshLambertMaterialProperties extends MaterialProperties {
     /**
      * Color of the material.
      *
-     * @type {Color}
      * @default (1,1,1)
      */
     color: Color;
@@ -46,21 +17,18 @@ export class MeshLambertMaterial extends Material {
      * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map
      * color is modulated by the diffuse `color`.
      *
-     * @type {?Texture}
      * @default null
      */
     map: Texture | null;
     /**
      * The light map. Requires a second set of UVs.
      *
-     * @type {?Texture}
      * @default null
      */
     lightMap: Texture | null;
     /**
      * Intensity of the baked light.
      *
-     * @type {number}
      * @default 1
      */
     lightMapIntensity: number;
@@ -68,7 +36,6 @@ export class MeshLambertMaterial extends Material {
      * The red channel of this texture is used as the ambient occlusion map.
      * Requires a second set of UVs.
      *
-     * @type {?Texture}
      * @default null
      */
     aoMap: Texture | null;
@@ -77,7 +44,6 @@ export class MeshLambertMaterial extends Material {
      * disables ambient occlusion. Where intensity is `1` and the AO map's
      * red channel is also `1`, ambient light is fully occluded on a surface.
      *
-     * @type {number}
      * @default 1
      */
     aoMapIntensity: number;
@@ -85,14 +51,12 @@ export class MeshLambertMaterial extends Material {
      * Emissive (light) color of the material, essentially a solid color
      * unaffected by other lighting.
      *
-     * @type {Color}
      * @default (0,0,0)
      */
     emissive: Color;
     /**
      * Intensity of the emissive light. Modulates the emissive color.
      *
-     * @type {number}
      * @default 1
      */
     emissiveIntensity: number;
@@ -101,7 +65,6 @@ export class MeshLambertMaterial extends Material {
      * emissive color and the emissive intensity. If you have an emissive map,
      * be sure to set the emissive color to something other than black.
      *
-     * @type {?Texture}
      * @default null
      */
     emissiveMap: Texture | null;
@@ -111,14 +74,12 @@ export class MeshLambertMaterial extends Material {
      * the geometry of the object, only the lighting. If a normal map is defined
      * this will be ignored.
      *
-     * @type {?Texture}
      * @default null
      */
     bumpMap: Texture | null;
     /**
      * How much the bump map affects the material. Typical range is `[0,1]`.
      *
-     * @type {number}
      * @default 1
      */
     bumpScale: number;
@@ -130,21 +91,18 @@ export class MeshLambertMaterial extends Material {
      * convention, the `y` component of `normalScale` should be negated to compensate
      * for the different handedness.
      *
-     * @type {?Texture}
      * @default null
      */
     normalMap: Texture | null;
     /**
      * The type of normal map.
      *
-     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}
      * @default TangentSpaceNormalMap
      */
-    normalMapType: (number | ObjectSpaceNormalMap);
+    normalMapType: NormalMapTypes;
     /**
      * How much the normal map affects the material. Typical value range is `[0,1]`.
      *
-     * @type {Vector2}
      * @default (1,1)
      */
     normalScale: Vector2;
@@ -156,7 +114,6 @@ export class MeshLambertMaterial extends Material {
      * of each pixel (white being the highest) is mapped against, and
      * repositions, the vertices of the mesh.
      *
-     * @type {?Texture}
      * @default null
      */
     displacementMap: Texture | null;
@@ -165,7 +122,6 @@ export class MeshLambertMaterial extends Material {
      * displacement, and white is maximum displacement). Without a displacement
      * map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementScale: number;
@@ -174,14 +130,12 @@ export class MeshLambertMaterial extends Material {
      * The bias is added to the scaled sample of the displacement map.
      * Without a displacement map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementBias: number;
     /**
      * Specular map used by the material.
      *
-     * @type {?Texture}
      * @default null
      */
     specularMap: Texture | null;
@@ -195,21 +149,18 @@ export class MeshLambertMaterial extends Material {
      * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and
      * luminance/alpha textures will also still work as expected.
      *
-     * @type {?Texture}
      * @default null
      */
     alphaMap: Texture | null;
     /**
      * The environment map.
      *
-     * @type {?Texture}
      * @default null
      */
     envMap: Texture | null;
     /**
      * The rotation of the environment map in radians.
      *
-     * @type {Euler}
      * @default (0,0,0)
      */
     envMapRotation: Euler;
@@ -219,15 +170,13 @@ export class MeshLambertMaterial extends Material {
      * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to
      * blend between the two colors.
      *
-     * @type {(MultiplyOperation|MixOperation|AddOperation)}
      * @default MultiplyOperation
      */
-    combine: (number | MixOperation | AddOperation);
+    combine: Combine;
     /**
      * How much the environment map affects the surface.
      * The valid range is between `0` (no reflections) and `1` (full reflections).
      *
-     * @type {number}
      * @default 1
      */
     reflectivity: number;
@@ -237,14 +186,12 @@ export class MeshLambertMaterial extends Material {
      * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.
      * The refraction ratio should not exceed `1`.
      *
-     * @type {number}
      * @default 0.98
      */
     refractionRatio: number;
     /**
      * Renders the geometry as a wireframe.
      *
-     * @type {boolean}
      * @default false
      */
     wireframe: boolean;
@@ -253,7 +200,6 @@ export class MeshLambertMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {number}
      * @default 1
      */
     wireframeLinewidth: number;
@@ -262,7 +208,6 @@ export class MeshLambertMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {('round'|'bevel'|'miter')}
      * @default 'round'
      */
     wireframeLinecap: ("round" | "bevel" | "miter");
@@ -271,27 +216,59 @@ export class MeshLambertMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {('round'|'bevel'|'miter')}
      * @default 'round'
      */
     wireframeLinejoin: ("round" | "bevel" | "miter");
     /**
      * Whether the material is rendered with flat shading or not.
      *
-     * @type {boolean}
      * @default false
      */
     flatShading: boolean;
     /**
      * Whether the material is affected by fog or not.
      *
-     * @type {boolean}
      * @default true
      */
     fog: boolean;
-    copy(source: any): this;
 }
-import { Material } from './Material.js';
-import { Color } from '../math/Color.js';
-import { Vector2 } from '../math/Vector2.js';
-import { Euler } from '../math/Euler.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshLambertMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshLambertMaterialProperties>> {}
+
+/**
+ * A material for non-shiny surfaces, without specular highlights.
+ *
+ * The material uses a non-physically based [Lambertian]{@link https://en.wikipedia.org/wiki/Lambertian_reflectance}
+ * model for calculating reflectance. This can simulate some surfaces (such
+ * as untreated wood or stone) well, but cannot simulate shiny surfaces with
+ * specular highlights (such as varnished wood). `MeshLambertMaterial` uses per-fragment
+ * shading.
+ *
+ * Due to the simplicity of the reflectance and illumination models,
+ * performance will be greater when using this material over the
+ * {@link MeshPhongMaterial}, {@link MeshStandardMaterial} or
+ * {@link MeshPhysicalMaterial}, at the cost of some graphical accuracy.
+ */
+export class MeshLambertMaterial extends Material {
+    /**
+     * Constructs a new mesh lambert material.
+     *
+     * @param {Object} [parameters] - An object with one or more properties
+     * defining the material's appearance. Any property of the material
+     * (including any property from inherited materials) can be passed
+     * in here. Color values can be passed any type of value accepted
+     * by {@link Color#set}.
+     */
+    constructor(parameters?: MeshLambertMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isMeshLambertMaterial: boolean;
+    setValues(values?: MeshLambertMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshLambertMaterial extends MeshLambertMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/MeshMatcapMaterial.d.ts b/jsdoc-testing/jsdoc/materials/MeshMatcapMaterial.d.ts
index a37c025d..4bf443ea 100644
--- a/jsdoc-testing/jsdoc/materials/MeshMatcapMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/MeshMatcapMaterial.d.ts
@@ -1,48 +1,19 @@
-/**
- * This material is defined by a MatCap (or Lit Sphere) texture, which encodes the
- * material color and shading.
- *
- * `MeshMatcapMaterial` does not respond to lights since the matcap image file encodes
- * baked lighting. It will cast a shadow onto an object that receives shadows
- * (and shadow clipping works), but it will not self-shadow or receive
- * shadows.
- *
- * @augments Material
- */
-export class MeshMatcapMaterial extends Material {
-    /**
-     * Constructs a new mesh matcap material.
-     *
-     * @param {Object} [parameters] - An object with one or more properties
-     * defining the material's appearance. Any property of the material
-     * (including any property from inherited materials) can be passed
-     * in here. Color values can be passed any type of value accepted
-     * by {@link Color#set}.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isMeshMatcapMaterial: boolean;
-    defines: {
-        MATCAP: string;
-    };
-    type: string;
+import { MapColorPropertiesToColorRepresentations, Material, MaterialProperties } from './Material.js';
+import { Color } from '../math/Color.js';
+import { Vector2 } from '../math/Vector2.js';
+import { Texture } from '../textures/Texture.js';
+import { NormalMapTypes } from '../constants.js';
+
+export interface MeshMatcapMaterialProperties extends MaterialProperties {
     /**
      * Color of the material.
      *
-     * @type {Color}
      * @default (1,1,1)
      */
     color: Color;
     /**
      * The matcap map.
      *
-     * @type {?Texture}
      * @default null
      */
     matcap: Texture | null;
@@ -51,7 +22,6 @@ export class MeshMatcapMaterial extends Material {
      * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map
      * color is modulated by the diffuse `color`.
      *
-     * @type {?Texture}
      * @default null
      */
     map: Texture | null;
@@ -61,14 +31,12 @@ export class MeshMatcapMaterial extends Material {
      * the geometry of the object, only the lighting. If a normal map is defined
      * this will be ignored.
      *
-     * @type {?Texture}
      * @default null
      */
     bumpMap: Texture | null;
     /**
      * How much the bump map affects the material. Typical range is `[0,1]`.
      *
-     * @type {number}
      * @default 1
      */
     bumpScale: number;
@@ -80,21 +48,18 @@ export class MeshMatcapMaterial extends Material {
      * convention, the `y` component of `normalScale` should be negated to compensate
      * for the different handedness.
      *
-     * @type {?Texture}
      * @default null
      */
     normalMap: Texture | null;
     /**
      * The type of normal map.
      *
-     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}
      * @default TangentSpaceNormalMap
      */
-    normalMapType: (number | ObjectSpaceNormalMap);
+    normalMapType: NormalMapTypes;
     /**
      * How much the normal map affects the material. Typical value range is `[0,1]`.
      *
-     * @type {Vector2}
      * @default (1,1)
      */
     normalScale: Vector2;
@@ -106,7 +71,6 @@ export class MeshMatcapMaterial extends Material {
      * of each pixel (white being the highest) is mapped against, and
      * repositions, the vertices of the mesh.
      *
-     * @type {?Texture}
      * @default null
      */
     displacementMap: Texture | null;
@@ -115,7 +79,6 @@ export class MeshMatcapMaterial extends Material {
      * displacement, and white is maximum displacement). Without a displacement
      * map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementScale: number;
@@ -124,7 +87,6 @@ export class MeshMatcapMaterial extends Material {
      * The bias is added to the scaled sample of the displacement map.
      * Without a displacement map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementBias: number;
@@ -138,26 +100,54 @@ export class MeshMatcapMaterial extends Material {
      * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and
      * luminance/alpha textures will also still work as expected.
      *
-     * @type {?Texture}
      * @default null
      */
     alphaMap: Texture | null;
     /**
      * Whether the material is rendered with flat shading or not.
      *
-     * @type {boolean}
      * @default false
      */
     flatShading: boolean;
     /**
      * Whether the material is affected by fog or not.
      *
-     * @type {boolean}
      * @default true
      */
     fog: boolean;
-    copy(source: any): this;
 }
-import { Material } from './Material.js';
-import { Color } from '../math/Color.js';
-import { Vector2 } from '../math/Vector2.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshMatcapMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshMatcapMaterialProperties>> {}
+
+/**
+ * This material is defined by a MatCap (or Lit Sphere) texture, which encodes the
+ * material color and shading.
+ *
+ * `MeshMatcapMaterial` does not respond to lights since the matcap image file encodes
+ * baked lighting. It will cast a shadow onto an object that receives shadows
+ * (and shadow clipping works), but it will not self-shadow or receive
+ * shadows.
+ */
+export class MeshMatcapMaterial extends Material {
+    /**
+     * Constructs a new mesh matcap material.
+     *
+     * @param {Object} [parameters] - An object with one or more properties
+     * defining the material's appearance. Any property of the material
+     * (including any property from inherited materials) can be passed
+     * in here. Color values can be passed any type of value accepted
+     * by {@link Color#set}.
+     */
+    constructor(parameters?: MeshMatcapMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isMeshMatcapMaterial: boolean;
+    setValues(values?: MeshMatcapMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshMatcapMaterial extends MeshMatcapMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/MeshNormalMaterial.d.ts b/jsdoc-testing/jsdoc/materials/MeshNormalMaterial.d.ts
index 9a1345a8..c70a8e68 100644
--- a/jsdoc-testing/jsdoc/materials/MeshNormalMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/MeshNormalMaterial.d.ts
@@ -1,42 +1,21 @@
-/**
- * A material that maps the normal vectors to RGB colors.
- *
- * @augments Material
- */
-export class MeshNormalMaterial extends Material {
-    /**
-     * Constructs a new mesh normal material.
-     *
-     * @param {Object} [parameters] - An object with one or more properties
-     * defining the material's appearance. Any property of the material
-     * (including any property from inherited materials) can be passed
-     * in here. Color values can be passed any type of value accepted
-     * by {@link Color#set}.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isMeshNormalMaterial: boolean;
-    type: string;
+import { MapColorPropertiesToColorRepresentations, Material, MaterialProperties } from './Material.js';
+import { Vector2 } from '../math/Vector2.js';
+import { Texture } from '../textures/Texture.js';
+import { NormalMapTypes } from '../constants.js';
+
+export interface MeshNormalMaterialProperties extends MaterialProperties {
     /**
      * The texture to create a bump map. The black and white values map to the
      * perceived depth in relation to the lights. Bump doesn't actually affect
      * the geometry of the object, only the lighting. If a normal map is defined
      * this will be ignored.
      *
-     * @type {?Texture}
      * @default null
      */
     bumpMap: Texture | null;
     /**
      * How much the bump map affects the material. Typical range is `[0,1]`.
      *
-     * @type {number}
      * @default 1
      */
     bumpScale: number;
@@ -48,21 +27,18 @@ export class MeshNormalMaterial extends Material {
      * convention, the `y` component of `normalScale` should be negated to compensate
      * for the different handedness.
      *
-     * @type {?Texture}
      * @default null
      */
     normalMap: Texture | null;
     /**
      * The type of normal map.
      *
-     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}
      * @default TangentSpaceNormalMap
      */
-    normalMapType: (number | ObjectSpaceNormalMap);
+    normalMapType: NormalMapTypes;
     /**
      * How much the normal map affects the material. Typical value range is `[0,1]`.
      *
-     * @type {Vector2}
      * @default (1,1)
      */
     normalScale: Vector2;
@@ -74,7 +50,6 @@ export class MeshNormalMaterial extends Material {
      * of each pixel (white being the highest) is mapped against, and
      * repositions, the vertices of the mesh.
      *
-     * @type {?Texture}
      * @default null
      */
     displacementMap: Texture | null;
@@ -83,7 +58,6 @@ export class MeshNormalMaterial extends Material {
      * displacement, and white is maximum displacement). Without a displacement
      * map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementScale: number;
@@ -92,14 +66,12 @@ export class MeshNormalMaterial extends Material {
      * The bias is added to the scaled sample of the displacement map.
      * Without a displacement map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementBias: number;
     /**
      * Renders the geometry as a wireframe.
      *
-     * @type {boolean}
      * @default false
      */
     wireframe: boolean;
@@ -109,18 +81,42 @@ export class MeshNormalMaterial extends Material {
      * WebGL and WebGPU ignore this property and always render
      * 1 pixel wide lines.
      *
-     * @type {number}
      * @default 1
      */
     wireframeLinewidth: number;
     /**
      * Whether the material is rendered with flat shading or not.
      *
-     * @type {boolean}
      * @default false
      */
     flatShading: boolean;
-    copy(source: any): this;
 }
-import { Material } from './Material.js';
-import { Vector2 } from '../math/Vector2.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshNormalMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshNormalMaterialProperties>> {}
+
+/**
+ * A material that maps the normal vectors to RGB colors.
+ */
+export class MeshNormalMaterial extends Material {
+    /**
+     * Constructs a new mesh normal material.
+     *
+     * @param {Object} [parameters] - An object with one or more properties
+     * defining the material's appearance. Any property of the material
+     * (including any property from inherited materials) can be passed
+     * in here. Color values can be passed any type of value accepted
+     * by {@link Color#set}.
+     */
+    constructor(parameters?: MeshNormalMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isMeshNormalMaterial: boolean;
+    setValues(values?: MeshNormalMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshNormalMaterial extends MeshNormalMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/MeshPhongMaterial.d.ts b/jsdoc-testing/jsdoc/materials/MeshPhongMaterial.d.ts
index fd169c1c..7a85b3d3 100644
--- a/jsdoc-testing/jsdoc/materials/MeshPhongMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/MeshPhongMaterial.d.ts
@@ -1,41 +1,14 @@
-/**
- * A material for shiny surfaces with specular highlights.
- *
- * The material uses a non-physically based [Blinn-Phong]{@link https://en.wikipedia.org/wiki/Blinn-Phong_shading_model}
- * model for calculating reflectance. Unlike the Lambertian model used in the
- * {@link MeshLambertMaterial} this can simulate shiny surfaces with specular
- * highlights (such as varnished wood). `MeshPhongMaterial` uses per-fragment shading.
- *
- * Performance will generally be greater when using this material over the
- * {@link MeshStandardMaterial} or {@link MeshPhysicalMaterial}, at the cost of
- * some graphical accuracy.
- *
- * @augments Material
- */
-export class MeshPhongMaterial extends Material {
-    /**
-     * Constructs a new mesh phong material.
-     *
-     * @param {Object} [parameters] - An object with one or more properties
-     * defining the material's appearance. Any property of the material
-     * (including any property from inherited materials) can be passed
-     * in here. Color values can be passed any type of value accepted
-     * by {@link Color#set}.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isMeshPhongMaterial: boolean;
-    type: string;
+import { MapColorPropertiesToColorRepresentations, Material, MaterialProperties } from './Material.js';
+import { Color } from '../math/Color.js';
+import { Vector2 } from '../math/Vector2.js';
+import { Euler } from '../math/Euler.js';
+import { Texture } from '../textures/Texture.js';
+import { Combine, NormalMapTypes } from '../constants.js';
+
+export interface MeshPhongMaterialProperties extends MaterialProperties {
     /**
      * Color of the material.
      *
-     * @type {Color}
      * @default (1,1,1)
      */
     color: Color;
@@ -43,14 +16,11 @@ export class MeshPhongMaterial extends Material {
      * Specular color of the material. The default color is set to `0x111111` (very dark grey)
      *
      * This defines how shiny the material is and the color of its shine.
-     *
-     * @type {Color}
      */
     specular: Color;
     /**
      * How shiny the specular highlight is; a higher value gives a sharper highlight.
      *
-     * @type {number}
      * @default 30
      */
     shininess: number;
@@ -59,21 +29,18 @@ export class MeshPhongMaterial extends Material {
      * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map
      * color is modulated by the diffuse `color`.
      *
-     * @type {?Texture}
      * @default null
      */
     map: Texture | null;
     /**
      * The light map. Requires a second set of UVs.
      *
-     * @type {?Texture}
      * @default null
      */
     lightMap: Texture | null;
     /**
      * Intensity of the baked light.
      *
-     * @type {number}
      * @default 1
      */
     lightMapIntensity: number;
@@ -81,7 +48,6 @@ export class MeshPhongMaterial extends Material {
      * The red channel of this texture is used as the ambient occlusion map.
      * Requires a second set of UVs.
      *
-     * @type {?Texture}
      * @default null
      */
     aoMap: Texture | null;
@@ -90,7 +56,6 @@ export class MeshPhongMaterial extends Material {
      * disables ambient occlusion. Where intensity is `1` and the AO map's
      * red channel is also `1`, ambient light is fully occluded on a surface.
      *
-     * @type {number}
      * @default 1
      */
     aoMapIntensity: number;
@@ -98,14 +63,12 @@ export class MeshPhongMaterial extends Material {
      * Emissive (light) color of the material, essentially a solid color
      * unaffected by other lighting.
      *
-     * @type {Color}
      * @default (0,0,0)
      */
     emissive: Color;
     /**
      * Intensity of the emissive light. Modulates the emissive color.
      *
-     * @type {number}
      * @default 1
      */
     emissiveIntensity: number;
@@ -114,7 +77,6 @@ export class MeshPhongMaterial extends Material {
      * emissive color and the emissive intensity. If you have an emissive map,
      * be sure to set the emissive color to something other than black.
      *
-     * @type {?Texture}
      * @default null
      */
     emissiveMap: Texture | null;
@@ -124,14 +86,12 @@ export class MeshPhongMaterial extends Material {
      * the geometry of the object, only the lighting. If a normal map is defined
      * this will be ignored.
      *
-     * @type {?Texture}
      * @default null
      */
     bumpMap: Texture | null;
     /**
      * How much the bump map affects the material. Typical range is `[0,1]`.
      *
-     * @type {number}
      * @default 1
      */
     bumpScale: number;
@@ -143,21 +103,18 @@ export class MeshPhongMaterial extends Material {
      * convention, the `y` component of `normalScale` should be negated to compensate
      * for the different handedness.
      *
-     * @type {?Texture}
      * @default null
      */
     normalMap: Texture | null;
     /**
      * The type of normal map.
      *
-     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}
      * @default TangentSpaceNormalMap
      */
-    normalMapType: (number | ObjectSpaceNormalMap);
+    normalMapType: NormalMapTypes;
     /**
      * How much the normal map affects the material. Typical value range is `[0,1]`.
      *
-     * @type {Vector2}
      * @default (1,1)
      */
     normalScale: Vector2;
@@ -169,7 +126,6 @@ export class MeshPhongMaterial extends Material {
      * of each pixel (white being the highest) is mapped against, and
      * repositions, the vertices of the mesh.
      *
-     * @type {?Texture}
      * @default null
      */
     displacementMap: Texture | null;
@@ -178,7 +134,6 @@ export class MeshPhongMaterial extends Material {
      * displacement, and white is maximum displacement). Without a displacement
      * map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementScale: number;
@@ -187,7 +142,6 @@ export class MeshPhongMaterial extends Material {
      * The bias is added to the scaled sample of the displacement map.
      * Without a displacement map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementBias: number;
@@ -196,7 +150,6 @@ export class MeshPhongMaterial extends Material {
      * highlight contributes and how much of the environment map affects the
      * surface.
      *
-     * @type {?Texture}
      * @default null
      */
     specularMap: Texture | null;
@@ -210,21 +163,18 @@ export class MeshPhongMaterial extends Material {
      * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and
      * luminance/alpha textures will also still work as expected.
      *
-     * @type {?Texture}
      * @default null
      */
     alphaMap: Texture | null;
     /**
      * The environment map.
      *
-     * @type {?Texture}
      * @default null
      */
     envMap: Texture | null;
     /**
      * The rotation of the environment map in radians.
      *
-     * @type {Euler}
      * @default (0,0,0)
      */
     envMapRotation: Euler;
@@ -234,15 +184,13 @@ export class MeshPhongMaterial extends Material {
      * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to
      * blend between the two colors.
      *
-     * @type {(MultiplyOperation|MixOperation|AddOperation)}
      * @default MultiplyOperation
      */
-    combine: (number | MixOperation | AddOperation);
+    combine: Combine;
     /**
      * How much the environment map affects the surface.
      * The valid range is between `0` (no reflections) and `1` (full reflections).
      *
-     * @type {number}
      * @default 1
      */
     reflectivity: number;
@@ -252,14 +200,12 @@ export class MeshPhongMaterial extends Material {
      * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.
      * The refraction ratio should not exceed `1`.
      *
-     * @type {number}
      * @default 0.98
      */
     refractionRatio: number;
     /**
      * Renders the geometry as a wireframe.
      *
-     * @type {boolean}
      * @default false
      */
     wireframe: boolean;
@@ -268,7 +214,6 @@ export class MeshPhongMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {number}
      * @default 1
      */
     wireframeLinewidth: number;
@@ -277,7 +222,6 @@ export class MeshPhongMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {('round'|'bevel'|'miter')}
      * @default 'round'
      */
     wireframeLinecap: ("round" | "bevel" | "miter");
@@ -286,27 +230,57 @@ export class MeshPhongMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {('round'|'bevel'|'miter')}
      * @default 'round'
      */
     wireframeLinejoin: ("round" | "bevel" | "miter");
     /**
      * Whether the material is rendered with flat shading or not.
      *
-     * @type {boolean}
      * @default false
      */
     flatShading: boolean;
     /**
      * Whether the material is affected by fog or not.
      *
-     * @type {boolean}
      * @default true
      */
     fog: boolean;
-    copy(source: any): this;
 }
-import { Material } from './Material.js';
-import { Color } from '../math/Color.js';
-import { Vector2 } from '../math/Vector2.js';
-import { Euler } from '../math/Euler.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshPhongMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshPhongMaterialProperties>> {}
+
+/**
+ * A material for shiny surfaces with specular highlights.
+ *
+ * The material uses a non-physically based [Blinn-Phong]{@link https://en.wikipedia.org/wiki/Blinn-Phong_shading_model}
+ * model for calculating reflectance. Unlike the Lambertian model used in the
+ * {@link MeshLambertMaterial} this can simulate shiny surfaces with specular
+ * highlights (such as varnished wood). `MeshPhongMaterial` uses per-fragment shading.
+ *
+ * Performance will generally be greater when using this material over the
+ * {@link MeshStandardMaterial} or {@link MeshPhysicalMaterial}, at the cost of
+ * some graphical accuracy.
+ */
+export class MeshPhongMaterial extends Material {
+    /**
+     * Constructs a new mesh phong material.
+     *
+     * @param {Object} [parameters] - An object with one or more properties
+     * defining the material's appearance. Any property of the material
+     * (including any property from inherited materials) can be passed
+     * in here. Color values can be passed any type of value accepted
+     * by {@link Color#set}.
+     */
+    constructor(parameters?: MeshPhongMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isMeshPhongMaterial: boolean;
+    setValues(values?: MeshPhongMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshPhongMaterial extends MeshPhongMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/MeshPhysicalMaterial.d.ts b/jsdoc-testing/jsdoc/materials/MeshPhysicalMaterial.d.ts
index f1a068a4..8cda93e5 100644
--- a/jsdoc-testing/jsdoc/materials/MeshPhysicalMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/MeshPhysicalMaterial.d.ts
@@ -1,47 +1,18 @@
-/**
- * An extension of the {@link MeshStandardMaterial}, providing more advanced
- * physically-based rendering properties:
- *
- * - Anisotropy: Ability to represent the anisotropic property of materials
- * as observable with brushed metals.
- * - Clearcoat: Some materials — like car paints, carbon fiber, and wet surfaces — require
- * a clear, reflective layer on top of another layer that may be irregular or rough.
- * Clearcoat approximates this effect, without the need for a separate transparent surface.
- * - Iridescence: Allows to render the effect where hue varies  depending on the viewing
- * angle and illumination angle. This can be seen on soap bubbles, oil films, or on the
- * wings of many insects.
- * - Physically-based transparency: One limitation of {@link Material#opacity} is that highly
- * transparent materials are less reflective. Physically-based transmission provides a more
- * realistic option for thin, transparent surfaces like glass.
- * - Advanced reflectivity: More flexible reflectivity for non-metallic materials.
- * - Sheen: Can be used for representing cloth and fabric materials.
- *
- * As a result of these complex shading features, `MeshPhysicalMaterial` has a
- * higher performance cost, per pixel, than other three.js materials. Most
- * effects are disabled by default, and add cost as they are enabled. For
- * best results, always specify an environment map when using this material.
- *
- * @augments MeshStandardMaterial
- */
-export class MeshPhysicalMaterial extends MeshStandardMaterial {
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isMeshPhysicalMaterial: boolean;
-    defines: {
-        STANDARD: string;
-        PHYSICAL: string;
-    };
+import {
+    MeshStandardMaterial,
+    MeshStandardMaterialProperties,
+} from './MeshStandardMaterial.js';
+import { Vector2 } from '../math/Vector2.js';
+import { Color } from '../math/Color.js';
+import { Texture } from "../textures/Texture.js";
+import { MapColorPropertiesToColorRepresentations } from './Material.js';
+
+export interface MeshPhysicalMaterialProperties extends MeshStandardMaterialProperties {
     /**
      * The rotation of the anisotropy in tangent, bitangent space, measured in radians
      * counter-clockwise from the tangent. When `anisotropyMap` is present, this
      * property provides additional rotation to the vectors in the texture.
      *
-     * @type {number}
      * @default 1
      */
     anisotropyRotation: number;
@@ -50,7 +21,6 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * bitangent space, to be rotated by `anisotropyRotation`. The blue channel
      * contains strength as `[0, 1]` to be multiplied by `anisotropy`.
      *
-     * @type {?Texture}
      * @default null
      */
     anisotropyMap: Texture | null;
@@ -58,14 +28,12 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * The red channel of this texture is multiplied against `clearcoat`,
      * for per-pixel control over a coating's intensity.
      *
-     * @type {?Texture}
      * @default null
      */
     clearcoatMap: Texture | null;
     /**
      * Roughness of the clear coat layer, from `0.0` to `1.0`.
      *
-     * @type {number}
      * @default 0
      */
     clearcoatRoughness: number;
@@ -73,7 +41,6 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * The green channel of this texture is multiplied against
      * `clearcoatRoughness`, for per-pixel control over a coating's roughness.
      *
-     * @type {?Texture}
      * @default null
      */
     clearcoatRoughnessMap: Texture | null;
@@ -81,29 +48,37 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * How much `clearcoatNormalMap` affects the clear coat layer, from
      * `(0,0)` to `(1,1)`.
      *
-     * @type {Vector2}
      * @default (1,1)
      */
     clearcoatNormalScale: Vector2;
     /**
      * Can be used to enable independent normals for the clear coat layer.
      *
-     * @type {?Texture}
      * @default null
      */
     clearcoatNormalMap: Texture | null;
     /**
      * Index-of-refraction for non-metallic materials, from `1.0` to `2.333`.
      *
-     * @type {number}
      * @default 1.5
      */
     ior: number;
+    /**
+     * Degree of reflectivity, from `0.0` to `1.0`. Default is `0.5`, which
+     * corresponds to an index-of-refraction of `1.5`.
+     *
+     * This models the reflectivity of non-metallic materials. It has no effect
+     * when `metalness` is `1.0`
+     *
+     * @name MeshPhysicalMaterial#reflectivity
+     * @default 0.5
+     */
+    get reflectivity(): number;
+    set reflectivity(reflectivity: number);
     /**
      * The red channel of this texture is multiplied against `iridescence`, for per-pixel
      * control over iridescence.
      *
-     * @type {?Texture}
      * @default null
      */
     iridescenceMap: Texture | null;
@@ -111,7 +86,6 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * Strength of the iridescence RGB color shift effect, represented by an index-of-refraction.
      * Between `1.0` to `2.333`.
      *
-     * @type {number}
      * @default 1.3
      */
     iridescenceIOR: number;
@@ -119,10 +93,9 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      *Array of exactly 2 elements, specifying minimum and maximum thickness of the iridescence layer.
      Thickness of iridescence layer has an equivalent effect of the one `thickness` has on `ior`.
      *
-     * @type {Array<number,number>}
      * @default [100,400]
      */
-    iridescenceThicknessRange: Array<number, number>;
+    iridescenceThicknessRange: [number, number];
     /**
      * A texture that defines the thickness of the iridescence layer, stored in the green channel.
      * Minimum and maximum values of thickness are defined by `iridescenceThicknessRange` array:
@@ -130,14 +103,12 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * - `1.0` in the green channel will result in thickness equal to second element of the array.
      * - Values in-between will linearly interpolate between the elements of the array.
      *
-     * @type {?Texture}
      * @default null
      */
     iridescenceThicknessMap: Texture | null;
     /**
      * The sheen tint.
      *
-     * @type {Color}
      * @default (0,0,0)
      */
     sheenColor: Color;
@@ -145,14 +116,12 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * The RGB channels of this texture are multiplied against  `sheenColor`, for per-pixel control
      * over sheen tint.
      *
-     * @type {?Texture}
      * @default null
      */
     sheenColorMap: Texture | null;
     /**
      * Roughness of the sheen layer, from `0.0` to `1.0`.
      *
-     * @type {number}
      * @default 1
      */
     sheenRoughness: number;
@@ -160,7 +129,6 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * The alpha channel of this texture is multiplied against `sheenRoughness`, for per-pixel control
      * over sheen roughness.
      *
-     * @type {?Texture}
      * @default null
      */
     sheenRoughnessMap: Texture | null;
@@ -168,7 +136,6 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * The red channel of this texture is multiplied against `transmission`, for per-pixel control over
      * optical transparency.
      *
-     * @type {?Texture}
      * @default null
      */
     transmissionMap: Texture | null;
@@ -177,7 +144,6 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * coordinate space of the mesh. If the value is `0` the material is
      * thin-walled. Otherwise the material is a volume boundary.
      *
-     * @type {number}
      * @default 0
      */
     thickness: number;
@@ -185,7 +151,6 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * A texture that defines the thickness, stored in the green channel. This will
      * be multiplied by `thickness`.
      *
-     * @type {?Texture}
      * @default null
      */
     thicknessMap: Texture | null;
@@ -194,7 +159,6 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * the medium before interacting with a particle. The value is given in world
      * space units, and must be greater than zero.
      *
-     * @type {number}
      * @default Infinity
      */
     attenuationDistance: number;
@@ -202,7 +166,6 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * The color that white light turns into due to absorption when reaching the
      * attenuation distance.
      *
-     * @type {Color}
      * @default (1,1,1)
      */
     attenuationColor: Color;
@@ -210,7 +173,6 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * A float that scales the amount of specular reflection for non-metals only.
      * When set to zero, the model is effectively Lambertian. From `0.0` to `1.0`.
      *
-     * @type {number}
      * @default 1
      */
     specularIntensity: number;
@@ -218,14 +180,12 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * The alpha channel of this texture is multiplied against `specularIntensity`,
      * for per-pixel control over specular intensity.
      *
-     * @type {?Texture}
      * @default null
      */
     specularIntensityMap: Texture | null;
     /**
      * Tints the specular reflection at normal incidence for non-metals only.
      *
-     * @type {Color}
      * @default (1,1,1)
      */
     specularColor: Color;
@@ -233,21 +193,13 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * The RGB channels of this texture are multiplied against `specularColor`,
      * for per-pixel control over specular color.
      *
-     * @type {?Texture}
      * @default null
      */
     specularColorMap: Texture | null;
-    _anisotropy: number;
-    _clearcoat: number;
-    _dispersion: number;
-    _iridescence: number;
-    _sheen: number;
-    _transmission: number;
     set anisotropy(value: number);
     /**
      * The anisotropy strength.
      *
-     * @type {number}
      * @default 0
      */
     get anisotropy(): number;
@@ -257,7 +209,6 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * clear coat related properties to enable multilayer materials that have a
      * thin translucent layer over the base layer.
      *
-     * @type {number}
      * @default 0
      */
     get clearcoat(): number;
@@ -266,7 +217,6 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * The intensity of the iridescence layer, simulating RGB color shift based on the angle between
      * the surface and the viewer, from `0.0` to `1.0`.
      *
-     * @type {number}
      * @default 0
      */
     get iridescence(): number;
@@ -276,7 +226,6 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      * through a relatively clear volume. Any value zero or larger is valid, the typical range of
      * realistic values is `[0, 1]`. This property can be only be used with transmissive objects.
      *
-     * @type {number}
      * @default 0
      */
     get dispersion(): number;
@@ -284,7 +233,6 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
     /**
      * The intensity of the sheen layer, from `0.0` to `1.0`.
      *
-     * @type {number}
      * @default 0
      */
     get sheen(): number;
@@ -298,12 +246,49 @@ export class MeshPhysicalMaterial extends MeshStandardMaterial {
      *
      * When transmission is non-zero, `opacity` should be  set to `1`.
      *
-     * @type {number}
      * @default 0
      */
     get transmission(): number;
-    copy(source: any): this;
 }
-import { MeshStandardMaterial } from './MeshStandardMaterial.js';
-import { Vector2 } from '../math/Vector2.js';
-import { Color } from '../math/Color.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshPhysicalMaterialParameters
+    extends Partial<MapColorPropertiesToColorRepresentations<MeshPhysicalMaterialProperties>>
+{}
+
+/**
+ * An extension of the {@link MeshStandardMaterial}, providing more advanced
+ * physically-based rendering properties:
+ *
+ * - Anisotropy: Ability to represent the anisotropic property of materials
+ * as observable with brushed metals.
+ * - Clearcoat: Some materials — like car paints, carbon fiber, and wet surfaces — require
+ * a clear, reflective layer on top of another layer that may be irregular or rough.
+ * Clearcoat approximates this effect, without the need for a separate transparent surface.
+ * - Iridescence: Allows to render the effect where hue varies  depending on the viewing
+ * angle and illumination angle. This can be seen on soap bubbles, oil films, or on the
+ * wings of many insects.
+ * - Physically-based transparency: One limitation of {@link Material#opacity} is that highly
+ * transparent materials are less reflective. Physically-based transmission provides a more
+ * realistic option for thin, transparent surfaces like glass.
+ * - Advanced reflectivity: More flexible reflectivity for non-metallic materials.
+ * - Sheen: Can be used for representing cloth and fabric materials.
+ *
+ * As a result of these complex shading features, `MeshPhysicalMaterial` has a
+ * higher performance cost, per pixel, than other three.js materials. Most
+ * effects are disabled by default, and add cost as they are enabled. For
+ * best results, always specify an environment map when using this material.
+ */
+export class MeshPhysicalMaterial extends MeshStandardMaterial {
+    constructor(parameters?: MeshPhysicalMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isMeshPhysicalMaterial: boolean;
+    setValues(values?: MeshPhysicalMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshPhysicalMaterial extends MeshPhysicalMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/MeshStandardMaterial.d.ts b/jsdoc-testing/jsdoc/materials/MeshStandardMaterial.d.ts
index fa11c310..bf181dea 100644
--- a/jsdoc-testing/jsdoc/materials/MeshStandardMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/MeshStandardMaterial.d.ts
@@ -1,63 +1,18 @@
-/**
- * A standard physically based material, using Metallic-Roughness workflow.
- *
- * Physically based rendering (PBR) has recently become the standard in many
- * 3D applications, such as [Unity]{@link https://blogs.unity3d.com/2014/10/29/physically-based-shading-in-unity-5-a-primer/},
- * [Unreal]{@link https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/PhysicallyBased/} and
- * [3D Studio Max]{@link http://area.autodesk.com/blogs/the-3ds-max-blog/what039s-new-for-rendering-in-3ds-max-2017}.
- *
- * This approach differs from older approaches in that instead of using
- * approximations for the way in which light interacts with a surface, a
- * physically correct model is used. The idea is that, instead of tweaking
- * materials to look good under specific lighting, a material can be created
- * that will react 'correctly' under all lighting scenarios.
- *
- * In practice this gives a more accurate and realistic looking result than
- * the {@link MeshLambertMaterial} or {@link MeshPhongMaterial}, at the cost of
- * being somewhat more computationally expensive. `MeshStandardMaterial` uses per-fragment
- * shading.
- *
- * Note that for best results you should always specify an environment map when using this material.
- *
- * For a non-technical introduction to the concept of PBR and how to set up a
- * PBR material, check out these articles by the people at [marmoset]{@link https://www.marmoset.co}:
- *
- * - [Basic Theory of Physically Based Rendering]{@link https://www.marmoset.co/posts/basic-theory-of-physically-based-rendering/}
- * - [Physically Based Rendering and You Can Too]{@link https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/}
- *
- * Technical details of the approach used in three.js (and most other PBR systems) can be found is this
- * [paper from Disney]{@link https://media.disneyanimation.com/uploads/production/publication_asset/48/asset/s2012_pbs_disney_brdf_notes_v3.pdf}
- * (pdf), by Brent Burley.
- *
- * @augments Material
- */
-export class MeshStandardMaterial extends Material {
-    /**
-     * Constructs a new mesh standard material.
-     *
-     * @param {Object} [parameters] - An object with one or more properties
-     * defining the material's appearance. Any property of the material
-     * (including any property from inherited materials) can be passed
-     * in here. Color values can be passed any type of value accepted
-     * by {@link Color#set}.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isMeshStandardMaterial: boolean;
-    type: string;
-    defines: {
-        STANDARD: string;
-    };
+import {
+    MapColorPropertiesToColorRepresentations,
+    Material,
+    MaterialProperties,
+} from './Material.js';
+import { Color } from '../math/Color.js';
+import { Vector2 } from '../math/Vector2.js';
+import { Euler } from '../math/Euler.js';
+import { Texture } from "../textures/Texture.js";
+import { NormalMapTypes } from "../constants.js";
+
+export interface MeshStandardMaterialProperties extends MaterialProperties {
     /**
      * Color of the material.
      *
-     * @type {Color}
      * @default (1,1,1)
      */
     color: Color;
@@ -66,7 +21,6 @@ export class MeshStandardMaterial extends Material {
      * means fully diffuse. If `roughnessMap` is also provided,
      * both values are multiplied.
      *
-     * @type {number}
      * @default 1
      */
     roughness: number;
@@ -76,7 +30,6 @@ export class MeshStandardMaterial extends Material {
      * A value between `0.0` and `1.0` could be used for a rusty metal look.
      * If `metalnessMap` is also provided, both values are multiplied.
      *
-     * @type {number}
      * @default 0
      */
     metalness: number;
@@ -85,21 +38,18 @@ export class MeshStandardMaterial extends Material {
      * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map
      * color is modulated by the diffuse `color`.
      *
-     * @type {?Texture}
      * @default null
      */
     map: Texture | null;
     /**
      * The light map. Requires a second set of UVs.
      *
-     * @type {?Texture}
      * @default null
      */
     lightMap: Texture | null;
     /**
      * Intensity of the baked light.
      *
-     * @type {number}
      * @default 1
      */
     lightMapIntensity: number;
@@ -107,7 +57,6 @@ export class MeshStandardMaterial extends Material {
      * The red channel of this texture is used as the ambient occlusion map.
      * Requires a second set of UVs.
      *
-     * @type {?Texture}
      * @default null
      */
     aoMap: Texture | null;
@@ -116,7 +65,6 @@ export class MeshStandardMaterial extends Material {
      * disables ambient occlusion. Where intensity is `1` and the AO map's
      * red channel is also `1`, ambient light is fully occluded on a surface.
      *
-     * @type {number}
      * @default 1
      */
     aoMapIntensity: number;
@@ -124,14 +72,12 @@ export class MeshStandardMaterial extends Material {
      * Emissive (light) color of the material, essentially a solid color
      * unaffected by other lighting.
      *
-     * @type {Color}
      * @default (0,0,0)
      */
     emissive: Color;
     /**
      * Intensity of the emissive light. Modulates the emissive color.
      *
-     * @type {number}
      * @default 1
      */
     emissiveIntensity: number;
@@ -140,7 +86,6 @@ export class MeshStandardMaterial extends Material {
      * emissive color and the emissive intensity. If you have an emissive map,
      * be sure to set the emissive color to something other than black.
      *
-     * @type {?Texture}
      * @default null
      */
     emissiveMap: Texture | null;
@@ -150,14 +95,12 @@ export class MeshStandardMaterial extends Material {
      * the geometry of the object, only the lighting. If a normal map is defined
      * this will be ignored.
      *
-     * @type {?Texture}
      * @default null
      */
     bumpMap: Texture | null;
     /**
      * How much the bump map affects the material. Typical range is `[0,1]`.
      *
-     * @type {number}
      * @default 1
      */
     bumpScale: number;
@@ -169,21 +112,18 @@ export class MeshStandardMaterial extends Material {
      * convention, the `y` component of `normalScale` should be negated to compensate
      * for the different handedness.
      *
-     * @type {?Texture}
      * @default null
      */
     normalMap: Texture | null;
     /**
      * The type of normal map.
      *
-     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}
      * @default TangentSpaceNormalMap
      */
-    normalMapType: (number | ObjectSpaceNormalMap);
+    normalMapType: NormalMapTypes;
     /**
      * How much the normal map affects the material. Typical value range is `[0,1]`.
      *
-     * @type {Vector2}
      * @default (1,1)
      */
     normalScale: Vector2;
@@ -195,7 +135,6 @@ export class MeshStandardMaterial extends Material {
      * of each pixel (white being the highest) is mapped against, and
      * repositions, the vertices of the mesh.
      *
-     * @type {?Texture}
      * @default null
      */
     displacementMap: Texture | null;
@@ -204,7 +143,6 @@ export class MeshStandardMaterial extends Material {
      * displacement, and white is maximum displacement). Without a displacement
      * map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementScale: number;
@@ -213,7 +151,6 @@ export class MeshStandardMaterial extends Material {
      * The bias is added to the scaled sample of the displacement map.
      * Without a displacement map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementBias: number;
@@ -221,7 +158,6 @@ export class MeshStandardMaterial extends Material {
      * The green channel of this texture is used to alter the roughness of the
      * material.
      *
-     * @type {?Texture}
      * @default null
      */
     roughnessMap: Texture | null;
@@ -229,7 +165,6 @@ export class MeshStandardMaterial extends Material {
      * The blue channel of this texture is used to alter the metalness of the
      * material.
      *
-     * @type {?Texture}
      * @default null
      */
     metalnessMap: Texture | null;
@@ -243,7 +178,6 @@ export class MeshStandardMaterial extends Material {
      * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and
      * luminance/alpha textures will also still work as expected.
      *
-     * @type {?Texture}
      * @default null
      */
     alphaMap: Texture | null;
@@ -251,28 +185,24 @@ export class MeshStandardMaterial extends Material {
      * The environment map. To ensure a physically correct rendering, environment maps
      * are internally pre-processed with {@link PMREMGenerator}.
      *
-     * @type {?Texture}
      * @default null
      */
     envMap: Texture | null;
     /**
      * The rotation of the environment map in radians.
      *
-     * @type {Euler}
      * @default (0,0,0)
      */
     envMapRotation: Euler;
     /**
      * Scales the effect of the environment map by multiplying its color.
      *
-     * @type {number}
      * @default 1
      */
     envMapIntensity: number;
     /**
      * Renders the geometry as a wireframe.
      *
-     * @type {boolean}
      * @default false
      */
     wireframe: boolean;
@@ -281,7 +211,6 @@ export class MeshStandardMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {number}
      * @default 1
      */
     wireframeLinewidth: number;
@@ -290,7 +219,6 @@ export class MeshStandardMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {('round'|'bevel'|'miter')}
      * @default 'round'
      */
     wireframeLinecap: ("round" | "bevel" | "miter");
@@ -299,27 +227,76 @@ export class MeshStandardMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {('round'|'bevel'|'miter')}
      * @default 'round'
      */
     wireframeLinejoin: ("round" | "bevel" | "miter");
     /**
      * Whether the material is rendered with flat shading or not.
      *
-     * @type {boolean}
      * @default false
      */
     flatShading: boolean;
     /**
      * Whether the material is affected by fog or not.
      *
-     * @type {boolean}
      * @default true
      */
     fog: boolean;
-    copy(source: any): this;
 }
-import { Material } from './Material.js';
-import { Color } from '../math/Color.js';
-import { Vector2 } from '../math/Vector2.js';
-import { Euler } from '../math/Euler.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshStandardMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshStandardMaterialProperties>> {}
+
+/**
+ * A standard physically based material, using Metallic-Roughness workflow.
+ *
+ * Physically based rendering (PBR) has recently become the standard in many
+ * 3D applications, such as [Unity]{@link https://blogs.unity3d.com/2014/10/29/physically-based-shading-in-unity-5-a-primer/},
+ * [Unreal]{@link https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/PhysicallyBased/} and
+ * [3D Studio Max]{@link http://area.autodesk.com/blogs/the-3ds-max-blog/what039s-new-for-rendering-in-3ds-max-2017}.
+ *
+ * This approach differs from older approaches in that instead of using
+ * approximations for the way in which light interacts with a surface, a
+ * physically correct model is used. The idea is that, instead of tweaking
+ * materials to look good under specific lighting, a material can be created
+ * that will react 'correctly' under all lighting scenarios.
+ *
+ * In practice this gives a more accurate and realistic looking result than
+ * the {@link MeshLambertMaterial} or {@link MeshPhongMaterial}, at the cost of
+ * being somewhat more computationally expensive. `MeshStandardMaterial` uses per-fragment
+ * shading.
+ *
+ * Note that for best results you should always specify an environment map when using this material.
+ *
+ * For a non-technical introduction to the concept of PBR and how to set up a
+ * PBR material, check out these articles by the people at [marmoset]{@link https://www.marmoset.co}:
+ *
+ * - [Basic Theory of Physically Based Rendering]{@link https://www.marmoset.co/posts/basic-theory-of-physically-based-rendering/}
+ * - [Physically Based Rendering and You Can Too]{@link https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/}
+ *
+ * Technical details of the approach used in three.js (and most other PBR systems) can be found is this
+ * [paper from Disney]{@link https://media.disneyanimation.com/uploads/production/publication_asset/48/asset/s2012_pbs_disney_brdf_notes_v3.pdf}
+ * (pdf), by Brent Burley.
+ */
+export class MeshStandardMaterial extends Material {
+    /**
+     * Constructs a new mesh standard material.
+     *
+     * @param {Object} [parameters] - An object with one or more properties
+     * defining the material's appearance. Any property of the material
+     * (including any property from inherited materials) can be passed
+     * in here. Color values can be passed any type of value accepted
+     * by {@link Color#set}.
+     */
+    constructor(parameters?: MeshStandardMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isMeshStandardMaterial: boolean;
+    setValues(values?: MeshStandardMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshStandardMaterial extends MeshStandardMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/MeshToonMaterial.d.ts b/jsdoc-testing/jsdoc/materials/MeshToonMaterial.d.ts
index c60ff377..8c9357ab 100644
--- a/jsdoc-testing/jsdoc/materials/MeshToonMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/MeshToonMaterial.d.ts
@@ -1,35 +1,13 @@
-/**
- * A material implementing toon shading.
- *
- * @augments Material
- */
-export class MeshToonMaterial extends Material {
-    /**
-     * Constructs a new mesh toon material.
-     *
-     * @param {Object} [parameters] - An object with one or more properties
-     * defining the material's appearance. Any property of the material
-     * (including any property from inherited materials) can be passed
-     * in here. Color values can be passed any type of value accepted
-     * by {@link Color#set}.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isMeshToonMaterial: boolean;
-    defines: {
-        TOON: string;
-    };
-    type: string;
+import { MapColorPropertiesToColorRepresentations, Material, MaterialProperties } from './Material.js';
+import { Color } from '../math/Color.js';
+import { Vector2 } from '../math/Vector2.js';
+import { Texture } from '../textures/Texture.js';
+import { NormalMapTypes } from '../constants.js';
+
+export interface MeshToonMaterialProperties extends MaterialProperties {
     /**
      * Color of the material.
      *
-     * @type {Color}
      * @default (1,1,1)
      */
     color: Color;
@@ -38,7 +16,6 @@ export class MeshToonMaterial extends Material {
      * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map
      * color is modulated by the diffuse `color`.
      *
-     * @type {?Texture}
      * @default null
      */
     map: Texture | null;
@@ -47,21 +24,18 @@ export class MeshToonMaterial extends Material {
      * {@link Texture#minFilter} and {@link Texture#magFilter} to {@linkNearestFilter}
      * when using this type of texture.
      *
-     * @type {?Texture}
      * @default null
      */
     gradientMap: Texture | null;
     /**
      * The light map. Requires a second set of UVs.
      *
-     * @type {?Texture}
      * @default null
      */
     lightMap: Texture | null;
     /**
      * Intensity of the baked light.
      *
-     * @type {number}
      * @default 1
      */
     lightMapIntensity: number;
@@ -69,7 +43,6 @@ export class MeshToonMaterial extends Material {
      * The red channel of this texture is used as the ambient occlusion map.
      * Requires a second set of UVs.
      *
-     * @type {?Texture}
      * @default null
      */
     aoMap: Texture | null;
@@ -78,7 +51,6 @@ export class MeshToonMaterial extends Material {
      * disables ambient occlusion. Where intensity is `1` and the AO map's
      * red channel is also `1`, ambient light is fully occluded on a surface.
      *
-     * @type {number}
      * @default 1
      */
     aoMapIntensity: number;
@@ -86,14 +58,12 @@ export class MeshToonMaterial extends Material {
      * Emissive (light) color of the material, essentially a solid color
      * unaffected by other lighting.
      *
-     * @type {Color}
      * @default (0,0,0)
      */
     emissive: Color;
     /**
      * Intensity of the emissive light. Modulates the emissive color.
      *
-     * @type {number}
      * @default 1
      */
     emissiveIntensity: number;
@@ -102,7 +72,6 @@ export class MeshToonMaterial extends Material {
      * emissive color and the emissive intensity. If you have an emissive map,
      * be sure to set the emissive color to something other than black.
      *
-     * @type {?Texture}
      * @default null
      */
     emissiveMap: Texture | null;
@@ -112,14 +81,12 @@ export class MeshToonMaterial extends Material {
      * the geometry of the object, only the lighting. If a normal map is defined
      * this will be ignored.
      *
-     * @type {?Texture}
      * @default null
      */
     bumpMap: Texture | null;
     /**
      * How much the bump map affects the material. Typical range is `[0,1]`.
      *
-     * @type {number}
      * @default 1
      */
     bumpScale: number;
@@ -131,21 +98,18 @@ export class MeshToonMaterial extends Material {
      * convention, the `y` component of `normalScale` should be negated to compensate
      * for the different handedness.
      *
-     * @type {?Texture}
      * @default null
      */
     normalMap: Texture | null;
     /**
      * The type of normal map.
      *
-     * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}
      * @default TangentSpaceNormalMap
      */
-    normalMapType: (number | ObjectSpaceNormalMap);
+    normalMapType: NormalMapTypes;
     /**
      * How much the normal map affects the material. Typical value range is `[0,1]`.
      *
-     * @type {Vector2}
      * @default (1,1)
      */
     normalScale: Vector2;
@@ -157,7 +121,6 @@ export class MeshToonMaterial extends Material {
      * of each pixel (white being the highest) is mapped against, and
      * repositions, the vertices of the mesh.
      *
-     * @type {?Texture}
      * @default null
      */
     displacementMap: Texture | null;
@@ -166,7 +129,6 @@ export class MeshToonMaterial extends Material {
      * displacement, and white is maximum displacement). Without a displacement
      * map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementScale: number;
@@ -175,7 +137,6 @@ export class MeshToonMaterial extends Material {
      * The bias is added to the scaled sample of the displacement map.
      * Without a displacement map set, this value is not applied.
      *
-     * @type {number}
      * @default 0
      */
     displacementBias: number;
@@ -189,14 +150,12 @@ export class MeshToonMaterial extends Material {
      * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and
      * luminance/alpha textures will also still work as expected.
      *
-     * @type {?Texture}
      * @default null
      */
     alphaMap: Texture | null;
     /**
      * Renders the geometry as a wireframe.
      *
-     * @type {boolean}
      * @default false
      */
     wireframe: boolean;
@@ -205,7 +164,6 @@ export class MeshToonMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {number}
      * @default 1
      */
     wireframeLinewidth: number;
@@ -214,7 +172,6 @@ export class MeshToonMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {('round'|'bevel'|'miter')}
      * @default 'round'
      */
     wireframeLinecap: ("round" | "bevel" | "miter");
@@ -223,19 +180,42 @@ export class MeshToonMaterial extends Material {
      *
      * Can only be used with {@link SVGRenderer}.
      *
-     * @type {('round'|'bevel'|'miter')}
      * @default 'round'
      */
     wireframeLinejoin: ("round" | "bevel" | "miter");
     /**
      * Whether the material is affected by fog or not.
      *
-     * @type {boolean}
      * @default true
      */
     fog: boolean;
-    copy(source: any): this;
 }
-import { Material } from './Material.js';
-import { Color } from '../math/Color.js';
-import { Vector2 } from '../math/Vector2.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshToonMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshToonMaterialProperties>> {}
+
+/**
+ * A material implementing toon shading.
+ */
+export class MeshToonMaterial extends Material {
+    /**
+     * Constructs a new mesh toon material.
+     *
+     * @param {Object} [parameters] - An object with one or more properties
+     * defining the material's appearance. Any property of the material
+     * (including any property from inherited materials) can be passed
+     * in here. Color values can be passed any type of value accepted
+     * by {@link Color#set}.
+     */
+    constructor(parameters?: MeshToonMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isMeshToonMaterial: boolean;
+    setValues(values?: MeshToonMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshToonMaterial extends MeshToonMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/PointsMaterial.d.ts b/jsdoc-testing/jsdoc/materials/PointsMaterial.d.ts
index d1342f7b..ec19fe48 100644
--- a/jsdoc-testing/jsdoc/materials/PointsMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/PointsMaterial.d.ts
@@ -1,52 +1,11 @@
-/**
- * A material for rendering point primitives.
- *
- * Materials define the appearance of renderable 3D objects.
- *
- * ```js
- * const vertices = [];
- *
- * for ( let i = 0; i < 10000; i ++ ) {
- * 	const x = THREE.MathUtils.randFloatSpread( 2000 );
- * 	const y = THREE.MathUtils.randFloatSpread( 2000 );
- * 	const z = THREE.MathUtils.randFloatSpread( 2000 );
- *
- * 	vertices.push( x, y, z );
- * }
- *
- * const geometry = new THREE.BufferGeometry();
- * geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );
- * const material = new THREE.PointsMaterial( { color: 0x888888 } );
- * const points = new THREE.Points( geometry, material );
- * scene.add( points );
- * ```
- *
- * @augments Material
- */
-export class PointsMaterial extends Material {
-    /**
-     * Constructs a new points material.
-     *
-     * @param {Object} [parameters] - An object with one or more properties
-     * defining the material's appearance. Any property of the material
-     * (including any property from inherited materials) can be passed
-     * in here. Color values can be passed any type of value accepted
-     * by {@link Color#set}.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isPointsMaterial: boolean;
-    type: string;
+import { MapColorPropertiesToColorRepresentations, Material, MaterialProperties } from './Material.js';
+import { Color } from '../math/Color.js';
+import { Texture } from '../textures/Texture.js';
+
+export interface PointsMaterialProperties extends MaterialProperties {
     /**
      * Color of the material.
      *
-     * @type {Color}
      * @default (1,1,1)
      */
     color: Color;
@@ -55,7 +14,6 @@ export class PointsMaterial extends Material {
      * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map
      * color is modulated by the diffuse `color`.
      *
-     * @type {?Texture}
      * @default null
      */
     map: Texture | null;
@@ -69,7 +27,6 @@ export class PointsMaterial extends Material {
      * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and
      * luminance/alpha textures will also still work as expected.
      *
-     * @type {?Texture}
      * @default null
      */
     alphaMap: Texture | null;
@@ -78,25 +35,68 @@ export class PointsMaterial extends Material {
      *
      * Might be capped if the value exceeds hardware dependent parameters like [gl.ALIASED_POINT_SIZE_RANGE]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getParamete}.
      *
-     * @type {number}
      * @default 1
      */
     size: number;
     /**
      * Specifies whether size of individual points is attenuated by the camera depth (perspective camera only).
      *
-     * @type {boolean}
      * @default true
      */
     sizeAttenuation: boolean;
     /**
      * Whether the material is affected by fog or not.
      *
-     * @type {boolean}
      * @default true
      */
     fog: boolean;
-    copy(source: any): this;
 }
-import { Material } from './Material.js';
-import { Color } from '../math/Color.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface PointsMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<PointsMaterialProperties>> {}
+
+/**
+ * A material for rendering point primitives.
+ *
+ * Materials define the appearance of renderable 3D objects.
+ *
+ * ```js
+ * const vertices = [];
+ *
+ * for ( let i = 0; i < 10000; i ++ ) {
+ * 	const x = THREE.MathUtils.randFloatSpread( 2000 );
+ * 	const y = THREE.MathUtils.randFloatSpread( 2000 );
+ * 	const z = THREE.MathUtils.randFloatSpread( 2000 );
+ *
+ * 	vertices.push( x, y, z );
+ * }
+ *
+ * const geometry = new THREE.BufferGeometry();
+ * geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );
+ * const material = new THREE.PointsMaterial( { color: 0x888888 } );
+ * const points = new THREE.Points( geometry, material );
+ * scene.add( points );
+ * ```
+ */
+export class PointsMaterial extends Material {
+    /**
+     * Constructs a new points material.
+     *
+     * @param {Object} [parameters] - An object with one or more properties
+     * defining the material's appearance. Any property of the material
+     * (including any property from inherited materials) can be passed
+     * in here. Color values can be passed any type of value accepted
+     * by {@link Color#set}.
+     */
+    constructor(parameters?: PointsMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isPointsMaterial: boolean;
+    setValues(values?: PointsMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface PointsMaterial extends PointsMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/RawShaderMaterial.d.ts b/jsdoc-testing/jsdoc/materials/RawShaderMaterial.d.ts
index 6f5a5c8a..9a703d74 100644
--- a/jsdoc-testing/jsdoc/materials/RawShaderMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/RawShaderMaterial.d.ts
@@ -1,108 +1,17 @@
-declare const RawShaderMaterial_base: {
-    new (parameters?: Object): {
-        readonly isShaderMaterial: boolean;
-        type: string;
-        defines: Object;
-        uniforms: Object;
-        uniformsGroups: Array<UniformsGroup>;
-        vertexShader: string;
-        fragmentShader: string;
-        linewidth: number;
-        wireframe: boolean;
-        wireframeLinewidth: number;
-        fog: boolean;
-        lights: boolean;
-        clipping: boolean;
-        forceSinglePass: boolean;
-        extensions: {
-            clipCullDistance: false;
-            multiDraw: false;
-        };
-        defaultAttributeValues: Object;
-        index0AttributeName: string | undefined;
-        uniformsNeedUpdate: boolean;
-        glslVersion: (GLSL1 | GLSL3) | null;
-        copy(source: any): /*elided*/ any;
-        toJSON(meta: any): Object;
-        readonly isMaterial: boolean;
-        readonly uuid: string;
-        name: string;
-        blending: (NoBlending | number | AdditiveBlending | SubtractiveBlending | MultiplyBlending | CustomBlending);
-        side: (number | BackSide | DoubleSide);
-        vertexColors: boolean;
-        opacity: number;
-        transparent: boolean;
-        alphaHash: boolean;
-        blendSrc: (ZeroFactor | OneFactor | SrcColorFactor | OneMinusSrcColorFactor | number | number | DstAlphaFactor | OneMinusDstAlphaFactor | DstColorFactor | OneMinusDstColorFactor | SrcAlphaSaturateFactor | ConstantColorFactor | OneMinusConstantColorFactor | ConstantAlphaFactor | OneMinusConstantAlphaFactor);
-        blendDst: (ZeroFactor | OneFactor | SrcColorFactor | OneMinusSrcColorFactor | number | number | DstAlphaFactor | OneMinusDstAlphaFactor | DstColorFactor | OneMinusDstColorFactor | SrcAlphaSaturateFactor | ConstantColorFactor | OneMinusConstantColorFactor | ConstantAlphaFactor | OneMinusConstantAlphaFactor);
-        blendEquation: (number | SubtractEquation | ReverseSubtractEquation | MinEquation | MaxEquation);
-        blendSrcAlpha: (ZeroFactor | OneFactor | SrcColorFactor | OneMinusSrcColorFactor | number | number | DstAlphaFactor | OneMinusDstAlphaFactor | DstColorFactor | OneMinusDstColorFactor | SrcAlphaSaturateFactor | ConstantColorFactor | OneMinusConstantColorFactor | ConstantAlphaFactor | OneMinusConstantAlphaFactor) | null;
-        blendDstAlpha: (ZeroFactor | OneFactor | SrcColorFactor | OneMinusSrcColorFactor | number | number | DstAlphaFactor | OneMinusDstAlphaFactor | DstColorFactor | OneMinusDstColorFactor | SrcAlphaSaturateFactor | ConstantColorFactor | OneMinusConstantColorFactor | ConstantAlphaFactor | OneMinusConstantAlphaFactor) | null;
-        blendEquationAlpha: (number | SubtractEquation | ReverseSubtractEquation | MinEquation | MaxEquation) | null;
-        blendColor: import("../math/Color.js").Color;
-        blendAlpha: number;
-        depthFunc: (NeverDepth | AlwaysDepth | LessDepth | number | EqualDepth | GreaterEqualDepth | GreaterDepth | NotEqualDepth);
-        depthTest: boolean;
-        depthWrite: boolean;
-        stencilWriteMask: number;
-        stencilFunc: NeverStencilFunc | LessStencilFunc | EqualStencilFunc | LessEqualStencilFunc | GreaterStencilFunc | NotEqualStencilFunc | GreaterEqualStencilFunc | number;
-        stencilRef: number;
-        stencilFuncMask: number;
-        stencilFail: ZeroStencilOp | number | ReplaceStencilOp | IncrementStencilOp | DecrementStencilOp | IncrementWrapStencilOp | DecrementWrapStencilOp | InvertStencilOp;
-        stencilZFail: ZeroStencilOp | number | ReplaceStencilOp | IncrementStencilOp | DecrementStencilOp | IncrementWrapStencilOp | DecrementWrapStencilOp | InvertStencilOp;
-        stencilZPass: ZeroStencilOp | number | ReplaceStencilOp | IncrementStencilOp | DecrementStencilOp | IncrementWrapStencilOp | DecrementWrapStencilOp | InvertStencilOp;
-        stencilWrite: boolean;
-        clippingPlanes: Array<Plane> | null;
-        clipIntersection: boolean;
-        clipShadows: boolean;
-        shadowSide: (number | BackSide | DoubleSide) | null;
-        colorWrite: boolean;
-        precision: ("highp" | "mediump" | "lowp") | null;
-        polygonOffset: boolean;
-        polygonOffsetFactor: number;
-        polygonOffsetUnits: number;
-        dithering: boolean;
-        alphaToCoverage: boolean;
-        premultipliedAlpha: boolean;
-        allowOverride: boolean;
-        visible: boolean;
-        toneMapped: boolean;
-        userData: Object;
-        readonly version: number;
-        _alphaTest: number;
-        get alphaTest(): number;
-        set alphaTest(value: number);
-        onBeforeRender(): void;
-        onBeforeCompile(): void;
-        customProgramCacheKey(): string;
-        setValues(values?: Object): void;
-        clone(): Material;
-        dispose(): void;
-        set needsUpdate(value: boolean);
-        addEventListener(type: string, listener: Function): void;
-        _listeners: {} | undefined;
-        hasEventListener(type: string, listener: Function): boolean;
-        removeEventListener(type: string, listener: Function): void;
-        dispatchEvent(event: Object): void;
-    };
-};
+import { ShaderMaterial } from './ShaderMaterial.js';
+
 /**
  * This class works just like {@link ShaderMaterial}, except that definitions
  * of built-in uniforms and attributes are not automatically prepended to the
  * GLSL shader code.
  *
  * `RawShaderMaterial` can only be used with {@link WebGLRenderer}.
- *
- * @augments ShaderMaterial
  */
-export class RawShaderMaterial extends RawShaderMaterial_base {
+export class RawShaderMaterial extends ShaderMaterial {
     /**
      * This flag can be used for type testing.
      *
-     * @type {boolean}
-     * @readonly
      * @default true
      */
     readonly isRawShaderMaterial: boolean;
 }
-export {};
diff --git a/jsdoc-testing/jsdoc/materials/ShaderMaterial.d.ts b/jsdoc-testing/jsdoc/materials/ShaderMaterial.d.ts
index 760dec6e..ea3bd1d1 100644
--- a/jsdoc-testing/jsdoc/materials/ShaderMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/ShaderMaterial.d.ts
@@ -1,84 +1,15 @@
-/**
- * ~Shader
- */
-export type ShaderMaterial = {
-    /**
-     * - The name of the shader.
-     */
-    name: string;
-    /**
-     * - The uniforms of the shader.
-     */
-    uniforms: {
-        [x: string]: Uniform;
-    };
-    /**
-     * - The defines of the shader.
-     */
-    defines: {
-        [x: string]: any;
-    };
-    /**
-     * - The vertex shader code.
-     */
-    vertexShader: string;
-    /**
-     * - The fragment shader code.
-     */
-    fragmentShader: string;
-};
-/**
- * A material rendered with custom shaders. A shader is a small program written in GLSL.
- * that runs on the GPU. You may want to use a custom shader if you need to implement an
- * effect not included with any of the built-in materials.
- *
- * There are the following notes to bear in mind when using a `ShaderMaterial`:
- *
- * - `ShaderMaterial` can only be used with {@link WebGLRenderer}.
- * - Built in attributes and uniforms are passed to the shaders along with your code. If
- * you don't want that, use {@link RawShaderMaterial} instead.
- * - You can use the directive `#pragma unroll_loop_start` and `#pragma unroll_loop_end`
- * in order to unroll a `for` loop in GLSL by the shader preprocessor. The directive has
- * to be placed right above the loop. The loop formatting has to correspond to a defined standard.
- *   - The loop has to be [normalized]{@link https://en.wikipedia.org/wiki/Normalized_loop}.
- *   - The loop variable has to be *i*.
- *   - The value `UNROLLED_LOOP_INDEX` will be replaced with the explicitly
- * value of *i* for the given iteration and can be used in preprocessor
- * statements.
- *
- * ```js
- * const material = new THREE.ShaderMaterial( {
- * 	uniforms: {
- * 		time: { value: 1.0 },
- * 		resolution: { value: new THREE.Vector2() }
- * 	},
- * 	vertexShader: document.getElementById( 'vertexShader' ).textContent,
- * 	fragmentShader: document.getElementById( 'fragmentShader' ).textContent
- * } );
- * ```
- *
- * @augments Material
- */
-export class ShaderMaterial extends Material {
-    /**
-     * Constructs a new shader material.
-     *
-     * @param {Object} [parameters] - An object with one or more properties
-     * defining the material's appearance. Any property of the material
-     * (including any property from inherited materials) can be passed
-     * in here. Color values can be passed any type of value accepted
-     * by {@link Color#set}.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isShaderMaterial: boolean;
-    type: string;
+import { MapColorPropertiesToColorRepresentations, Material, MaterialJSON, MaterialProperties } from './Material.js';
+import { GLSLVersion } from "../constants.js";
+import { JSONMeta } from "../core/Object3D.js";
+import { Matrix3Tuple } from "../math/Matrix3.js";
+import { Matrix4Tuple } from "../math/Matrix4.js";
+import { Vector2Tuple } from "../math/Vector2.js";
+import { Vector3Tuple } from "../math/Vector3.js";
+import { Vector4Tuple } from "../math/Vector4.js";
+import { IUniform } from "../renderers/shaders/UniformsLib.js";
+import { UniformsGroup } from "../core/UniformsGroup.js";
+
+export interface ShaderMaterialProperties extends MaterialProperties {
     /**
      * Defines custom constants using `#define` directives within the GLSL code
      * for both the vertex shader and the fragment shader; each key/value pair
@@ -94,10 +25,8 @@ export class ShaderMaterial extends Material {
      * #define FOO 15
      * #define BAR true
      * ```
-     *
-     * @type {Object}
      */
-    defines: Object;
+    defines: { [key: string]: any };
     /**
      * An object of the form:
      * ```js
@@ -117,26 +46,18 @@ export class ShaderMaterial extends Material {
      * the uniform, as defined in the GLSL code. Note that uniforms are refreshed
      * on every frame, so updating the value of the uniform will immediately
      * update the value available to the GLSL code.
-     *
-     * @type {Object}
      */
-    uniforms: Object;
+    uniforms: { [uniform: string]: IUniform };
     /**
      * An array holding uniforms groups for configuring UBOs.
-     *
-     * @type {Array<UniformsGroup>}
      */
     uniformsGroups: Array<UniformsGroup>;
     /**
      * Vertex shader GLSL code. This is the actual code for the shader.
-     *
-     * @type {string}
      */
     vertexShader: string;
     /**
      * Fragment shader GLSL code. This is the actual code for the shader.
-     *
-     * @type {string}
      */
     fragmentShader: string;
     /**
@@ -145,14 +66,12 @@ export class ShaderMaterial extends Material {
      * WebGL and WebGPU ignore this setting and always render line primitives with a
      * width of one pixel.
      *
-     * @type {number}
      * @default 1
      */
     linewidth: number;
     /**
      * Renders the geometry as a wireframe.
      *
-     * @type {boolean}
      * @default false
      */
     wireframe: boolean;
@@ -162,7 +81,6 @@ export class ShaderMaterial extends Material {
      * WebGL and WebGPU ignore this property and always render
      * 1 pixel wide lines.
      *
-     * @type {number}
      * @default 1
      */
     wireframeLinewidth: number;
@@ -170,7 +88,6 @@ export class ShaderMaterial extends Material {
      * Define whether the material color is affected by global fog settings; `true`
      * to pass fog uniforms to the shader.
      *
-     * @type {boolean}
      * @default false
      */
     fog: boolean;
@@ -178,7 +95,6 @@ export class ShaderMaterial extends Material {
      * Defines whether this material uses lighting; `true` to pass uniform data
      * related to lighting to this shader.
      *
-     * @type {boolean}
      * @default false
      */
     lights: boolean;
@@ -186,7 +102,6 @@ export class ShaderMaterial extends Material {
      * Defines whether this material supports clipping; `true` to let the renderer
      * pass the clippingPlanes uniform.
      *
-     * @type {boolean}
      * @default false
      */
     clipping: boolean;
@@ -195,12 +110,10 @@ export class ShaderMaterial extends Material {
      *
      * - clipCullDistance: set to `true` to use vertex shader clipping
      * - multiDraw: set to `true` to use vertex shader multi_draw / enable gl_DrawID
-     *
-     * @type {{clipCullDistance:false,multiDraw:false}}
      */
     extensions: {
-        clipCullDistance: false;
-        multiDraw: false;
+        clipCullDistance: boolean;
+        multiDraw: boolean;
     };
     /**
      * When the rendered geometry doesn't include these attributes but the
@@ -210,15 +123,16 @@ export class ShaderMaterial extends Material {
      * - color: [ 1, 1, 1 ]
      * - uv: [ 0, 0 ]
      * - uv1: [ 0, 0 ]
-     *
-     * @type {Object}
      */
-    defaultAttributeValues: Object;
+    defaultAttributeValues: {
+        color: [number, number, number];
+        uv: [number, number];
+        uv1: [number, number];
+    };
     /**
      * If set, this calls [gl.bindAttribLocation]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindAttribLocation}
      * to bind a generic vertex index to an attribute variable.
      *
-     * @type {string|undefined}
      * @default undefined
      */
     index0AttributeName: string | undefined;
@@ -226,18 +140,110 @@ export class ShaderMaterial extends Material {
      * Can be used to force a uniform update while changing uniforms in
      * {@link Object3D#onBeforeRender}.
      *
-     * @type {boolean}
      * @default false
      */
     uniformsNeedUpdate: boolean;
     /**
      * Defines the GLSL version of custom shader code.
      *
-     * @type {?(GLSL1|GLSL3)}
      * @default null
      */
-    glslVersion: (GLSL1 | GLSL3) | null;
-    copy(source: any): this;
-    toJSON(meta: any): Object;
+    glslVersion: GLSLVersion | null;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface ShaderMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<ShaderMaterialProperties>> {}
+
+export type ShaderMaterialUniformJSON = {
+    type: "t";
+    value: string;
+} | {
+    type: "c";
+    value: number;
+} | {
+    type: "v2";
+    value: Vector2Tuple;
+} | {
+    type: "v3";
+    value: Vector3Tuple;
+} | {
+    type: "v4";
+    value: Vector4Tuple;
+} | {
+    type: "m3";
+    value: Matrix3Tuple;
+} | {
+    type: "m4";
+    value: Matrix4Tuple;
+} | {
+    value: unknown;
+};
+
+export interface ShaderMaterialJSON extends MaterialJSON {
+    glslVersion: number | null;
+    uniforms: Record<string, ShaderMaterialUniformJSON>;
+
+    defines?: Record<string, unknown>;
+
+    vertexShader: string;
+    fragmentShader: string;
+
+    lights: boolean;
+    clipping: boolean;
+
+    extensions?: Record<string, boolean>;
+}
+
+/**
+ * A material rendered with custom shaders. A shader is a small program written in GLSL.
+ * that runs on the GPU. You may want to use a custom shader if you need to implement an
+ * effect not included with any of the built-in materials.
+ *
+ * There are the following notes to bear in mind when using a `ShaderMaterial`:
+ *
+ * - `ShaderMaterial` can only be used with {@link WebGLRenderer}.
+ * - Built in attributes and uniforms are passed to the shaders along with your code. If
+ * you don't want that, use {@link RawShaderMaterial} instead.
+ * - You can use the directive `#pragma unroll_loop_start` and `#pragma unroll_loop_end`
+ * in order to unroll a `for` loop in GLSL by the shader preprocessor. The directive has
+ * to be placed right above the loop. The loop formatting has to correspond to a defined standard.
+ *   - The loop has to be [normalized]{@link https://en.wikipedia.org/wiki/Normalized_loop}.
+ *   - The loop variable has to be *i*.
+ *   - The value `UNROLLED_LOOP_INDEX` will be replaced with the explicitly
+ * value of *i* for the given iteration and can be used in preprocessor
+ * statements.
+ *
+ * ```js
+ * const material = new THREE.ShaderMaterial( {
+ * 	uniforms: {
+ * 		time: { value: 1.0 },
+ * 		resolution: { value: new THREE.Vector2() }
+ * 	},
+ * 	vertexShader: document.getElementById( 'vertexShader' ).textContent,
+ * 	fragmentShader: document.getElementById( 'fragmentShader' ).textContent
+ * } );
+ * ```
+ */
+export class ShaderMaterial extends Material {
+    /**
+     * Constructs a new shader material.
+     *
+     * @param {Object} [parameters] - An object with one or more properties
+     * defining the material's appearance. Any property of the material
+     * (including any property from inherited materials) can be passed
+     * in here. Color values can be passed any type of value accepted
+     * by {@link Color#set}.
+     */
+    constructor(parameters?: ShaderMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isShaderMaterial: boolean;
+    setValues(values?: ShaderMaterialParameters): void;
+    toJSON(meta?: JSONMeta): ShaderMaterialJSON;
 }
-import { Material } from './Material.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface ShaderMaterial extends ShaderMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/ShadowMaterial.d.ts b/jsdoc-testing/jsdoc/materials/ShadowMaterial.d.ts
index 2e66a566..6f44ea4e 100644
--- a/jsdoc-testing/jsdoc/materials/ShadowMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/ShadowMaterial.d.ts
@@ -1,3 +1,24 @@
+import { MapColorPropertiesToColorRepresentations, Material, MaterialProperties } from './Material.js';
+import { Color } from '../math/Color.js';
+
+export interface ShadowMaterialProperties extends MaterialProperties {
+    /**
+     * Color of the material.
+     *
+     * @default (0,0,0)
+     */
+    color: Color;
+    /**
+     * Whether the material is affected by fog or not.
+     *
+     * @default true
+     */
+    fog: boolean;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface ShadowMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<ShadowMaterialProperties>> {}
+
 /**
  * This material can receive shadows, but otherwise is completely transparent.
  *
@@ -13,8 +34,6 @@
  * plane.receiveShadow = true;
  * scene.add( plane );
  * ```
- *
- * @augments Material
  */
 export class ShadowMaterial extends Material {
     /**
@@ -26,31 +45,15 @@ export class ShadowMaterial extends Material {
      * in here. Color values can be passed any type of value accepted
      * by {@link Color#set}.
      */
-    constructor(parameters?: Object);
+    constructor(parameters?: ShadowMaterialParameters);
     /**
      * This flag can be used for type testing.
      *
-     * @type {boolean}
-     * @readonly
      * @default true
      */
     readonly isShadowMaterial: boolean;
-    type: string;
-    /**
-     * Color of the material.
-     *
-     * @type {Color}
-     * @default (0,0,0)
-     */
-    color: Color;
-    /**
-     * Whether the material is affected by fog or not.
-     *
-     * @type {boolean}
-     * @default true
-     */
-    fog: boolean;
-    copy(source: any): this;
+    setValues(values?: ShadowMaterialParameters): void;
 }
-import { Material } from './Material.js';
-import { Color } from '../math/Color.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface ShadowMaterial extends ShadowMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/SpriteMaterial.d.ts b/jsdoc-testing/jsdoc/materials/SpriteMaterial.d.ts
index e44d5d72..f676390c 100644
--- a/jsdoc-testing/jsdoc/materials/SpriteMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/SpriteMaterial.d.ts
@@ -1,41 +1,11 @@
-/**
- * A material for rendering instances of {@link Sprite}.
- *
- * ```js
- * const map = new THREE.TextureLoader().load( 'textures/sprite.png' );
- * const material = new THREE.SpriteMaterial( { map: map, color: 0xffffff } );
- *
- * const sprite = new THREE.Sprite( material );
- * sprite.scale.set(200, 200, 1)
- * scene.add( sprite );
- * ```
- *
- * @augments Material
- */
-export class SpriteMaterial extends Material {
-    /**
-     * Constructs a new sprite material.
-     *
-     * @param {Object} [parameters] - An object with one or more properties
-     * defining the material's appearance. Any property of the material
-     * (including any property from inherited materials) can be passed
-     * in here. Color values can be passed any type of value accepted
-     * by {@link Color#set}.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isSpriteMaterial: boolean;
-    type: string;
+import { MapColorPropertiesToColorRepresentations, Material, MaterialProperties } from './Material.js';
+import { Color } from '../math/Color.js';
+import { Texture } from '../textures/Texture.js';
+
+export interface SpriteMaterialProperties extends MaterialProperties {
     /**
      * Color of the material.
      *
-     * @type {Color}
      * @default (1,1,1)
      */
     color: Color;
@@ -44,7 +14,6 @@ export class SpriteMaterial extends Material {
      * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map
      * color is modulated by the diffuse `color`.
      *
-     * @type {?Texture}
      * @default null
      */
     map: Texture | null;
@@ -58,32 +27,63 @@ export class SpriteMaterial extends Material {
      * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and
      * luminance/alpha textures will also still work as expected.
      *
-     * @type {?Texture}
      * @default null
      */
     alphaMap: Texture | null;
     /**
      * The rotation of the sprite in radians.
      *
-     * @type {number}
      * @default 0
      */
     rotation: number;
     /**
      * Specifies whether size of the sprite is attenuated by the camera depth (perspective camera only).
      *
-     * @type {boolean}
      * @default true
      */
     sizeAttenuation: boolean;
     /**
      * Whether the material is affected by fog or not.
      *
-     * @type {boolean}
      * @default true
      */
     fog: boolean;
-    copy(source: any): this;
 }
-import { Material } from './Material.js';
-import { Color } from '../math/Color.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface SpriteMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<SpriteMaterialProperties>> {}
+
+/**
+ * A material for rendering instances of {@link Sprite}.
+ *
+ * ```js
+ * const map = new THREE.TextureLoader().load( 'textures/sprite.png' );
+ * const material = new THREE.SpriteMaterial( { map: map, color: 0xffffff } );
+ *
+ * const sprite = new THREE.Sprite( material );
+ * sprite.scale.set(200, 200, 1)
+ * scene.add( sprite );
+ * ```
+ */
+export class SpriteMaterial extends Material {
+    /**
+     * Constructs a new sprite material.
+     *
+     * @param {Object} [parameters] - An object with one or more properties
+     * defining the material's appearance. Any property of the material
+     * (including any property from inherited materials) can be passed
+     * in here. Color values can be passed any type of value accepted
+     * by {@link Color#set}.
+     */
+    constructor(parameters?: SpriteMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isSpriteMaterial: boolean;
+    setValues(values?: SpriteMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface SpriteMaterial extends SpriteMaterialProperties {}
diff --git a/jsdoc-testing/jsdoc/materials/nodes/Line2NodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/Line2NodeMaterial.d.ts
index 33e30ad8..34a59b65 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/Line2NodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/Line2NodeMaterial.d.ts
@@ -1,83 +1,56 @@
-export default Line2NodeMaterial;
-/**
- * This node material can be used to render lines with a size larger than one
- * by representing them as instanced meshes.
- *
- * @augments NodeMaterial
- */
-declare class Line2NodeMaterial extends NodeMaterial {
-    /**
-     * Constructs a new node material for wide line rendering.
-     *
-     * @param {Object} [parameters={}] - The configuration parameter.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isLine2NodeMaterial: boolean;
+import NodeMaterial, { NodeMaterialNodeProperties } from './NodeMaterial.js';
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import { LineDashedMaterialParameters, LineDashedMaterialProperties } from "../LineDashedMaterial.js";
+import Node from "../../nodes/core/Node.js";
+
+export interface Line2NodeMaterialNodeProperties extends NodeMaterialNodeProperties {
     /**
      * Whether vertex colors should be used or not.
      *
-     * @type {boolean}
      * @default false
      */
     useColor: boolean;
     /**
      * The dash offset.
      *
-     * @type {number}
      * @default 0
      */
     dashOffset: number;
     /**
      * Defines the lines color.
      *
-     * @type {?Node<vec3>}
      * @default null
      */
-    lineColorNode: Node<any> | null;
+    lineColorNode: Node | null;
     /**
      * Defines the offset.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    offsetNode: Node<any> | null;
+    offsetNode: Node | null;
     /**
      * Defines the dash scale.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    dashScaleNode: Node<any> | null;
+    dashScaleNode: Node | null;
     /**
      * Defines the dash size.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    dashSizeNode: Node<any> | null;
+    dashSizeNode: Node | null;
     /**
      * Defines the gap size.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    gapSizeNode: Node<any> | null;
-    _useDash: any;
-    _useAlphaToCoverage: boolean;
-    _useWorldUnits: boolean;
+    gapSizeNode: Node | null;
     set worldUnits(value: boolean);
     /**
      * Whether the lines should sized in world units or not.
      * When set to `false` the unit is pixel.
      *
-     * @type {boolean}
      * @default false
      */
     get worldUnits(): boolean;
@@ -85,9 +58,35 @@ declare class Line2NodeMaterial extends NodeMaterial {
     /**
      * Whether the lines should be dashed or not.
      *
-     * @type {boolean}
      * @default false
      */
     get dashed(): boolean;
 }
-import NodeMaterial from './NodeMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface Line2NodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<Line2NodeMaterialNodeProperties>>, LineDashedMaterialParameters {}
+
+/**
+ * This node material can be used to render lines with a size larger than one
+ * by representing them as instanced meshes.
+ */
+declare class Line2NodeMaterial extends NodeMaterial {
+    /**
+     * Constructs a new node material for wide line rendering.
+     *
+     * @param {Object} [parameters={}] - The configuration parameter.
+     */
+    constructor(parameters?: Line2NodeMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isLine2NodeMaterial: boolean;
+    setValues(values?: Line2NodeMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface Line2NodeMaterial extends Line2NodeMaterialNodeProperties, LineDashedMaterialProperties {}
+
+export default Line2NodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/LineBasicNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/LineBasicNodeMaterial.d.ts
index da65dc88..52a12258 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/LineBasicNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/LineBasicNodeMaterial.d.ts
@@ -1,4 +1,14 @@
-export default LineBasicNodeMaterial;
+import NodeMaterial, { NodeMaterialNodeProperties } from './NodeMaterial.js';
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import { LineBasicMaterialParameters, LineBasicMaterialProperties } from '../LineBasicMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface LineBasicNodeMaterialNodeProperties extends NodeMaterialNodeProperties {
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface LineBasicNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<LineBasicNodeMaterialNodeProperties>>, LineBasicMaterialParameters {}
+
 /**
  * Node material version of {@link LineBasicMaterial}.
  *
@@ -10,7 +20,7 @@ declare class LineBasicNodeMaterial extends NodeMaterial {
      *
      * @param {Object} [parameters] - The configuration parameter.
      */
-    constructor(parameters?: Object);
+    constructor(parameters?: LineBasicNodeMaterialParameters);
     /**
      * This flag can be used for type testing.
      *
@@ -19,5 +29,10 @@ declare class LineBasicNodeMaterial extends NodeMaterial {
      * @default true
      */
     readonly isLineBasicNodeMaterial: boolean;
+    setValues(values?: LineBasicNodeMaterialParameters): void;
 }
-import NodeMaterial from './NodeMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface LineBasicNodeMaterial extends LineBasicNodeMaterialNodeProperties, LineBasicMaterialProperties {}
+
+export default LineBasicNodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/LineDashedNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/LineDashedNodeMaterial.d.ts
index 89820e46..a96ee0a2 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/LineDashedNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/LineDashedNodeMaterial.d.ts
@@ -1,28 +1,12 @@
-export default LineDashedNodeMaterial;
-/**
- * Node material version of  {@link LineDashedMaterial}.
- *
- * @augments NodeMaterial
- */
-declare class LineDashedNodeMaterial extends NodeMaterial {
-    /**
-     * Constructs a new line dashed node material.
-     *
-     * @param {Object} [parameters] - The configuration parameter.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isLineDashedNodeMaterial: boolean;
+import NodeMaterial, { NodeMaterialNodeProperties } from './NodeMaterial.js';
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import { LineDashedMaterialParameters, LineDashedMaterialProperties } from '../LineDashedMaterial.js';
+import Node from "../../nodes/core/Node.js";
+
+export interface LineDashedNodeMaterialNodeProperties extends NodeMaterialNodeProperties {
     /**
      * The dash offset.
      *
-     * @type {number}
      * @default 0
      */
     dashOffset: number;
@@ -34,10 +18,9 @@ declare class LineDashedNodeMaterial extends NodeMaterial {
      * If you don't want to overwrite the offset but modify the existing
      * value instead, use {@link materialLineDashOffset}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    offsetNode: Node<any> | null;
+    offsetNode: Node | null;
     /**
      * The scale of dash materials is by default inferred from the `scale`
      * property. This node property allows to overwrite the default
@@ -46,10 +29,9 @@ declare class LineDashedNodeMaterial extends NodeMaterial {
      * If you don't want to overwrite the scale but modify the existing
      * value instead, use {@link materialLineScale}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    dashScaleNode: Node<any> | null;
+    dashScaleNode: Node | null;
     /**
      * The dash size of dash materials is by default inferred from the `dashSize`
      * property. This node property allows to overwrite the default
@@ -58,10 +40,9 @@ declare class LineDashedNodeMaterial extends NodeMaterial {
      * If you don't want to overwrite the dash size but modify the existing
      * value instead, use {@link materialLineDashSize}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    dashSizeNode: Node<any> | null;
+    dashSizeNode: Node | null;
     /**
      * The gap size of dash materials is by default inferred from the `gapSize`
      * property. This node property allows to overwrite the default
@@ -70,9 +51,34 @@ declare class LineDashedNodeMaterial extends NodeMaterial {
      * If you don't want to overwrite the gap size but modify the existing
      * value instead, use {@link materialLineGapSize}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    gapSizeNode: Node<any> | null;
+    gapSizeNode: Node | null;
 }
-import NodeMaterial from './NodeMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface LineDashedNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<LineDashedNodeMaterialNodeProperties>>, LineDashedMaterialParameters {}
+
+/**
+ * Node material version of  {@link LineDashedMaterial}.
+ */
+declare class LineDashedNodeMaterial extends NodeMaterial {
+    /**
+     * Constructs a new line dashed node material.
+     *
+     * @param {Object} [parameters] - The configuration parameter.
+     */
+    constructor(parameters?: LineDashedNodeMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isLineDashedNodeMaterial: boolean;
+    setValues(values?: LineDashedNodeMaterialParameters): void;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface LineDashedNodeMaterial extends LineDashedNodeMaterialNodeProperties, LineDashedMaterialProperties {}
+
+export default LineDashedNodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/MeshBasicNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/MeshBasicNodeMaterial.d.ts
index 97d6b1cb..dc7fa34f 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/MeshBasicNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/MeshBasicNodeMaterial.d.ts
@@ -1,8 +1,18 @@
-export default MeshBasicNodeMaterial;
+import NodeMaterial, { NodeMaterialNodeProperties } from './NodeMaterial.js';
+import BasicEnvironmentNode from '../../nodes/lighting/BasicEnvironmentNode.js';
+import BasicLightingModel from '../../nodes/functions/BasicLightingModel.js';
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import { MeshBasicMaterialParameters, MeshBasicMaterialProperties } from '../MeshBasicMaterial.js';
+import NodeBuilder from "../../nodes/core/NodeBuilder.js";
+
+export interface MeshBasicNodeMaterialNodeProperties extends NodeMaterialNodeProperties {
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshBasicNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshBasicNodeMaterialNodeProperties>>, MeshBasicMaterialParameters {}
+
 /**
  * Node material version of {@link MeshBasicMaterial}.
- *
- * @augments NodeMaterial
  */
 declare class MeshBasicNodeMaterial extends NodeMaterial {
     /**
@@ -10,7 +20,7 @@ declare class MeshBasicNodeMaterial extends NodeMaterial {
      *
      * @param {Object} [parameters] - The configuration parameter.
      */
-    constructor(parameters?: Object);
+    constructor(parameters?: MeshBasicNodeMaterialParameters);
     /**
      * This flag can be used for type testing.
      *
@@ -19,6 +29,7 @@ declare class MeshBasicNodeMaterial extends NodeMaterial {
      * @default true
      */
     readonly isMeshBasicNodeMaterial: boolean;
+    setValues(values?: MeshBasicNodeMaterialParameters): void;
     /**
      * Overwritten since this type of material uses {@link BasicEnvironmentNode}
      * to implement the default environment mapping.
@@ -26,7 +37,7 @@ declare class MeshBasicNodeMaterial extends NodeMaterial {
      * @param {NodeBuilder} builder - The current node builder.
      * @return {?BasicEnvironmentNode<vec3>} The environment node.
      */
-    setupEnvironment(builder: NodeBuilder): BasicEnvironmentNode<vec3> | null;
+    setupEnvironment(builder: NodeBuilder): BasicEnvironmentNode | null;
     /**
      * Setups the lighting model.
      *
@@ -34,6 +45,8 @@ declare class MeshBasicNodeMaterial extends NodeMaterial {
      */
     setupLightingModel(): BasicLightingModel;
 }
-import NodeMaterial from './NodeMaterial.js';
-import BasicEnvironmentNode from '../../nodes/lighting/BasicEnvironmentNode.js';
-import BasicLightingModel from '../../nodes/functions/BasicLightingModel.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface MeshBasicNodeMaterial extends MeshBasicNodeMaterialNodeProperties, MeshBasicMaterialProperties {}
+
+export default MeshBasicNodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/MeshLambertNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/MeshLambertNodeMaterial.d.ts
index a5e11090..20ab263d 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/MeshLambertNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/MeshLambertNodeMaterial.d.ts
@@ -1,8 +1,19 @@
-export default MeshLambertNodeMaterial;
+import NodeMaterial, { NodeMaterialNodeProperties } from './NodeMaterial.js';
+import BasicEnvironmentNode from '../../nodes/lighting/BasicEnvironmentNode.js';
+import PhongLightingModel from '../../nodes/functions/PhongLightingModel.js';
+import NodeBuilder from "../../nodes/core/NodeBuilder.js";
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import { MeshLambertMaterialParameters, MeshLambertMaterialProperties } from '../MeshLambertMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshLambertNodeMaterialNodeProperties extends NodeMaterialNodeProperties {
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshLambertNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshLambertNodeMaterialNodeProperties>>, MeshLambertMaterialParameters {}
+
 /**
  * Node material version of {@link MeshLambertMaterial}.
- *
- * @augments NodeMaterial
  */
 declare class MeshLambertNodeMaterial extends NodeMaterial {
     /**
@@ -10,7 +21,7 @@ declare class MeshLambertNodeMaterial extends NodeMaterial {
      *
      * @param {Object} [parameters] - The configuration parameter.
      */
-    constructor(parameters?: Object);
+    constructor(parameters?: MeshLambertNodeMaterialParameters);
     /**
      * This flag can be used for type testing.
      *
@@ -19,6 +30,7 @@ declare class MeshLambertNodeMaterial extends NodeMaterial {
      * @default true
      */
     readonly isMeshLambertNodeMaterial: boolean;
+    setValues(values?: MeshLambertNodeMaterialParameters): void;
     /**
      * Overwritten since this type of material uses {@link BasicEnvironmentNode}
      * to implement the default environment mapping.
@@ -26,7 +38,7 @@ declare class MeshLambertNodeMaterial extends NodeMaterial {
      * @param {NodeBuilder} builder - The current node builder.
      * @return {?BasicEnvironmentNode<vec3>} The environment node.
      */
-    setupEnvironment(builder: NodeBuilder): BasicEnvironmentNode<vec3> | null;
+    setupEnvironment(builder: NodeBuilder): BasicEnvironmentNode | null;
     /**
      * Setups the lighting model.
      *
@@ -34,6 +46,8 @@ declare class MeshLambertNodeMaterial extends NodeMaterial {
      */
     setupLightingModel(): PhongLightingModel;
 }
-import NodeMaterial from './NodeMaterial.js';
-import BasicEnvironmentNode from '../../nodes/lighting/BasicEnvironmentNode.js';
-import PhongLightingModel from '../../nodes/functions/PhongLightingModel.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface MeshLambertNodeMaterial extends MeshLambertNodeMaterialNodeProperties, MeshLambertMaterialProperties {}
+
+export default MeshLambertNodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/MeshMatcapNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/MeshMatcapNodeMaterial.d.ts
index 1a2d32c8..2b8920f4 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/MeshMatcapNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/MeshMatcapNodeMaterial.d.ts
@@ -1,8 +1,17 @@
-export default MeshMatcapNodeMaterial;
+import NodeMaterial, { NodeMaterialNodeProperties } from './NodeMaterial.js';
+import NodeBuilder from "../../nodes/core/NodeBuilder.js";
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import { MeshMatcapMaterialParameters, MeshMatcapMaterialProperties } from '../MeshMatcapMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshMatcapNodeMaterialNodeProperties extends NodeMaterialNodeProperties {
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshMatcapNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshMatcapNodeMaterialNodeProperties>>, MeshMatcapMaterialParameters {}
+
 /**
  * Node material version of {@link MeshMatcapMaterial}.
- *
- * @augments NodeMaterial
  */
 declare class MeshMatcapNodeMaterial extends NodeMaterial {
     /**
@@ -10,15 +19,14 @@ declare class MeshMatcapNodeMaterial extends NodeMaterial {
      *
      * @param {Object} [parameters] - The configuration parameter.
      */
-    constructor(parameters?: Object);
+    constructor(parameters?: MeshMatcapNodeMaterialParameters);
     /**
      * This flag can be used for type testing.
      *
-     * @type {boolean}
-     * @readonly
      * @default true
      */
     readonly isMeshMatcapNodeMaterial: boolean;
+    setValues(values?: MeshMatcapNodeMaterialParameters): void;
     /**
      * Setups the matcap specific node variables.
      *
@@ -26,4 +34,8 @@ declare class MeshMatcapNodeMaterial extends NodeMaterial {
      */
     setupVariants(builder: NodeBuilder): void;
 }
-import NodeMaterial from './NodeMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface MeshMatcapNodeMaterial extends MeshMatcapNodeMaterialNodeProperties, MeshMatcapMaterialProperties {}
+
+export default MeshMatcapNodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/MeshNormalNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/MeshNormalNodeMaterial.d.ts
index effc5951..d8eacb21 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/MeshNormalNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/MeshNormalNodeMaterial.d.ts
@@ -1,8 +1,16 @@
-export default MeshNormalNodeMaterial;
+import NodeMaterial, { NodeMaterialNodeProperties } from './NodeMaterial.js';
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import { MeshNormalMaterialParameters, MeshNormalMaterialProperties } from '../MeshNormalMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshNormalNodeMaterialNodeProperties extends NodeMaterialNodeProperties {
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshNormalNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshNormalNodeMaterialNodeProperties>>, MeshNormalMaterialParameters {}
+
 /**
  * Node material version of {@link MeshNormalMaterial}.
- *
- * @augments NodeMaterial
  */
 declare class MeshNormalNodeMaterial extends NodeMaterial {
     /**
@@ -10,19 +18,22 @@ declare class MeshNormalNodeMaterial extends NodeMaterial {
      *
      * @param {Object} [parameters] - The configuration parameter.
      */
-    constructor(parameters?: Object);
+    constructor(parameters?: MeshNormalNodeMaterialParameters);
     /**
      * This flag can be used for type testing.
      *
      * @type {boolean}
-     * @readonly
-     * @default true
      */
     readonly isMeshNormalNodeMaterial: boolean;
+    setValues(values?: MeshNormalNodeMaterialParameters): void;
     /**
      * Overwrites the default implementation by computing the diffuse color
      * based on the normal data.
      */
     setupDiffuseColor(): void;
 }
-import NodeMaterial from './NodeMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface MeshNormalNodeMaterial extends MeshNormalNodeMaterialNodeProperties, MeshNormalMaterialProperties {}
+
+export default MeshNormalNodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/MeshPhongNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/MeshPhongNodeMaterial.d.ts
index b55a9c94..d2d224b9 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/MeshPhongNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/MeshPhongNodeMaterial.d.ts
@@ -1,24 +1,12 @@
-export default MeshPhongNodeMaterial;
-/**
- * Node material version of {@link MeshPhongMaterial}.
- *
- * @augments NodeMaterial
- */
-declare class MeshPhongNodeMaterial extends NodeMaterial {
-    /**
-     * Constructs a new mesh lambert node material.
-     *
-     * @param {Object} [parameters] - The configuration parameter.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isMeshPhongNodeMaterial: boolean;
+import NodeMaterial, { NodeMaterialNodeProperties } from './NodeMaterial.js';
+import BasicEnvironmentNode from '../../nodes/lighting/BasicEnvironmentNode.js';
+import PhongLightingModel from '../../nodes/functions/PhongLightingModel.js';
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import Node from "../../nodes/core/Node.js";
+import NodeBuilder from "../../nodes/core/NodeBuilder.js";
+import { MeshPhongMaterialParameters, MeshPhongMaterialProperties } from '../MeshPhongMaterial.js';
+
+export interface MeshPhongNodeMaterialNodeProperties extends NodeMaterialNodeProperties {
     /**
      * The shininess of phong materials is by default inferred from the `shininess`
      * property. This node property allows to overwrite the default
@@ -27,10 +15,9 @@ declare class MeshPhongNodeMaterial extends NodeMaterial {
      * If you don't want to overwrite the shininess but modify the existing
      * value instead, use {@link materialShininess}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    shininessNode: Node<any> | null;
+    shininessNode: Node | null;
     /**
      * The specular color of phong materials is by default inferred from the
      * `specular` property. This node property allows to overwrite the default
@@ -39,10 +26,31 @@ declare class MeshPhongNodeMaterial extends NodeMaterial {
      * If you don't want to overwrite the specular color but modify the existing
      * value instead, use {@link materialSpecular}.
      *
-     * @type {?Node<vec3>}
      * @default null
      */
-    specularNode: Node<vec3> | null;
+    specularNode: Node | null;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshPhongNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshPhongNodeMaterialNodeProperties>>, MeshPhongMaterialParameters {}
+
+/**
+ * Node material version of {@link MeshPhongMaterial}.
+ */
+declare class MeshPhongNodeMaterial extends NodeMaterial {
+    /**
+     * Constructs a new mesh lambert node material.
+     *
+     * @param {Object} [parameters] - The configuration parameter.
+     */
+    constructor(parameters?: MeshPhongNodeMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isMeshPhongNodeMaterial: boolean;
+    setValues(values?: MeshPhongNodeMaterialParameters): void;
     /**
      * Overwritten since this type of material uses {@link BasicEnvironmentNode}
      * to implement the default environment mapping.
@@ -50,15 +58,16 @@ declare class MeshPhongNodeMaterial extends NodeMaterial {
      * @param {NodeBuilder} builder - The current node builder.
      * @return {?BasicEnvironmentNode<vec3>} The environment node.
      */
-    setupEnvironment(builder: NodeBuilder): BasicEnvironmentNode<vec3> | null;
+    setupEnvironment(builder: NodeBuilder): BasicEnvironmentNode | null;
     /**
      * Setups the lighting model.
      *
      * @return {PhongLightingModel} The lighting model.
      */
     setupLightingModel(): PhongLightingModel;
-    copy(source: any): NodeMaterial;
 }
-import NodeMaterial from './NodeMaterial.js';
-import BasicEnvironmentNode from '../../nodes/lighting/BasicEnvironmentNode.js';
-import PhongLightingModel from '../../nodes/functions/PhongLightingModel.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface MeshPhongNodeMaterial extends MeshPhongNodeMaterialNodeProperties, MeshPhongMaterialProperties {}
+
+export default MeshPhongNodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/MeshPhysicalNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/MeshPhysicalNodeMaterial.d.ts
index 0545af43..e2d866f5 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/MeshPhysicalNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/MeshPhysicalNodeMaterial.d.ts
@@ -1,18 +1,12 @@
-export default MeshPhysicalNodeMaterial;
-/**
- * Node material version of {@link MeshPhysicalMaterial}.
- *
- * @augments MeshStandardNodeMaterial
- */
-declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isMeshPhysicalNodeMaterial: boolean;
+import MeshStandardNodeMaterial, {
+    MeshStandardNodeMaterialNodeProperties,
+} from './MeshStandardNodeMaterial.js';
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import Node from "../../nodes/core/Node.js";
+import NodeBuilder from "../../nodes/core/NodeBuilder.js";
+import { MeshPhysicalMaterialParameters, MeshPhysicalMaterialProperties } from '../MeshPhysicalMaterial.js';
+
+export interface MeshPhysicalNodeMaterialNodeProperties extends MeshStandardNodeMaterialNodeProperties {
     /**
      * The clearcoat of physical materials is by default inferred from the `clearcoat`
      * and `clearcoatMap` properties. This node property allows to overwrite the default
@@ -21,10 +15,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the clearcoat but modify the existing
      * value instead, use {@link materialClearcoat}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    clearcoatNode: Node<any> | null;
+    clearcoatNode: Node | null;
     /**
      * The clearcoat roughness of physical materials is by default inferred from the `clearcoatRoughness`
      * and `clearcoatRoughnessMap` properties. This node property allows to overwrite the default
@@ -33,10 +26,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the clearcoat roughness but modify the existing
      * value instead, use {@link materialClearcoatRoughness}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    clearcoatRoughnessNode: Node<any> | null;
+    clearcoatRoughnessNode: Node | null;
     /**
      * The clearcoat normal of physical materials is by default inferred from the `clearcoatNormalMap`
      * property. This node property allows to overwrite the default
@@ -45,10 +37,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the clearcoat normal but modify the existing
      * value instead, use {@link materialClearcoatNormal}.
      *
-     * @type {?Node<vec3>}
      * @default null
      */
-    clearcoatNormalNode: Node<any> | null;
+    clearcoatNormalNode: Node | null;
     /**
      * The sheen of physical materials is by default inferred from the `sheen`, `sheenColor`
      * and `sheenColorMap` properties. This node property allows to overwrite the default
@@ -57,10 +48,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the sheen but modify the existing
      * value instead, use {@link materialSheen}.
      *
-     * @type {?Node<vec3>}
      * @default null
      */
-    sheenNode: Node<any> | null;
+    sheenNode: Node | null;
     /**
      * The sheen roughness of physical materials is by default inferred from the `sheenRoughness` and
      * `sheenRoughnessMap` properties. This node property allows to overwrite the default
@@ -69,10 +59,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the sheen roughness but modify the existing
      * value instead, use {@link materialSheenRoughness}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    sheenRoughnessNode: Node<any> | null;
+    sheenRoughnessNode: Node | null;
     /**
      * The iridescence of physical materials is by default inferred from the `iridescence`
      * property. This node property allows to overwrite the default
@@ -81,10 +70,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the iridescence but modify the existing
      * value instead, use {@link materialIridescence}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    iridescenceNode: Node<any> | null;
+    iridescenceNode: Node | null;
     /**
      * The iridescence IOR of physical materials is by default inferred from the `iridescenceIOR`
      * property. This node property allows to overwrite the default
@@ -93,10 +81,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the iridescence IOR but modify the existing
      * value instead, use {@link materialIridescenceIOR}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    iridescenceIORNode: Node<any> | null;
+    iridescenceIORNode: Node | null;
     /**
      * The iridescence thickness of physical materials is by default inferred from the `iridescenceThicknessRange`
      * and `iridescenceThicknessMap` properties. This node property allows to overwrite the default
@@ -105,10 +92,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the iridescence thickness but modify the existing
      * value instead, use {@link materialIridescenceThickness}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    iridescenceThicknessNode: Node<any> | null;
+    iridescenceThicknessNode: Node | null;
     /**
      * The specular intensity of physical materials is by default inferred from the `specularIntensity`
      * and `specularIntensityMap` properties. This node property allows to overwrite the default
@@ -117,10 +103,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the specular intensity but modify the existing
      * value instead, use {@link materialSpecularIntensity}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    specularIntensityNode: Node<any> | null;
+    specularIntensityNode: Node | null;
     /**
      * The specular color of physical materials is by default inferred from the `specularColor`
      * and `specularColorMap` properties. This node property allows to overwrite the default
@@ -129,10 +114,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the specular color but modify the existing
      * value instead, use {@link materialSpecularColor}.
      *
-     * @type {?Node<vec3>}
      * @default null
      */
-    specularColorNode: Node<any> | null;
+    specularColorNode: Node | null;
     /**
      * The ior of physical materials is by default inferred from the `ior`
      * property. This node property allows to overwrite the default
@@ -141,10 +125,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the ior but modify the existing
      * value instead, use {@link materialIOR}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    iorNode: Node<any> | null;
+    iorNode: Node | null;
     /**
      * The transmission of physical materials is by default inferred from the `transmission` and
      * `transmissionMap` properties. This node property allows to overwrite the default
@@ -153,10 +136,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the transmission but modify the existing
      * value instead, use {@link materialTransmission}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    transmissionNode: Node<any> | null;
+    transmissionNode: Node | null;
     /**
      * The thickness of physical materials is by default inferred from the `thickness` and
      * `thicknessMap` properties. This node property allows to overwrite the default
@@ -165,10 +147,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the thickness but modify the existing
      * value instead, use {@link materialThickness}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    thicknessNode: Node<any> | null;
+    thicknessNode: Node | null;
     /**
      * The attenuation distance of physical materials is by default inferred from the
      * `attenuationDistance` property. This node property allows to overwrite the default
@@ -177,10 +158,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the attenuation distance but modify the existing
      * value instead, use {@link materialAttenuationDistance}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    attenuationDistanceNode: Node<any> | null;
+    attenuationDistanceNode: Node | null;
     /**
      * The attenuation color of physical materials is by default inferred from the
      * `attenuationColor` property. This node property allows to overwrite the default
@@ -189,10 +169,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the attenuation color but modify the existing
      * value instead, use {@link materialAttenuationColor}.
      *
-     * @type {?Node<vec3>}
      * @default null
      */
-    attenuationColorNode: Node<any> | null;
+    attenuationColorNode: Node | null;
     /**
      * The dispersion of physical materials is by default inferred from the
      * `dispersion` property. This node property allows to overwrite the default
@@ -201,10 +180,9 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the dispersion but modify the existing
      * value instead, use {@link materialDispersion}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    dispersionNode: Node<any> | null;
+    dispersionNode: Node | null;
     /**
      * The anisotropy of physical materials is by default inferred from the
      * `anisotropy` property. This node property allows to overwrite the default
@@ -213,49 +191,59 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      * If you don't want to overwrite the anisotropy but modify the existing
      * value instead, use {@link materialAnisotropy}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    anisotropyNode: Node<any> | null;
+    anisotropyNode: Node | null;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshPhysicalNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshPhysicalNodeMaterialNodeProperties>>, MeshPhysicalMaterialParameters {}
+
+/**
+ * Node material version of {@link MeshPhysicalMaterial}.
+ */
+declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
+    constructor(parameters?: MeshPhysicalNodeMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isMeshPhysicalNodeMaterial: boolean;
+    setValues(values?: MeshPhysicalNodeMaterialParameters): void;
     /**
      * Whether the lighting model should use clearcoat or not.
      *
-     * @type {boolean}
      * @default true
      */
     get useClearcoat(): boolean;
     /**
      * Whether the lighting model should use iridescence or not.
      *
-     * @type {boolean}
      * @default true
      */
     get useIridescence(): boolean;
     /**
      * Whether the lighting model should use sheen or not.
      *
-     * @type {boolean}
      * @default true
      */
     get useSheen(): boolean;
     /**
      * Whether the lighting model should use anisotropy or not.
      *
-     * @type {boolean}
      * @default true
      */
     get useAnisotropy(): boolean;
     /**
      * Whether the lighting model should use transmission or not.
      *
-     * @type {boolean}
      * @default true
      */
     get useTransmission(): boolean;
     /**
      * Whether the lighting model should use dispersion or not.
      *
-     * @type {boolean}
      * @default true
      */
     get useDispersion(): boolean;
@@ -270,7 +258,10 @@ declare class MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {
      *
      * @return {Node<vec3>} The clearcoat normal.
      */
-    setupClearcoatNormal(): Node<any>;
-    setup(builder: any): void;
+    setupClearcoatNormal(): Node;
 }
-import MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface MeshPhysicalNodeMaterial extends MeshPhysicalNodeMaterialNodeProperties, MeshPhysicalMaterialProperties {}
+
+export default MeshPhysicalNodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/MeshSSSNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/MeshSSSNodeMaterial.d.ts
index 537251fc..fbacf5e3 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/MeshSSSNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/MeshSSSNodeMaterial.d.ts
@@ -1,52 +1,89 @@
-export default MeshSSSNodeMaterial;
+import MeshPhysicalNodeMaterial, { MeshPhysicalNodeMaterialNodeProperties } from './MeshPhysicalNodeMaterial.js';
+import PhysicalLightingModel from '../../nodes/functions/PhysicalLightingModel.js';
+import NodeBuilder from "../../nodes/core/NodeBuilder.js";
+import { LightingModelDirectInput } from '../../nodes/core/LightingModel.js';
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import { MeshPhysicalMaterialParameters, MeshPhysicalMaterialProperties } from '../MeshPhysicalMaterial.js';
+import Node from "../../nodes/core/Node.js";
+import InputNode from "../../nodes/core/InputNode.js";
+
 /**
- * This node material is an experimental extension of {@link MeshPhysicalNodeMaterial}
- * that implements a Subsurface scattering (SSS) term.
- *
- * @augments MeshPhysicalNodeMaterial
+ * Represents the lighting model for {@link MeshSSSNodeMaterial}.
  */
-declare class MeshSSSNodeMaterial extends MeshPhysicalNodeMaterial {
+declare class SSSLightingModel extends PhysicalLightingModel {
+    /**
+     * Constructs a new physical lighting model.
+     *
+     * @param {boolean} [clearcoat=false] - Whether clearcoat is supported or not.
+     * @param {boolean} [sheen=false] - Whether sheen is supported or not.
+     * @param {boolean} [iridescence=false] - Whether iridescence is supported or not.
+     * @param {boolean} [anisotropy=false] - Whether anisotropy is supported or not.
+     * @param {boolean} [transmission=false] - Whether transmission is supported or not.
+     * @param {boolean} [dispersion=false] - Whether dispersion is supported or not.
+     * @param {boolean} [sss=false] - Whether SSS is supported or not.
+     */
+    constructor(clearcoat?: boolean, sheen?: boolean, iridescence?: boolean, anisotropy?: boolean, transmission?: boolean, dispersion?: boolean, sss?: boolean);
+    /**
+     * Whether the lighting model should use SSS or not.
+     *
+     * @default false
+     */
+    useSSS: boolean;
+    /**
+     * Extends the default implementation with a SSS term.
+     *
+     * Reference: [Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look]{@link https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/}
+     *
+     * @param {Object} input - The input data.
+     * @param {NodeBuilder} builder - The current node builder.
+     */
+    direct(input: LightingModelDirectInput, builder: NodeBuilder): void;
+}
+
+export interface MeshSSSNodeMaterialNodeProperties extends MeshPhysicalNodeMaterialNodeProperties {
     /**
      * Represents the thickness color.
      *
-     * @type {?Node<vec3>}
      * @default null
      */
-    thicknessColorNode: Node<any> | null;
+    thicknessColorNode: Node | null;
     /**
      * Represents the distortion factor.
-     *
-     * @type {?Node<float>}
      */
-    thicknessDistortionNode: Node<any> | null;
+    thicknessDistortionNode: InputNode<number>;
     /**
      * Represents the thickness ambient factor.
-     *
-     * @type {?Node<float>}
      */
-    thicknessAmbientNode: Node<any> | null;
+    thicknessAmbientNode: InputNode<number>;
     /**
      * Represents the thickness attenuation.
-     *
-     * @type {?Node<float>}
      */
-    thicknessAttenuationNode: Node<any> | null;
+    thicknessAttenuationNode: InputNode<number>;
     /**
      * Represents the thickness power.
-     *
-     * @type {?Node<float>}
      */
-    thicknessPowerNode: Node<any> | null;
+    thicknessPowerNode: InputNode<number>;
     /**
      * Represents the thickness scale.
-     *
-     * @type {?Node<float>}
      */
-    thicknessScaleNode: Node<any> | null;
+    thicknessScaleNode: InputNode<number>;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshSSSNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshSSSNodeMaterialNodeProperties>>, MeshPhysicalMaterialParameters {}
+
+/**
+ * This node material is an experimental extension of {@link MeshPhysicalNodeMaterial}
+ * that implements a Subsurface scattering (SSS) term.
+ *
+ * @augments MeshPhysicalNodeMaterial
+ */
+declare class MeshSSSNodeMaterial extends MeshPhysicalNodeMaterial {
+    constructor(parameters?: MeshSSSNodeMaterialParameters);
+    setValues(values?: MeshSSSNodeMaterialParameters): void;
     /**
      * Whether the lighting model should use SSS or not.
      *
-     * @type {boolean}
      * @default true
      */
     get useSSS(): boolean;
@@ -57,40 +94,8 @@ declare class MeshSSSNodeMaterial extends MeshPhysicalNodeMaterial {
      */
     setupLightingModel(): SSSLightingModel;
 }
-import MeshPhysicalNodeMaterial from './MeshPhysicalNodeMaterial.js';
-/**
- * Represents the lighting model for {@link MeshSSSNodeMaterial}.
- *
- * @augments PhysicalLightingModel
- */
-declare class SSSLightingModel extends PhysicalLightingModel {
-    /**
-     * Constructs a new physical lighting model.
-     *
-     * @param {boolean} [clearcoat=false] - Whether clearcoat is supported or not.
-     * @param {boolean} [sheen=false] - Whether sheen is supported or not.
-     * @param {boolean} [iridescence=false] - Whether iridescence is supported or not.
-     * @param {boolean} [anisotropy=false] - Whether anisotropy is supported or not.
-     * @param {boolean} [transmission=false] - Whether transmission is supported or not.
-     * @param {boolean} [dispersion=false] - Whether dispersion is supported or not.
-     * @param {boolean} [sss=false] - Whether SSS is supported or not.
-     */
-    constructor(clearcoat?: boolean, sheen?: boolean, iridescence?: boolean, anisotropy?: boolean, transmission?: boolean, dispersion?: boolean, sss?: boolean);
-    /**
-     * Whether the lighting model should use SSS or not.
-     *
-     * @type {boolean}
-     * @default false
-     */
-    useSSS: boolean;
-    /**
-     * Extends the default implementation with a SSS term.
-     *
-     * Reference: [Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look]{@link https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/}
-     *
-     * @param {Object} input - The input data.
-     * @param {NodeBuilder} builder - The current node builder.
-     */
-    direct({ lightDirection, lightColor, reflectedLight }: Object, builder: NodeBuilder): void;
-}
-import PhysicalLightingModel from '../../nodes/functions/PhysicalLightingModel.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface MeshSSSNodeMaterial extends MeshSSSNodeMaterialNodeProperties, MeshPhysicalMaterialProperties {}
+
+export default MeshSSSNodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/MeshStandardNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/MeshStandardNodeMaterial.d.ts
index 2128d963..dd036681 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/MeshStandardNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/MeshStandardNodeMaterial.d.ts
@@ -1,24 +1,12 @@
-export default MeshStandardNodeMaterial;
-/**
- * Node material version of {@link MeshStandardMaterial}.
- *
- * @augments NodeMaterial
- */
-declare class MeshStandardNodeMaterial extends NodeMaterial {
-    /**
-     * Constructs a new mesh standard node material.
-     *
-     * @param {Object} [parameters] - The configuration parameter.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isMeshStandardNodeMaterial: boolean;
+import NodeMaterial, { NodeMaterialNodeProperties } from './NodeMaterial.js';
+import EnvironmentNode from '../../nodes/lighting/EnvironmentNode.js';
+import PhysicalLightingModel from '../../nodes/functions/PhysicalLightingModel.js';
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import NodeBuilder from "../../nodes/core/NodeBuilder.js";
+import { MeshStandardMaterialParameters, MeshStandardMaterialProperties } from '../MeshStandardMaterial.js';
+import Node from "../../nodes/core/Node.js";
+
+export interface MeshStandardNodeMaterialNodeProperties extends NodeMaterialNodeProperties {
     /**
      * The emissive color of standard materials is by default inferred from the `emissive`,
      * `emissiveIntensity` and `emissiveMap` properties. This node property allows to
@@ -27,10 +15,9 @@ declare class MeshStandardNodeMaterial extends NodeMaterial {
      * If you don't want to overwrite the emissive color but modify the existing
      * value instead, use {@link materialEmissive}.
      *
-     * @type {?Node<vec3>}
      * @default null
      */
-    emissiveNode: Node<any> | null;
+    emissiveNode: Node | null;
     /**
      * The metalness of standard materials is by default inferred from the `metalness`,
      * and `metalnessMap` properties. This node property allows to
@@ -39,10 +26,9 @@ declare class MeshStandardNodeMaterial extends NodeMaterial {
      * If you don't want to overwrite the metalness but modify the existing
      * value instead, use {@link materialMetalness}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    metalnessNode: Node<any> | null;
+    metalnessNode: Node | null;
     /**
      * The roughness of standard materials is by default inferred from the `roughness`,
      * and `roughnessMap` properties. This node property allows to
@@ -51,10 +37,31 @@ declare class MeshStandardNodeMaterial extends NodeMaterial {
      * If you don't want to overwrite the roughness but modify the existing
      * value instead, use {@link materialRoughness}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    roughnessNode: Node<any> | null;
+    roughnessNode: Node | null;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshStandardNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshStandardNodeMaterialNodeProperties>>, MeshStandardMaterialParameters {}
+
+/**
+ * Node material version of {@link MeshStandardMaterial}.
+ */
+declare class MeshStandardNodeMaterial extends NodeMaterial {
+    /**
+     * Constructs a new mesh standard node material.
+     *
+     * @param {Object} [parameters] - The configuration parameter.
+     */
+    constructor(parameters?: MeshStandardNodeMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isMeshStandardNodeMaterial: boolean;
+    setValues(values?: MeshStandardNodeMaterialParameters): void;
     /**
      * Overwritten since this type of material uses {@link EnvironmentNode}
      * to implement the PBR (PMREM based) environment mapping. Besides, the
@@ -63,7 +70,7 @@ declare class MeshStandardNodeMaterial extends NodeMaterial {
      * @param {NodeBuilder} builder - The current node builder.
      * @return {?EnvironmentNode<vec3>} The environment node.
      */
-    setupEnvironment(builder: NodeBuilder): EnvironmentNode<any> | null;
+    setupEnvironment(builder: NodeBuilder): EnvironmentNode | null;
     /**
      * Setups the lighting model.
      *
@@ -74,8 +81,9 @@ declare class MeshStandardNodeMaterial extends NodeMaterial {
      * Setups the specular related node variables.
      */
     setupSpecular(): void;
-    copy(source: any): NodeMaterial;
 }
-import NodeMaterial from './NodeMaterial.js';
-import EnvironmentNode from '../../nodes/lighting/EnvironmentNode.js';
-import PhysicalLightingModel from '../../nodes/functions/PhysicalLightingModel.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface MeshStandardNodeMaterial extends MeshStandardNodeMaterialNodeProperties, MeshStandardMaterialProperties {}
+
+export default MeshStandardNodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/MeshToonNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/MeshToonNodeMaterial.d.ts
index 1ffe1bd1..94d4efb0 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/MeshToonNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/MeshToonNodeMaterial.d.ts
@@ -1,4 +1,15 @@
-export default MeshToonNodeMaterial;
+import NodeMaterial, { NodeMaterialNodeProperties } from './NodeMaterial.js';
+import ToonLightingModel from '../../nodes/functions/ToonLightingModel.js';
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import { MeshToonMaterialParameters, MeshToonMaterialProperties } from '../MeshToonMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshToonNodeMaterialNodeProperties extends NodeMaterialNodeProperties {
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface MeshToonNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<MeshToonNodeMaterialNodeProperties>>, MeshToonMaterialParameters {}
+
 /**
  * Node material version of {@link MeshToonMaterial}.
  *
@@ -10,7 +21,7 @@ declare class MeshToonNodeMaterial extends NodeMaterial {
      *
      * @param {Object} [parameters] - The configuration parameter.
      */
-    constructor(parameters?: Object);
+    constructor(parameters?: MeshToonNodeMaterialParameters);
     /**
      * This flag can be used for type testing.
      *
@@ -19,6 +30,7 @@ declare class MeshToonNodeMaterial extends NodeMaterial {
      * @default true
      */
     readonly isMeshToonNodeMaterial: boolean;
+    setValues(values?: MeshToonNodeMaterialParameters): void;
     /**
      * Setups the lighting model.
      *
@@ -26,5 +38,8 @@ declare class MeshToonNodeMaterial extends NodeMaterial {
      */
     setupLightingModel(): ToonLightingModel;
 }
-import NodeMaterial from './NodeMaterial.js';
-import ToonLightingModel from '../../nodes/functions/ToonLightingModel.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface MeshToonNodeMaterial extends MeshToonNodeMaterialNodeProperties, MeshToonMaterialProperties {}
+
+export default MeshToonNodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/NodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/NodeMaterial.d.ts
index 9e689cf0..d4002950 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/NodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/NodeMaterial.d.ts
@@ -1,37 +1,23 @@
-export default NodeMaterial;
-/**
- * Base class for all node materials.
- *
- * @augments Material
- */
-declare class NodeMaterial extends Material {
-    static get type(): string;
-    set type(_value: string);
-    /**
-     * Represents the type of the node material.
-     *
-     * @type {string}
-     */
-    get type(): string;
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isNodeMaterial: boolean;
+import { MapColorPropertiesToColorRepresentations, Material, MaterialParameters } from '../Material.js';
+import NodeMaterialObserver from './manager/NodeMaterialObserver.js';
+import LightsNode from "../../nodes/lighting/LightsNode.js";
+import Node from "../../nodes/core/Node.js";
+import MRTNode from "../../nodes/core/MRTNode.js";
+import NodeBuilder from "../../nodes/core/NodeBuilder.js";
+import ClippingNode from "../../nodes/accessors/ClippingNode.js";
+import { ShaderNodeObject } from "../../nodes/tsl/TSLCore.js";
+import LightingModel from "../../nodes/core/LightingModel.js";
+
+export interface NodeMaterialNodeProperties {
     /**
      * Whether this material is affected by fog or not.
      *
-     * @type {boolean}
      * @default true
      */
     fog: boolean;
     /**
      * Whether this material is affected by lights or not.
      *
-     * @type {boolean}
      * @default false
      */
     lights: boolean;
@@ -40,7 +26,6 @@ declare class NodeMaterial extends Material {
      * This property is managed by the engine and should not be
      * modified by apps.
      *
-     * @type {boolean}
      * @default false
      */
     hardwareClipping: boolean;
@@ -57,7 +42,6 @@ declare class NodeMaterial extends Material {
      * material.lightsNode = customLightsNode;
      * ```
      *
-     * @type {?LightsNode}
      * @default null
      */
     lightsNode: LightsNode | null;
@@ -71,10 +55,9 @@ declare class NodeMaterial extends Material {
      * material.envNode = pmremTexture( renderTarget.texture );
      * ```
      *
-     * @type {?Node<vec3>}
      * @default null
      */
-    envNode: Node<any> | null;
+    envNode: Node | null;
     /**
      * The lighting of node materials might be influenced by ambient occlusion.
      * The default AO is inferred from an ambient occlusion map assigned to `aoMap`
@@ -84,10 +67,9 @@ declare class NodeMaterial extends Material {
      * If you don't want to overwrite the diffuse color but modify the existing
      * values instead, use {@link materialAO}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    aoNode: Node<any> | null;
+    aoNode: Node | null;
     /**
      * The diffuse color of node materials is by default inferred from the
      * `color` and `map` properties. This node property allows to overwrite the default
@@ -104,10 +86,9 @@ declare class NodeMaterial extends Material {
      * material.colorNode = materialColor.mul( color( 0xff0000 ) ); // give diffuse colors a red tint
      * ```
      *
-     * @type {?Node<vec3>}
      * @default null
      */
-    colorNode: Node<any> | null;
+    colorNode: Node | null;
     /**
      * The normals of node materials are by default inferred from the `normalMap`/`normalScale`
      * or `bumpMap`/`bumpScale` properties. This node property allows to overwrite the default
@@ -116,10 +97,9 @@ declare class NodeMaterial extends Material {
      * If you don't want to overwrite the normals but modify the existing values instead,
      * use {@link materialNormal}.
      *
-     * @type {?Node<vec3>}
      * @default null
      */
-    normalNode: Node<any> | null;
+    normalNode: Node | null;
     /**
      * The opacity of node materials is by default inferred from the `opacity`
      * and `alphaMap` properties. This node property allows to overwrite the default
@@ -128,10 +108,9 @@ declare class NodeMaterial extends Material {
      * If you don't want to overwrite the normals but modify the existing
      * value instead, use {@link materialOpacity}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    opacityNode: Node<any> | null;
+    opacityNode: Node | null;
     /**
      * This node can be used to implement a variety of filter-like effects. The idea is
      * to store the current rendering into a texture e.g. via `viewportSharedTexture()`, use it
@@ -148,17 +127,15 @@ declare class NodeMaterial extends Material {
      *
      * Backdrop computations are part of the lighting so only lit materials can use this property.
      *
-     * @type {?Node<vec3>}
      * @default null
      */
-    backdropNode: Node<any> | null;
+    backdropNode: Node | null;
     /**
      * This node allows to modulate the influence of `backdropNode` to the outgoing light.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    backdropAlphaNode: Node<any> | null;
+    backdropAlphaNode: Node | null;
     /**
      * The alpha test of node materials is by default inferred from the `alphaTest`
      * property. This node property allows to overwrite the default and define the
@@ -167,17 +144,15 @@ declare class NodeMaterial extends Material {
      * If you don't want to overwrite the alpha test but modify the existing
      * value instead, use {@link materialAlphaTest}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    alphaTestNode: Node<any> | null;
+    alphaTestNode: Node | null;
     /**
      * Discards the fragment if the mask value is `false`.
      *
-     * @type {?Node<bool>}
      * @default null
      */
-    maskNode: Node<any> | null;
+    maskNode: Node | null;
     /**
      * The local vertex positions are computed based on multiple factors like the
      * attribute data, morphing or skinning. This node property allows to overwrite
@@ -190,10 +165,9 @@ declare class NodeMaterial extends Material {
      * material.positionNode = positionLocal.add( displace );
      * ```
      *
-     * @type {?Node<vec3>}
      * @default null
      */
-    positionNode: Node<any> | null;
+    positionNode: Node | null;
     /**
      * This node property is intended for logic which modifies geometry data once or per animation step.
      * Apps usually place such logic randomly in initialization routines or in the animation loop.
@@ -205,34 +179,30 @@ declare class NodeMaterial extends Material {
      * simulation would be implemented as compute shaders and managed inside a `Fn` function. This function is
      * eventually assigned to `geometryNode`.
      *
-     * @type {?Function}
      * @default null
      */
-    geometryNode: Function | null;
+    geometryNode: (() => Node) | null;
     /**
      * Allows to overwrite depth values in the fragment shader.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    depthNode: Node<any> | null;
+    depthNode: Node | null;
     /**
      * Allows to overwrite the position used for shadow map rendering which
      * is by default {@link positionWorld}, the vertex position
      * in world space.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    receivedShadowPositionNode: Node<any> | null;
+    receivedShadowPositionNode: Node | null;
     /**
      * Allows to overwrite the geometry position used for shadow map projection which
      * is by default {@link positionLocal}, the vertex position in local space.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    castShadowPositionNode: Node<any> | null;
+    castShadowPositionNode: Node | null;
     /**
      * This node can be used to influence how an object using this node material
      * receive shadows.
@@ -245,10 +215,9 @@ declare class NodeMaterial extends Material {
      * 	return shadow.mix( color( 0xff0000 ), 1 ); // modify shadow color
      * } );
      *
-     * @type {?(Function|FunctionNode<vec4>)}
      * @default null
      */
-    receivedShadowNode: (Function | FunctionNode<any>) | null;
+    receivedShadowNode: (() => Node) | null;
     /**
      * This node can be used to influence how an object using this node material
      * casts shadows. To apply a color to shadows, you can simply do:
@@ -268,26 +237,23 @@ declare class NodeMaterial extends Material {
      * } )();
      *  ```
      *
-     * @type {?Node<vec4>}
      * @default null
      */
-    castShadowNode: Node<any> | null;
+    castShadowNode: Node | null;
     /**
      * This node can be used to define the final output of the material.
      *
      * TODO: Explain the differences to `fragmentNode`.
      *
-     * @type {?Node<vec4>}
      * @default null
      */
-    outputNode: Node<any> | null;
+    outputNode: Node | null;
     /**
      * MRT configuration is done on renderer or pass level. This node allows to
      * overwrite what values are written into MRT targets on material level. This
      * can be useful for implementing selective FX features that should only affect
      * specific objects.
      *
-     * @type {?MRTNode}
      * @default null
      */
     mrtNode: MRTNode | null;
@@ -296,19 +262,34 @@ declare class NodeMaterial extends Material {
      * the fragment shader. Assigning a node will replace the built-in material
      * logic used in the fragment stage.
      *
-     * @type {?Node<vec4>}
      * @default null
      */
-    fragmentNode: Node<any> | null;
+    fragmentNode: Node | null;
     /**
      * This node property can be used if you need complete freedom in implementing
      * the vertex shader. Assigning a node will replace the built-in material logic
      * used in the vertex stage.
      *
-     * @type {?Node<vec4>}
      * @default null
      */
-    vertexNode: Node<any> | null;
+    vertexNode: Node | null;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface NodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<NodeMaterialNodeProperties>>, MaterialParameters {}
+
+/**
+ * Base class for all node materials.
+ */
+declare class NodeMaterial extends Material {
+    static get type(): string;
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isNodeMaterial: boolean;
+    setValues(values?: NodeMaterialParameters): void;
     /**
      * Builds this material with the given node builder.
      *
@@ -354,35 +335,35 @@ declare class NodeMaterial extends Material {
      * @param {NodeBuilder} builder - The current node builder.
      * @return {Node<vec3>} The position in view space.
      */
-    setupPositionView(): Node<any>;
+    setupPositionView(builder: NodeBuilder): Node;
     /**
      * Setups the position in clip space.
      *
      * @param {NodeBuilder} builder - The current node builder.
      * @return {Node<vec4>} The position in view space.
      */
-    setupModelViewProjection(): Node<any>;
+    setupModelViewProjection(): Node;
     /**
      * Setups the logic for the vertex stage.
      *
      * @param {NodeBuilder} builder - The current node builder.
      * @return {Node<vec4>} The position in clip space.
      */
-    setupVertex(builder: NodeBuilder): Node<any>;
+    setupVertex(builder: NodeBuilder): Node;
     /**
      * Setups the computation of the position in local space.
      *
      * @param {NodeBuilder} builder - The current node builder.
      * @return {Node<vec3>} The position in local space.
      */
-    setupPosition(builder: NodeBuilder): Node<any>;
+    setupPosition(builder: NodeBuilder): Node;
     /**
      * Setups the computation of the material's diffuse color.
      *
      * @param {NodeBuilder} builder - The current node builder.
      * @param {BufferGeometry} geometry - The geometry.
      */
-    setupDiffuseColor({ object, geometry }: NodeBuilder): void;
+    setupDiffuseColor(builder: NodeBuilder): void;
     /**
      * Abstract interface method that can be implemented by derived materials
      * to setup material-specific node variables.
@@ -390,33 +371,33 @@ declare class NodeMaterial extends Material {
      * @abstract
      * @param {NodeBuilder} builder - The current node builder.
      */
-    setupVariants(): void;
+    setupVariants(builder: NodeBuilder): void;
     /**
      * Setups the outgoing light node variable
      *
      * @return {Node<vec3>} The outgoing light node.
      */
-    setupOutgoingLight(): Node<any>;
+    setupOutgoingLight(): Node;
     /**
      * Setups the normal node from the material.
      *
      * @return {Node<vec3>} The normal node.
      */
-    setupNormal(): Node<any>;
+    setupNormal(): ShaderNodeObject<Node>;
     /**
      * Setups the environment node from the material.
      *
      * @param {NodeBuilder} builder - The current node builder.
      * @return {Node<vec4>} The environment node.
      */
-    setupEnvironment(): Node<any>;
+    setupEnvironment(builder: NodeBuilder): Node | null;
     /**
      * Setups the light map node from the material.
      *
      * @param {NodeBuilder} builder - The current node builder.
      * @return {Node<vec3>} The light map node.
      */
-    setupLightMap(builder: NodeBuilder): Node<any>;
+    setupLightMap(builder: NodeBuilder): Node;
     /**
      * Setups the lights node based on the scene, environment and material.
      *
@@ -439,7 +420,7 @@ declare class NodeMaterial extends Material {
      * @param {NodeBuilder} builder - The current node builder.
      * @return {Node<vec3>} The outgoing light node.
      */
-    setupLighting(builder: NodeBuilder): Node<any>;
+    setupLighting(builder: NodeBuilder): Node;
     /**
      * Setup the fog.
      *
@@ -447,7 +428,7 @@ declare class NodeMaterial extends Material {
      * @param {Node<vec4>} outputNode - The existing output node.
      * @return {Node<vec4>} The output node.
      */
-    setupFog(builder: NodeBuilder, outputNode: Node<any>): Node<any>;
+    setupFog(builder: NodeBuilder, outputNode: Node): Node;
     /**
      * Setups premultiplied alpha.
      *
@@ -455,7 +436,7 @@ declare class NodeMaterial extends Material {
      * @param {Node<vec4>} outputNode - The existing output node.
      * @return {Node<vec4>} The output node.
      */
-    setupPremultipliedAlpha(builder: NodeBuilder, outputNode: Node<any>): Node<any>;
+    setupPremultipliedAlpha(builder: NodeBuilder, outputNode: Node): Node;
     /**
      * Setups the output node.
      *
@@ -463,7 +444,7 @@ declare class NodeMaterial extends Material {
      * @param {Node<vec4>} outputNode - The existing output node.
      * @return {Node<vec4>} The output node.
      */
-    setupOutput(builder: NodeBuilder, outputNode: Node<any>): Node<any>;
+    setupOutput(builder: NodeBuilder, outputNode: Node): Node;
     /**
      * Most classic material types have a node pendant e.g. for `MeshBasicMaterial`
      * there is `MeshBasicNodeMaterial`. This utility method is intended for
@@ -478,7 +459,10 @@ declare class NodeMaterial extends Material {
      * @param {NodeMaterial} source - The material to copy.
      * @return {NodeMaterial} A reference to this node material.
      */
-    copy(source: NodeMaterial): NodeMaterial;
+    copy(source: NodeMaterial): this;
 }
-import { Material } from '../Material.js';
-import NodeMaterialObserver from './manager/NodeMaterialObserver.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface NodeMaterial extends NodeMaterialNodeProperties {}
+
+export default NodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/NodeMaterials.d.ts b/jsdoc-testing/jsdoc/materials/nodes/NodeMaterials.d.ts
index 3ab3141d..df1dde1d 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/NodeMaterials.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/NodeMaterials.d.ts
@@ -1,18 +1,18 @@
 export { default as NodeMaterialObserver } from "./manager/NodeMaterialObserver.js";
-export { default as NodeMaterial } from "./NodeMaterial.js";
-export { default as LineBasicNodeMaterial } from "./LineBasicNodeMaterial.js";
-export { default as LineDashedNodeMaterial } from "./LineDashedNodeMaterial.js";
-export { default as Line2NodeMaterial } from "./Line2NodeMaterial.js";
-export { default as MeshNormalNodeMaterial } from "./MeshNormalNodeMaterial.js";
-export { default as MeshBasicNodeMaterial } from "./MeshBasicNodeMaterial.js";
-export { default as MeshLambertNodeMaterial } from "./MeshLambertNodeMaterial.js";
-export { default as MeshPhongNodeMaterial } from "./MeshPhongNodeMaterial.js";
-export { default as MeshStandardNodeMaterial } from "./MeshStandardNodeMaterial.js";
-export { default as MeshPhysicalNodeMaterial } from "./MeshPhysicalNodeMaterial.js";
-export { default as MeshSSSNodeMaterial } from "./MeshSSSNodeMaterial.js";
-export { default as MeshToonNodeMaterial } from "./MeshToonNodeMaterial.js";
-export { default as MeshMatcapNodeMaterial } from "./MeshMatcapNodeMaterial.js";
-export { default as PointsNodeMaterial } from "./PointsNodeMaterial.js";
-export { default as SpriteNodeMaterial } from "./SpriteNodeMaterial.js";
-export { default as ShadowNodeMaterial } from "./ShadowNodeMaterial.js";
-export { default as VolumeNodeMaterial } from "./VolumeNodeMaterial.js";
+export { default as NodeMaterial, NodeMaterialParameters } from "./NodeMaterial.js";
+export { default as LineBasicNodeMaterial, LineBasicNodeMaterialParameters } from "./LineBasicNodeMaterial.js";
+export { default as LineDashedNodeMaterial, LineDashedNodeMaterialParameters } from "./LineDashedNodeMaterial.js";
+export { default as Line2NodeMaterial, Line2NodeMaterialParameters } from "./Line2NodeMaterial.js";
+export { default as MeshNormalNodeMaterial, MeshNormalNodeMaterialParameters } from "./MeshNormalNodeMaterial.js";
+export { default as MeshBasicNodeMaterial, MeshBasicNodeMaterialParameters } from "./MeshBasicNodeMaterial.js";
+export { default as MeshLambertNodeMaterial, MeshLambertNodeMaterialParameters } from "./MeshLambertNodeMaterial.js";
+export { default as MeshPhongNodeMaterial, MeshPhongNodeMaterialParameters } from "./MeshPhongNodeMaterial.js";
+export { default as MeshStandardNodeMaterial, MeshStandardNodeMaterialParameters } from "./MeshStandardNodeMaterial.js";
+export { default as MeshPhysicalNodeMaterial, MeshPhysicalNodeMaterialParameters } from "./MeshPhysicalNodeMaterial.js";
+export { default as MeshSSSNodeMaterial, MeshSSSNodeMaterialParameters } from "./MeshSSSNodeMaterial.js";
+export { default as MeshToonNodeMaterial, MeshToonNodeMaterialParameters } from "./MeshToonNodeMaterial.js";
+export { default as MeshMatcapNodeMaterial, MeshMatcapNodeMaterialParameters } from "./MeshMatcapNodeMaterial.js";
+export { default as PointsNodeMaterial, PointsNodeMaterialParameters } from "./PointsNodeMaterial.js";
+export { default as SpriteNodeMaterial, SpriteNodeMaterialParameters } from "./SpriteNodeMaterial.js";
+export { default as ShadowNodeMaterial, ShadowNodeMaterialParameters } from "./ShadowNodeMaterial.js";
+export { default as VolumeNodeMaterial, VolumeNodeMaterialParameters } from "./VolumeNodeMaterial.js";
diff --git a/jsdoc-testing/jsdoc/materials/nodes/PointsNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/PointsNodeMaterial.d.ts
index 1a6e48ee..5bdf6b56 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/PointsNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/PointsNodeMaterial.d.ts
@@ -1,4 +1,27 @@
-export default PointsNodeMaterial;
+import SpriteNodeMaterial, {
+    SpriteNodeMaterialNodeProperties,
+} from './SpriteNodeMaterial.js';
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import Node from "../../nodes/core/Node.js";
+import { PointsMaterialParameters, PointsMaterialProperties } from '../PointsMaterial.js';
+
+export interface PointsNodeMaterialNodeProperties extends SpriteNodeMaterialNodeProperties {
+    /**
+     * This node property provides an additional way to set the point size.
+     *
+     * Note that WebGPU only supports point primitives with 1 pixel size. Consequently,
+     * this node has no effect when the material is used with {@link Points} and a WebGPU
+     * backend. If an application wants to render points with a size larger than 1 pixel,
+     * the material should be used with {@link Sprite} and instancing.
+     *
+     * @default null
+     */
+    sizeNode: Node;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface PointsNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<PointsNodeMaterialNodeProperties>>, PointsMaterialParameters {}
+
 /**
  * Node material version of {@link PointsMaterial}.
  *
@@ -17,33 +40,19 @@ export default PointsNodeMaterial;
  * ```js
  * const instancedPoints = new THREE.Sprite( new THREE.PointsNodeMaterial( { positionNode: instancedBufferAttribute( positionAttribute ) } ) );
  * ```
- *
- * @augments SpriteNodeMaterial
  */
 declare class PointsNodeMaterial extends SpriteNodeMaterial {
-    /**
-     * This node property provides an additional way to set the point size.
-     *
-     * Note that WebGPU only supports point primitives with 1 pixel size. Consequently,
-     * this node has no effect when the material is used with {@link Points} and a WebGPU
-     * backend. If an application wants to render points with a size larger than 1 pixel,
-     * the material should be used with {@link Sprite} and instancing.
-     *
-     * @type {?Node<vec2>}
-     * @default null
-     */
-    sizeNode: Node<any> | null;
+    constructor(parameters?: PointsNodeMaterialParameters);
     /**
      * This flag can be used for type testing.
      *
-     * @type {boolean}
-     * @readonly
      * @default true
      */
     readonly isPointsNodeMaterial: boolean;
-    setupPositionView(): any;
-    setupVertexSprite(builder: any): any;
-    setupVertex(builder: any): any;
-    _useAlphaToCoverage: any;
+    setValues(values?: PointsNodeMaterialParameters): void;
 }
-import SpriteNodeMaterial from './SpriteNodeMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface PointsNodeMaterial extends PointsNodeMaterialNodeProperties, PointsMaterialProperties {}
+
+export default PointsNodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/ShadowNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/ShadowNodeMaterial.d.ts
index edf90468..947f9df0 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/ShadowNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/ShadowNodeMaterial.d.ts
@@ -1,8 +1,17 @@
-export default ShadowNodeMaterial;
+import NodeMaterial, { NodeMaterialNodeProperties } from './NodeMaterial.js';
+import ShadowMaskModel from '../../nodes/functions/ShadowMaskModel.js';
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import { ShadowMaterialParameters, ShadowMaterialProperties } from '../ShadowMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface ShadowNodeMaterialNodeProperties extends NodeMaterialNodeProperties {
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface ShadowNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<ShadowNodeMaterialNodeProperties>>, ShadowMaterialParameters {}
+
 /**
  * Node material version of {@link ShadowMaterial}.
- *
- * @augments NodeMaterial
  */
 declare class ShadowNodeMaterial extends NodeMaterial {
     /**
@@ -10,15 +19,14 @@ declare class ShadowNodeMaterial extends NodeMaterial {
      *
      * @param {Object} [parameters] - The configuration parameter.
      */
-    constructor(parameters?: Object);
+    constructor(parameters?: ShadowNodeMaterialParameters);
     /**
      * This flag can be used for type testing.
      *
-     * @type {boolean}
-     * @readonly
      * @default true
      */
     readonly isShadowNodeMaterial: boolean;
+    setValues(values?: ShadowNodeMaterialParameters): void;
     /**
      * Setups the lighting model.
      *
@@ -26,5 +34,8 @@ declare class ShadowNodeMaterial extends NodeMaterial {
      */
     setupLightingModel(): ShadowMaskModel;
 }
-import NodeMaterial from './NodeMaterial.js';
-import ShadowMaskModel from '../../nodes/functions/ShadowMaskModel.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface ShadowNodeMaterial extends ShadowNodeMaterialNodeProperties, ShadowMaterialProperties {}
+
+export default ShadowNodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/SpriteNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/SpriteNodeMaterial.d.ts
index 7f8da84d..48184c33 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/SpriteNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/SpriteNodeMaterial.d.ts
@@ -1,25 +1,10 @@
-export default SpriteNodeMaterial;
-/**
- * Node material version of {@link SpriteMaterial}.
- *
- * @augments NodeMaterial
- */
-declare class SpriteNodeMaterial extends NodeMaterial {
-    /**
-     * Constructs a new sprite node material.
-     *
-     * @param {Object} [parameters] - The configuration parameter.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isSpriteNodeMaterial: boolean;
-    _useSizeAttenuation: boolean;
+import NodeMaterial, { NodeMaterialNodeProperties } from './NodeMaterial.js';
+import Node from '../../nodes/core/Node.js';
+import { MapColorPropertiesToColorRepresentations } from '../Material.js';
+import NodeBuilder from "../../nodes/core/NodeBuilder.js";
+import { SpriteMaterialParameters, SpriteMaterialProperties } from '../SpriteMaterial.js';
+
+export interface SpriteNodeMaterialNodeProperties extends NodeMaterialNodeProperties {
     /**
      * The rotation of sprite materials is by default inferred from the `rotation`,
      * property. This node property allows to overwrite the default and define
@@ -28,28 +13,17 @@ declare class SpriteNodeMaterial extends NodeMaterial {
      * If you don't want to overwrite the rotation but modify the existing
      * value instead, use {@link materialRotation}.
      *
-     * @type {?Node<float>}
      * @default null
      */
-    rotationNode: Node<any> | null;
+    rotationNode: Node | null;
     /**
      * This node property provides an additional way to scale sprites next to
      * `Object3D.scale`. The scale transformation based in `Object3D.scale`
      * is multiplied with the scale value of this node in the vertex shader.
      *
-     * @type {?Node<vec2>}
      * @default null
      */
-    scaleNode: Node<any> | null;
-    /**
-     * Setups the position node in view space. This method implements
-     * the sprite specific vertex shader.
-     *
-     * @param {NodeBuilder} builder - The current node builder.
-     * @return {Node<vec3>} The position in view space.
-     */
-    setupPositionView(builder: NodeBuilder): Node<any>;
-    copy(source: any): NodeMaterial;
+    scaleNode: Node | null;
     set sizeAttenuation(value: boolean);
     /**
      * Whether to use size attenuation or not.
@@ -59,4 +33,41 @@ declare class SpriteNodeMaterial extends NodeMaterial {
      */
     get sizeAttenuation(): boolean;
 }
-import NodeMaterial from './NodeMaterial.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface SpriteNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<SpriteNodeMaterialNodeProperties>>, SpriteMaterialParameters {}
+
+/**
+ * Node material version of {@link SpriteMaterial}.
+ */
+declare class SpriteNodeMaterial extends NodeMaterial {
+    /**
+     * Constructs a new sprite node material.
+     *
+     * @param {Object} [parameters] - The configuration parameter.
+     */
+    constructor(parameters?: SpriteNodeMaterialParameters);
+    readonly isSpriteMaterial: boolean;
+    /**
+     * This flag can be used for type testing.
+     *
+     * @type {boolean}
+     * @readonly
+     * @default true
+     */
+    readonly isSpriteNodeMaterial: boolean;
+    setValues(values?: SpriteNodeMaterialParameters): void;
+    /**
+     * Setups the position node in view space. This method implements
+     * the sprite specific vertex shader.
+     *
+     * @param {NodeBuilder} builder - The current node builder.
+     * @return {Node<vec3>} The position in view space.
+     */
+    setupPositionView(builder: NodeBuilder): Node;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface SpriteNodeMaterial extends SpriteNodeMaterialNodeProperties, SpriteMaterialProperties {}
+
+export default SpriteNodeMaterial;
diff --git a/jsdoc-testing/jsdoc/materials/nodes/VolumeNodeMaterial.d.ts b/jsdoc-testing/jsdoc/materials/nodes/VolumeNodeMaterial.d.ts
index 8b5885c3..490eaea6 100644
--- a/jsdoc-testing/jsdoc/materials/nodes/VolumeNodeMaterial.d.ts
+++ b/jsdoc-testing/jsdoc/materials/nodes/VolumeNodeMaterial.d.ts
@@ -1,28 +1,13 @@
-export default VolumeNodeMaterial;
-/**
- * Volume node material.
- *
- * @augments NodeMaterial
- */
-declare class VolumeNodeMaterial extends NodeMaterial {
-    /**
-     * Constructs a new volume node material.
-     *
-     * @param {Object} [parameters] - The configuration parameter.
-     */
-    constructor(parameters?: Object);
-    /**
-     * This flag can be used for type testing.
-     *
-     * @type {boolean}
-     * @readonly
-     * @default true
-     */
-    readonly isVolumeNodeMaterial: boolean;
+import NodeMaterial, { NodeMaterialNodeProperties } from './NodeMaterial.js';
+import VolumetricLightingModel from '../../nodes/functions/VolumetricLightingModel.js';
+import { MapColorPropertiesToColorRepresentations, MaterialParameters, MaterialProperties } from '../Material.js';
+import Node from "../../nodes/core/Node.js";
+import { ShaderNodeObject } from "../../nodes/tsl/TSLCore.js";
+
+export interface VolumeNodeMaterialNodeProperties extends NodeMaterialNodeProperties {
     /**
      * Number of steps used for raymarching.
      *
-     * @type {number}
      * @default 25
      */
     steps: number;
@@ -30,19 +15,43 @@ declare class VolumeNodeMaterial extends NodeMaterial {
      * Offsets the distance a ray has been traveled through a volume.
      * Can be used to implement dithering to reduce banding.
      *
-     * @type {Node<float>}
      * @default null
      */
-    offsetNode: Node<float>;
+    offsetNode: Node;
     /**
      * Node used for scattering calculations.
      *
-     * @type {Function|FunctionNode<vec4>}
      * @default null
      */
-    scatteringNode: Function | FunctionNode<vec4>;
-    side: number;
+    scatteringNode: (params: { positionRay: ShaderNodeObject<Node> }) => Node | null;
+}
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+export interface VolumeNodeMaterialParameters extends Partial<MapColorPropertiesToColorRepresentations<VolumeNodeMaterialNodeProperties>>, MaterialParameters {}
+
+/**
+ * Volume node material.
+ *
+ * @augments NodeMaterial
+ */
+declare class VolumeNodeMaterial extends NodeMaterial {
+    /**
+     * Constructs a new volume node material.
+     *
+     * @param {Object} [parameters] - The configuration parameter.
+     */
+    constructor(parameters?: VolumeNodeMaterialParameters);
+    /**
+     * This flag can be used for type testing.
+     *
+     * @default true
+     */
+    readonly isVolumeNodeMaterial: boolean;
+    setValues(values?: VolumeNodeMaterialParameters): void;
     setupLightingModel(): VolumetricLightingModel;
 }
-import NodeMaterial from './NodeMaterial.js';
-import VolumetricLightingModel from '../../nodes/functions/VolumetricLightingModel.js';
+
+// eslint-disable-next-line @typescript-eslint/no-empty-interface
+interface VolumeNodeMaterial extends VolumeNodeMaterialNodeProperties, MaterialProperties {}
+
+export default VolumeNodeMaterial;
