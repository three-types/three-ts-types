diff --git a/examples-jsm/examples/nodes/core/Node.ts b/examples-jsm/examples/nodes/core/Node.ts
index 438c44dd..d5115493 100644
--- a/examples-jsm/examples/nodes/core/Node.ts
+++ b/examples-jsm/examples/nodes/core/Node.ts
@@ -2,12 +2,31 @@ import { EventDispatcher } from 'three';
 import { NodeUpdateType } from './constants.js';
 import { getNodeChildren, getCacheKey } from './NodeUtils.js';
 import { MathUtils } from 'three';
+import NodeBuilder from './NodeBuilder.js';
 
 const NodeClasses = new Map();
 
 let _nodeId = 0;
 
 class Node extends EventDispatcher {
+    // TODO
+    // nodeType: string??
+
+    updateType: NodeUpdateType;
+    updateBeforeType: NodeUpdateType;
+
+    uuid: string;
+
+    version: number;
+
+    // TODO
+    // _cacheKey??
+    _cacheKeyVersion: number;
+
+    readonly isNode: true;
+
+    readonly id!: number;
+
     constructor(nodeType = null) {
         super();
 
@@ -28,7 +47,7 @@ class Node extends EventDispatcher {
         Object.defineProperty(this, 'id', { value: _nodeId++ });
     }
 
-    set needsUpdate(value) {
+    set needsUpdate(value: boolean) {
         if (value === true) {
             this.version++;
         }
@@ -73,7 +92,7 @@ class Node extends EventDispatcher {
         return this;
     }
 
-    isGlobal(/*builder*/) {
+    isGlobal(builder: NodeBuilder) {
         return false;
     }
 
@@ -106,7 +125,7 @@ class Node extends EventDispatcher {
         return this._cacheKey;
     }
 
-    getHash(/*builder*/) {
+    getHash(builder: NodeBuilder) {
         return this.uuid;
     }
 
@@ -118,14 +137,14 @@ class Node extends EventDispatcher {
         return this.updateBeforeType;
     }
 
-    getElementType(builder) {
+    getElementType(builder: NodeBuilder) {
         const type = this.getNodeType(builder);
         const elementType = builder.getElementType(type);
 
         return elementType;
     }
 
-    getNodeType(builder) {
+    getNodeType(builder: NodeBuilder) {
         const nodeProperties = builder.getNodeProperties(this);
 
         if (nodeProperties.outputNode) {
@@ -135,14 +154,14 @@ class Node extends EventDispatcher {
         return this.nodeType;
     }
 
-    getShared(builder) {
+    getShared(builder: NodeBuilder) {
         const hash = this.getHash(builder);
         const nodeFromHash = builder.getNodeFromHash(hash);
 
         return nodeFromHash || this;
     }
 
-    setup(builder) {
+    setup(builder: NodeBuilder) {
         const nodeProperties = builder.getNodeProperties(this);
 
         for (const childNode of this.getChildren()) {
@@ -153,7 +172,7 @@ class Node extends EventDispatcher {
         return null;
     }
 
-    construct(builder) {
+    construct(builder: NodeBuilder) {
         // @deprecated, r157
 
         console.warn('THREE.Node: construct() is deprecated. Use setup() instead.');
@@ -161,14 +180,14 @@ class Node extends EventDispatcher {
         return this.setup(builder);
     }
 
-    increaseUsage(builder) {
+    increaseUsage(builder: NodeBuilder) {
         const nodeData = builder.getDataFromNode(this);
         nodeData.usageCount = nodeData.usageCount === undefined ? 1 : nodeData.usageCount + 1;
 
         return nodeData.usageCount;
     }
 
-    analyze(builder) {
+    analyze(builder: NodeBuilder) {
         const usageCount = this.increaseUsage(builder);
 
         if (usageCount === 1) {
@@ -184,7 +203,7 @@ class Node extends EventDispatcher {
         }
     }
 
-    generate(builder, output) {
+    generate(builder: NodeBuilder, output?: string | null) {
         const { outputNode } = builder.getNodeProperties(this);
 
         if (outputNode && outputNode.isNode === true) {
diff --git a/examples-jsm/examples/nodes/core/constants.ts b/examples-jsm/examples/nodes/core/constants.ts
index 3b01a9a6..3391a4be 100644
--- a/examples-jsm/examples/nodes/core/constants.ts
+++ b/examples-jsm/examples/nodes/core/constants.ts
@@ -1,26 +1,26 @@
-export const NodeShaderStage = {
-    VERTEX: 'vertex',
-    FRAGMENT: 'fragment',
-};
+export enum NodeShaderStage {
+    VERTEX = 'vertex',
+    FRAGMENT = 'fragment',
+}
 
-export const NodeUpdateType = {
-    NONE: 'none',
-    FRAME: 'frame',
-    RENDER: 'render',
-    OBJECT: 'object',
-};
+export enum NodeUpdateType {
+    NONE = 'none',
+    FRAME = 'frame',
+    RENDER = 'render',
+    OBJECT = 'object',
+}
 
-export const NodeType = {
-    BOOLEAN: 'bool',
-    INTEGER: 'int',
-    FLOAT: 'float',
-    VECTOR2: 'vec2',
-    VECTOR3: 'vec3',
-    VECTOR4: 'vec4',
-    MATRIX2: 'mat2',
-    MATRIX3: 'mat3',
-    MATRIX4: 'mat4',
-};
+export enum NodeType {
+    BOOLEAN = 'bool',
+    INTEGER = 'int',
+    FLOAT = 'float',
+    VECTOR2 = 'vec2',
+    VECTOR3 = 'vec3',
+    VECTOR4 = 'vec4',
+    MATRIX2 = 'mat2',
+    MATRIX3 = 'mat3',
+    MATRIX4 = 'mat4',
+}
 
 export const defaultShaderStages = ['fragment', 'vertex'];
 export const defaultBuildStages = ['setup', 'analyze', 'generate'];
